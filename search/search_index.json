{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"East Herts Miniature Railway \u00b6 East Herts Miniature Railway, founded in 1978, is an independent 7\u00bc\" gauge miniature railway located in the grounds of Van Hage garden center, near Ware, in the Hertfordshire countryside. We are staffed entirely by volunteers. After deducting the costs of running, we make regular donations to local charitable causes. To find out more about us, please visit Our website This site holds the documentation for the Signalling & Telegraphy systems that we use, including our main, computer-based signalling system, and the ancillary software and hardware used to run. Although not currently so, our aim is to make all the hardware and software designs that we have open source to be available to any miniature railway that wishes to use them.","title":"Home"},{"location":"#east-herts-miniature-railway","text":"East Herts Miniature Railway, founded in 1978, is an independent 7\u00bc\" gauge miniature railway located in the grounds of Van Hage garden center, near Ware, in the Hertfordshire countryside. We are staffed entirely by volunteers. After deducting the costs of running, we make regular donations to local charitable causes. To find out more about us, please visit Our website This site holds the documentation for the Signalling & Telegraphy systems that we use, including our main, computer-based signalling system, and the ancillary software and hardware used to run. Although not currently so, our aim is to make all the hardware and software designs that we have open source to be available to any miniature railway that wishes to use them.","title":"East Herts Miniature Railway"},{"location":"overview/","text":"Signalling System overview \u00b6 The siganlling system at EHMR is completely computer based. At any time, the computer can be in control of all signals, points and requests. Equally, with the use of our London Underground signalling frame, the system is able to be operated in a manual state. Field devices \u00b6 Broadly speaking, there are seven different input and output types. Input only \u00b6 Track sections Sensors (for example tunnel shutter sensors, level crossing gate sensors) Input and Output \u00b6 Request buttons - input of the button itself, output to the LED halo included. Points - output to set the point and input to read the current state of the point. Relays. Some are for input detection, some for latching outputs from the system. Levers - we have a signalling frame which contains up to 23 levers. Each lever has an input for Normal and Reverse, and an output to operate the electromechanical locking. Output only \u00b6 Signals Diagram \u00b6","title":"Signalling System Overview"},{"location":"overview/#signalling-system-overview","text":"The siganlling system at EHMR is completely computer based. At any time, the computer can be in control of all signals, points and requests. Equally, with the use of our London Underground signalling frame, the system is able to be operated in a manual state.","title":"Signalling System overview"},{"location":"overview/#field-devices","text":"Broadly speaking, there are seven different input and output types.","title":"Field devices"},{"location":"overview/#input-only","text":"Track sections Sensors (for example tunnel shutter sensors, level crossing gate sensors)","title":"Input only"},{"location":"overview/#input-and-output","text":"Request buttons - input of the button itself, output to the LED halo included. Points - output to set the point and input to read the current state of the point. Relays. Some are for input detection, some for latching outputs from the system. Levers - we have a signalling frame which contains up to 23 levers. Each lever has an input for Normal and Reverse, and an output to operate the electromechanical locking.","title":"Input and Output"},{"location":"overview/#output-only","text":"Signals","title":"Output only"},{"location":"overview/#diagram","text":"","title":"Diagram"},{"location":"485card/","text":"TIA485 Signalling Interface Cards \u00b6 The system interfaces with the real world using a series of TIA485 interface cards. These cards are designed in a flexible manner to allow usage across the site and the future extension. Each card has a total of 16 analog inputs, and 16 digital outputs. Two part boards \u00b6 The interface card is split into two discreet boards for ease of maintenance. Back board \u00b6 The back board contains the components that are generally more resilient, including: voltage dividers LEDs TIA485 bus connectors (in and thru) Programming connector Additional breakout headers Schematic \u00b6 Click here to see the schematic Front board \u00b6 The front board includes all the delicate electronics, and will be easily swappable. The boards have been designed in such a way as all the configuration is done on the rear board, meaning when a front board is replaced there are no additional steps to get the board up and running. Schematic \u00b6 Click here to see the schematic Analog inputs \u00b6 Analog inputs are provided by a 74HC4067 chip. This allows a single analog pin to read 16 inputs using a set of four address pins. Voltage division \u00b6 The input to each of the analog mux channels goes through a voltage divider to bring a potential 50v down to 5v. 50v was chosen to accommodate the highest voltage expected in the field: 48v. Digital Outputs \u00b6 Digital outputs are provided by 74HC595 chips chained together. The outputs of the 595s then go through a TPD2005 , a driver chip, which converts the 5v logic level to the appropriate output voltage (24v or 48v). Monitoring \u00b6 To provide monitoring of the output chips, a second 74HC4067 analog mux device is included. This allows the system to detect whether each output of the driver chips is working as expected. Processing \u00b6 An ATMega328p and appropriate support circuitry is included on the board to read the inputs, write to the outputs, and generally control the board. Commmunication \u00b6 The field boards use Modbus to communicate with the head end device. Modbus is used over a TIA485 bus. There is an on-board MAX1487 device to handle the conversion between TTL (which the ATMega outputs) and TIA485 levels. Protocol \u00b6 The devices use Modbus as a communication protocol on top of the 485 bus. Coils & registers \u00b6 They are configured with: 16 coils for digital output 16 input registers for analog input from the field 16 input registers for monitoring of digital outputs 1 input register to monitor the 24v rail Addressing \u00b6 The addressing for the device is configured using a 8 channel DIP switch, placed on the rear board. Valid addresses are 1 - 247.","title":"Signalling Interface Cards"},{"location":"485card/#tia485-signalling-interface-cards","text":"The system interfaces with the real world using a series of TIA485 interface cards. These cards are designed in a flexible manner to allow usage across the site and the future extension. Each card has a total of 16 analog inputs, and 16 digital outputs.","title":"TIA485 Signalling Interface Cards"},{"location":"485card/#two-part-boards","text":"The interface card is split into two discreet boards for ease of maintenance.","title":"Two part boards"},{"location":"485card/#back-board","text":"The back board contains the components that are generally more resilient, including: voltage dividers LEDs TIA485 bus connectors (in and thru) Programming connector Additional breakout headers","title":"Back board"},{"location":"485card/#schematic","text":"Click here to see the schematic","title":"Schematic"},{"location":"485card/#front-board","text":"The front board includes all the delicate electronics, and will be easily swappable. The boards have been designed in such a way as all the configuration is done on the rear board, meaning when a front board is replaced there are no additional steps to get the board up and running.","title":"Front board"},{"location":"485card/#schematic_1","text":"Click here to see the schematic","title":"Schematic"},{"location":"485card/#analog-inputs","text":"Analog inputs are provided by a 74HC4067 chip. This allows a single analog pin to read 16 inputs using a set of four address pins.","title":"Analog inputs"},{"location":"485card/#voltage-division","text":"The input to each of the analog mux channels goes through a voltage divider to bring a potential 50v down to 5v. 50v was chosen to accommodate the highest voltage expected in the field: 48v.","title":"Voltage division"},{"location":"485card/#digital-outputs","text":"Digital outputs are provided by 74HC595 chips chained together. The outputs of the 595s then go through a TPD2005 , a driver chip, which converts the 5v logic level to the appropriate output voltage (24v or 48v).","title":"Digital Outputs"},{"location":"485card/#monitoring","text":"To provide monitoring of the output chips, a second 74HC4067 analog mux device is included. This allows the system to detect whether each output of the driver chips is working as expected.","title":"Monitoring"},{"location":"485card/#processing","text":"An ATMega328p and appropriate support circuitry is included on the board to read the inputs, write to the outputs, and generally control the board.","title":"Processing"},{"location":"485card/#commmunication","text":"The field boards use Modbus to communicate with the head end device. Modbus is used over a TIA485 bus. There is an on-board MAX1487 device to handle the conversion between TTL (which the ATMega outputs) and TIA485 levels.","title":"Commmunication"},{"location":"485card/#protocol","text":"The devices use Modbus as a communication protocol on top of the 485 bus.","title":"Protocol"},{"location":"485card/#coils-registers","text":"They are configured with: 16 coils for digital output 16 input registers for analog input from the field 16 input registers for monitoring of digital outputs 1 input register to monitor the 24v rail","title":"Coils &amp; registers"},{"location":"485card/#addressing","text":"The addressing for the device is configured using a 8 channel DIP switch, placed on the rear board. Valid addresses are 1 - 247.","title":"Addressing"},{"location":"audiosystem/","text":"Signalling System Audio System \u00b6 Introduction \u00b6 This is the audio code for the signalling system for the East Herts Miniature Railway. The project is written in python and handles all audio that is played through the station PA system Updated on 2022-11-28 at 15:55:23 +0000","title":"Signalling Audio System"},{"location":"audiosystem/#signalling-system-audio-system","text":"","title":"Signalling System Audio System"},{"location":"audiosystem/#introduction","text":"This is the audio code for the signalling system for the East Herts Miniature Railway. The project is written in python and handles all audio that is played through the station PA system Updated on 2022-11-28 at 15:55:23 +0000","title":"Introduction"},{"location":"audiosystem/Classes/","text":"Classes \u00b6 namespace audio class AudioHandler Audio handler class. namespace main namespace message_handlers namespace mqtt MQTT Client functions. class MqttConnector Mqtt Connector class. Updated on 2022-11-28 at 15:55:23 +0000","title":"Classes"},{"location":"audiosystem/Classes/#classes","text":"namespace audio class AudioHandler Audio handler class. namespace main namespace message_handlers namespace mqtt MQTT Client functions. class MqttConnector Mqtt Connector class. Updated on 2022-11-28 at 15:55:23 +0000","title":"Classes"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/","text":"audio::AudioHandler \u00b6 Audio handler class. Public Functions \u00b6 Name def init (self self) Initialise the class. def queue_audio (self self, audio_type audio_type, left left, right right) Queue an audio file for playing. def play_file (self self, filename filename, filetype filetype, left left, right right) Actually play an audio file. def loop (self self) Perform the loop - check if the queue is empty, if not play the audio. Public Attributes \u00b6 Name list directories dictionary audio_files dictionary audio_counters dictionary audio_count root audio_queue Public Functions Documentation \u00b6 function init \u00b6 def init ( self self ) Initialise the class. function queue_audio \u00b6 def queue_audio ( self self , audio_type audio_type , left left , right right ) Queue an audio file for playing. function play_file \u00b6 def play_file ( self self , filename filename , filetype filetype , left left , right right ) Actually play an audio file. function loop \u00b6 def loop ( self self ) Perform the loop - check if the queue is empty, if not play the audio. Public Attributes Documentation \u00b6 variable directories \u00b6 static list directories = []; variable audio_files \u00b6 static dictionary audio_files = {}; variable audio_counters \u00b6 static dictionary audio_counters = {}; variable audio_count \u00b6 static dictionary audio_count = {}; variable root \u00b6 static root = os . path . dirname ( __file__ ); variable audio_queue \u00b6 static audio_queue = queue . Queue (); Updated on 2022-11-28 at 15:55:23 +0000","title":"audio::AudioHandler"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#audioaudiohandler","text":"Audio handler class.","title":"audio::AudioHandler"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#public-functions","text":"Name def init (self self) Initialise the class. def queue_audio (self self, audio_type audio_type, left left, right right) Queue an audio file for playing. def play_file (self self, filename filename, filetype filetype, left left, right right) Actually play an audio file. def loop (self self) Perform the loop - check if the queue is empty, if not play the audio.","title":"Public Functions"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#public-attributes","text":"Name list directories dictionary audio_files dictionary audio_counters dictionary audio_count root audio_queue","title":"Public Attributes"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#function-init","text":"def init ( self self ) Initialise the class.","title":"function init"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#function-queue_audio","text":"def queue_audio ( self self , audio_type audio_type , left left , right right ) Queue an audio file for playing.","title":"function queue_audio"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#function-play_file","text":"def play_file ( self self , filename filename , filetype filetype , left left , right right ) Actually play an audio file.","title":"function play_file"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#function-loop","text":"def loop ( self self ) Perform the loop - check if the queue is empty, if not play the audio.","title":"function loop"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-directories","text":"static list directories = [];","title":"variable directories"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-audio_files","text":"static dictionary audio_files = {};","title":"variable audio_files"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-audio_counters","text":"static dictionary audio_counters = {};","title":"variable audio_counters"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-audio_count","text":"static dictionary audio_count = {};","title":"variable audio_count"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-root","text":"static root = os . path . dirname ( __file__ );","title":"variable root"},{"location":"audiosystem/Classes/classaudio_1_1AudioHandler/#variable-audio_queue","text":"static audio_queue = queue . Queue (); Updated on 2022-11-28 at 15:55:23 +0000","title":"variable audio_queue"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/","text":"mqtt::MqttConnector \u00b6 Mqtt Connector class. Public Functions \u00b6 Name def init (self self) Initialise the module. def connect_mqtt (self self) Connect to the MQTT server. def on_connect (self self, client client, userdata userdata, flags flags, response_code response_code) Callback on client connect. def on_message (self self, client client, userdata userdata, message message) Callback on message received. def send_message (self self, topic topic, payload payload) Helper function to send a message. def prep_payload (self self, data data) Helper function to prepare the wrapper for the message. Public Attributes \u00b6 Name broker port string client_id username password client bool connected connected Public Functions Documentation \u00b6 function init \u00b6 def init ( self self ) Initialise the module. function connect_mqtt \u00b6 def connect_mqtt ( self self ) Connect to the MQTT server. function on_connect \u00b6 def on_connect ( self self , client client , userdata userdata , flags flags , response_code response_code ) Callback on client connect. Parameters : client The client object userdata Data on the user flags Flags! response_code Response code from the server Return : None function on_message \u00b6 def on_message ( self self , client client , userdata userdata , message message ) Callback on message received. Parameters : client The client object userdata Data on the user message Object representing the message that has been received Return : None function send_message \u00b6 def send_message ( self self , topic topic , payload payload ) Helper function to send a message. Parameters : topic The topic to which to send a message payload The payload to send in the message Return : None function prep_payload \u00b6 def prep_payload ( self self , data data ) Helper function to prepare the wrapper for the message. Parameters : data The data to wrap within the envelope Return : The wrapped message Public Attributes Documentation \u00b6 variable broker \u00b6 static broker = os . getenv ( \"MQTT_BROKER\" ); variable port \u00b6 static port = os . getenv ( \"MQTT_PORT\" ); variable client_id \u00b6 static string client_id = 'audioplayer' ; variable username \u00b6 static username = os . getenv ( \"MQTT_USERNAME\" ); variable password \u00b6 static password = os . getenv ( \"MQTT_PASSWORD\" ); variable client \u00b6 static client = None ; variable connected \u00b6 static bool connected = False ; variable connected \u00b6 connected ; Updated on 2022-11-28 at 15:55:23 +0000","title":"mqtt::MqttConnector"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#mqttmqttconnector","text":"Mqtt Connector class.","title":"mqtt::MqttConnector"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#public-functions","text":"Name def init (self self) Initialise the module. def connect_mqtt (self self) Connect to the MQTT server. def on_connect (self self, client client, userdata userdata, flags flags, response_code response_code) Callback on client connect. def on_message (self self, client client, userdata userdata, message message) Callback on message received. def send_message (self self, topic topic, payload payload) Helper function to send a message. def prep_payload (self self, data data) Helper function to prepare the wrapper for the message.","title":"Public Functions"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#public-attributes","text":"Name broker port string client_id username password client bool connected connected","title":"Public Attributes"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-init","text":"def init ( self self ) Initialise the module.","title":"function init"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-connect_mqtt","text":"def connect_mqtt ( self self ) Connect to the MQTT server.","title":"function connect_mqtt"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-on_connect","text":"def on_connect ( self self , client client , userdata userdata , flags flags , response_code response_code ) Callback on client connect. Parameters : client The client object userdata Data on the user flags Flags! response_code Response code from the server Return : None","title":"function on_connect"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-on_message","text":"def on_message ( self self , client client , userdata userdata , message message ) Callback on message received. Parameters : client The client object userdata Data on the user message Object representing the message that has been received Return : None","title":"function on_message"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-send_message","text":"def send_message ( self self , topic topic , payload payload ) Helper function to send a message. Parameters : topic The topic to which to send a message payload The payload to send in the message Return : None","title":"function send_message"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#function-prep_payload","text":"def prep_payload ( self self , data data ) Helper function to prepare the wrapper for the message. Parameters : data The data to wrap within the envelope Return : The wrapped message","title":"function prep_payload"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-broker","text":"static broker = os . getenv ( \"MQTT_BROKER\" );","title":"variable broker"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-port","text":"static port = os . getenv ( \"MQTT_PORT\" );","title":"variable port"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-client_id","text":"static string client_id = 'audioplayer' ;","title":"variable client_id"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-username","text":"static username = os . getenv ( \"MQTT_USERNAME\" );","title":"variable username"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-password","text":"static password = os . getenv ( \"MQTT_PASSWORD\" );","title":"variable password"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-client","text":"static client = None ;","title":"variable client"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-connected","text":"static bool connected = False ;","title":"variable connected"},{"location":"audiosystem/Classes/classmqtt_1_1MqttConnector/#variable-connected_1","text":"connected ; Updated on 2022-11-28 at 15:55:23 +0000","title":"variable connected"},{"location":"audiosystem/Examples/index_examples/","text":"Examples \u00b6 Updated on 2022-11-28 at 15:55:23 +0000","title":"Examples"},{"location":"audiosystem/Examples/index_examples/#examples","text":"Updated on 2022-11-28 at 15:55:23 +0000","title":"Examples"},{"location":"audiosystem/Files/README_8md/","text":"README.md \u00b6 Source code \u00b6 # Signalling Audio This repo contains the audio software used by EHMRS for their signalling system. The software runs and listens to MQTT messages, playing audio as appropriate when requested to. Updated on 2022-11-28 at 15:55:23 +0000","title":"README.md"},{"location":"audiosystem/Files/README_8md/#readmemd","text":"","title":"README.md"},{"location":"audiosystem/Files/README_8md/#source-code","text":"# Signalling Audio This repo contains the audio software used by EHMRS for their signalling system. The software runs and listens to MQTT messages, playing audio as appropriate when requested to. Updated on 2022-11-28 at 15:55:23 +0000","title":"Source code"},{"location":"audiosystem/Files/audio_8py/","text":"/github/signalling-audio/audio.py \u00b6 Namespaces \u00b6 Name audio Classes \u00b6 Name class audio::AudioHandler Audio handler class. Source code \u00b6 \"\"\"! Functions handling audio \"\"\" import os import queue import logging from pydub import AudioSegment from pydub.playback import play from mqtt import mqtt class AudioHandler : \"\"\"! Audio handler class \"\"\" directories = [] audio_files = {} audio_counters = {} audio_count = {} root = os . path . dirname ( __file__ ) audio_queue = queue . Queue () def init ( self ): \"\"\"! Initialise the class \"\"\" for option in os . listdir ( f \" { self . root } /media\" ): if option [: 1 ] == \".\" : continue if os . path . isdir ( f \" { self . root } /media/ { option } \" ): self . directories . append ( option ) for directory in self . directories : has_wave = False self . audio_files [ directory ] = [] for option in os . listdir ( f \" { self . root } /media/ { directory } \" ): if option [ - 4 :] == \".wav\" : has_wave = True self . audio_files [ directory ] . append ( f \" { self . root } /media/ { directory } / { option } \" ) if not has_wave : del self . audio_files [ directory ] else : self . audio_count [ directory ] = len ( self . audio_files [ directory ]) self . audio_counters [ directory ] = 0 def queue_audio ( self , audio_type , left , right ): \"\"\"! Queue an audio file for playing \"\"\" # Check it is a valid sound try : self . audio_files [ audio_type ] except KeyError : # Invalid audio file logging . debug ( \"Invalid audio file requested: %s \" , audio_type ) return current_index = self . audio_counters [ audio_type ] filename = self . audio_files [ audio_type ][ current_index ] self . audio_queue . put (( filename , audio_type , left , right )) self . audio_counters [ audio_type ] = ( current_index + 1 ) % self . audio_count [ audio_type ] def play_file ( self , filename , filetype , left , right ): \"\"\"! Actually play an audio file \"\"\" logging . info ( \"Playing file %s \" , filename ) if left and right : platform = 0 elif left : platform = 1 elif right : platform = 2 mqtt . send_message ( \"signalling/audio/playing\" , { \"file\" : filename , \"audio\" : filetype , \"platform\" : platform }) file = AudioSegment . from_file ( filename ) if file . channels == 2 : file , _ = file [: len ( file )] . split_to_mono () silent = AudioSegment . silent ( len ( file ), frame_rate = file . frame_rate ) if left and right : new = AudioSegment . from_mono_audiosegments ( file [: len ( file )], file [: len ( file )]) elif left : new = AudioSegment . from_mono_audiosegments ( file [: len ( file )], silent ) elif right : new = AudioSegment . from_mono_audiosegments ( silent , file [: len ( file )]) else : return play ( new ) mqtt . send_message ( \"signalling/audio/played\" , { \"file\" : filename , \"audio\" : filetype , \"platform\" : platform } ) logging . info ( \"Finished playing %s \" , filename ) def loop ( self ): \"\"\"! Perform the loop - check if the queue is empty, if not play the audio \"\"\" if not self . audio_queue . empty (): filename , filetype , left , right = self . audio_queue . get () self . play_file ( filename , filetype , left , right ) audio = AudioHandler () Updated on 2022-11-28 at 15:55:23 +0000","title":"/github/signalling-audio/audio.py"},{"location":"audiosystem/Files/audio_8py/#githubsignalling-audioaudiopy","text":"","title":"/github/signalling-audio/audio.py"},{"location":"audiosystem/Files/audio_8py/#namespaces","text":"Name audio","title":"Namespaces"},{"location":"audiosystem/Files/audio_8py/#classes","text":"Name class audio::AudioHandler Audio handler class.","title":"Classes"},{"location":"audiosystem/Files/audio_8py/#source-code","text":"\"\"\"! Functions handling audio \"\"\" import os import queue import logging from pydub import AudioSegment from pydub.playback import play from mqtt import mqtt class AudioHandler : \"\"\"! Audio handler class \"\"\" directories = [] audio_files = {} audio_counters = {} audio_count = {} root = os . path . dirname ( __file__ ) audio_queue = queue . Queue () def init ( self ): \"\"\"! Initialise the class \"\"\" for option in os . listdir ( f \" { self . root } /media\" ): if option [: 1 ] == \".\" : continue if os . path . isdir ( f \" { self . root } /media/ { option } \" ): self . directories . append ( option ) for directory in self . directories : has_wave = False self . audio_files [ directory ] = [] for option in os . listdir ( f \" { self . root } /media/ { directory } \" ): if option [ - 4 :] == \".wav\" : has_wave = True self . audio_files [ directory ] . append ( f \" { self . root } /media/ { directory } / { option } \" ) if not has_wave : del self . audio_files [ directory ] else : self . audio_count [ directory ] = len ( self . audio_files [ directory ]) self . audio_counters [ directory ] = 0 def queue_audio ( self , audio_type , left , right ): \"\"\"! Queue an audio file for playing \"\"\" # Check it is a valid sound try : self . audio_files [ audio_type ] except KeyError : # Invalid audio file logging . debug ( \"Invalid audio file requested: %s \" , audio_type ) return current_index = self . audio_counters [ audio_type ] filename = self . audio_files [ audio_type ][ current_index ] self . audio_queue . put (( filename , audio_type , left , right )) self . audio_counters [ audio_type ] = ( current_index + 1 ) % self . audio_count [ audio_type ] def play_file ( self , filename , filetype , left , right ): \"\"\"! Actually play an audio file \"\"\" logging . info ( \"Playing file %s \" , filename ) if left and right : platform = 0 elif left : platform = 1 elif right : platform = 2 mqtt . send_message ( \"signalling/audio/playing\" , { \"file\" : filename , \"audio\" : filetype , \"platform\" : platform }) file = AudioSegment . from_file ( filename ) if file . channels == 2 : file , _ = file [: len ( file )] . split_to_mono () silent = AudioSegment . silent ( len ( file ), frame_rate = file . frame_rate ) if left and right : new = AudioSegment . from_mono_audiosegments ( file [: len ( file )], file [: len ( file )]) elif left : new = AudioSegment . from_mono_audiosegments ( file [: len ( file )], silent ) elif right : new = AudioSegment . from_mono_audiosegments ( silent , file [: len ( file )]) else : return play ( new ) mqtt . send_message ( \"signalling/audio/played\" , { \"file\" : filename , \"audio\" : filetype , \"platform\" : platform } ) logging . info ( \"Finished playing %s \" , filename ) def loop ( self ): \"\"\"! Perform the loop - check if the queue is empty, if not play the audio \"\"\" if not self . audio_queue . empty (): filename , filetype , left , right = self . audio_queue . get () self . play_file ( filename , filetype , left , right ) audio = AudioHandler () Updated on 2022-11-28 at 15:55:23 +0000","title":"Source code"},{"location":"audiosystem/Files/dir_42a9cc49147c2f4c0636966a76332050/","text":"/github/signalling-audio \u00b6 Files \u00b6 Name /github/signalling-audio/audio.py /github/signalling-audio/main.py Main application entry. /github/signalling-audio/message_handlers.py /github/signalling-audio/mqtt.py Updated on 2022-11-28 at 15:55:23 +0000","title":"/github/signalling-audio"},{"location":"audiosystem/Files/dir_42a9cc49147c2f4c0636966a76332050/#githubsignalling-audio","text":"","title":"/github/signalling-audio"},{"location":"audiosystem/Files/dir_42a9cc49147c2f4c0636966a76332050/#files","text":"Name /github/signalling-audio/audio.py /github/signalling-audio/main.py Main application entry. /github/signalling-audio/message_handlers.py /github/signalling-audio/mqtt.py Updated on 2022-11-28 at 15:55:23 +0000","title":"Files"},{"location":"audiosystem/Files/index_files/","text":"Files \u00b6 dir /github/signalling-audio file py file py Main application entry. file py file py file README.md Updated on 2022-11-28 at 15:55:23 +0000","title":"Files"},{"location":"audiosystem/Files/index_files/#files","text":"dir /github/signalling-audio file py file py Main application entry. file py file py file README.md Updated on 2022-11-28 at 15:55:23 +0000","title":"Files"},{"location":"audiosystem/Files/main_8py/","text":"/github/signalling-audio/main.py \u00b6 Main application entry. Namespaces \u00b6 Name main Source code \u00b6 \"\"\"! @mainpage Signalling System Audio System @section intro_sec Introduction This is the audio code for the signalling system for the East Herts Miniature Railway. The project is written in python and handles all audio that is played through the station PA system @file main.py @brief Main application entry \"\"\" import logging from mqtt import mqtt from audio import audio logging . basicConfig ( level = logging . DEBUG ) def main (): \"\"\"! Main entry point\"\"\" logging . info ( \"Booting\" ) mqtt . init () audio . init () while True : audio . loop () main () Updated on 2022-11-28 at 15:55:23 +0000","title":"/github/signalling-audio/main.py"},{"location":"audiosystem/Files/main_8py/#githubsignalling-audiomainpy","text":"Main application entry.","title":"/github/signalling-audio/main.py"},{"location":"audiosystem/Files/main_8py/#namespaces","text":"Name main","title":"Namespaces"},{"location":"audiosystem/Files/main_8py/#source-code","text":"\"\"\"! @mainpage Signalling System Audio System @section intro_sec Introduction This is the audio code for the signalling system for the East Herts Miniature Railway. The project is written in python and handles all audio that is played through the station PA system @file main.py @brief Main application entry \"\"\" import logging from mqtt import mqtt from audio import audio logging . basicConfig ( level = logging . DEBUG ) def main (): \"\"\"! Main entry point\"\"\" logging . info ( \"Booting\" ) mqtt . init () audio . init () while True : audio . loop () main () Updated on 2022-11-28 at 15:55:23 +0000","title":"Source code"},{"location":"audiosystem/Files/message__handlers_8py/","text":"/github/signalling-audio/message_handlers.py \u00b6 Namespaces \u00b6 Name message_handlers Source code \u00b6 \"\"\"! Handlers for various messages\"\"\" import logging def handle_message ( topic , payload ): \"\"\"! Main entry point to the module \"\"\" if topic == \"play\" : play_audio ( payload ) if topic == \"config\" : handle_config ( payload ) def play_audio ( payload ): \"\"\"! Handle the queueing up of audio \"\"\" from audio import audio # pylint: disable=import-outside-toplevel try : platform = payload [ 'platform' ] audio_type = payload [ 'audio' ] except KeyError : # Invalid message logging . debug ( \"Invalid message: %s \" , payload ) return left = False right = False if platform == 0 : # Play on both platforms left = True right = True elif platform == 1 : # Just platform 1 left = True elif platform == 2 : # Just platform 2 right = True else : # Invalid platform selection return audio . queue_audio ( audio_type , left , right ) def handle_config ( payload ): \"\"\"! Handle the changing of config\"\"\" Updated on 2022-11-28 at 15:55:23 +0000","title":"/github/signalling-audio/message_handlers.py"},{"location":"audiosystem/Files/message__handlers_8py/#githubsignalling-audiomessage_handlerspy","text":"","title":"/github/signalling-audio/message_handlers.py"},{"location":"audiosystem/Files/message__handlers_8py/#namespaces","text":"Name message_handlers","title":"Namespaces"},{"location":"audiosystem/Files/message__handlers_8py/#source-code","text":"\"\"\"! Handlers for various messages\"\"\" import logging def handle_message ( topic , payload ): \"\"\"! Main entry point to the module \"\"\" if topic == \"play\" : play_audio ( payload ) if topic == \"config\" : handle_config ( payload ) def play_audio ( payload ): \"\"\"! Handle the queueing up of audio \"\"\" from audio import audio # pylint: disable=import-outside-toplevel try : platform = payload [ 'platform' ] audio_type = payload [ 'audio' ] except KeyError : # Invalid message logging . debug ( \"Invalid message: %s \" , payload ) return left = False right = False if platform == 0 : # Play on both platforms left = True right = True elif platform == 1 : # Just platform 1 left = True elif platform == 2 : # Just platform 2 right = True else : # Invalid platform selection return audio . queue_audio ( audio_type , left , right ) def handle_config ( payload ): \"\"\"! Handle the changing of config\"\"\" Updated on 2022-11-28 at 15:55:23 +0000","title":"Source code"},{"location":"audiosystem/Files/mqtt_8py/","text":"/github/signalling-audio/mqtt.py \u00b6 Namespaces \u00b6 Name mqtt MQTT Client functions. Classes \u00b6 Name class mqtt::MqttConnector Mqtt Connector class. Source code \u00b6 \"\"\"! @brief MQTT Client functions\"\"\" import os import json import ssl import logging from paho.mqtt import client as mqtt_client from message_handlers import handle_message class MqttConnector : \"\"\"! Mqtt Connector class \"\"\" broker = os . getenv ( \"MQTT_BROKER\" ) port = os . getenv ( \"MQTT_PORT\" ) client_id = 'audioplayer' username = os . getenv ( \"MQTT_USERNAME\" ) password = os . getenv ( \"MQTT_PASSWORD\" ) client = None connected = False def init ( self ): \"\"\"! Initialise the module \"\"\" logging . info ( \"Connecting to MQTT\" ) self . connect_mqtt () self . client . loop_start () while not self . connected : pass logging . info ( \"Connected\" ) self . client . subscribe ( \"signalling/audio/play\" ) def connect_mqtt ( self ): \"\"\"! Connect to the MQTT server \"\"\" # Set Connecting Client ID self . client = mqtt_client . Client ( self . client_id ) # Set the connection parameters self . client . username_pw_set ( self . username , self . password ) self . client . tls_set ( cert_reqs = ssl . CERT_NONE ) self . client . tls_insecure_set ( True ) # Set the callbacks self . client . on_connect = self . on_connect self . client . on_message = self . on_message # Actually connect self . client . connect ( self . broker , int ( self . port )) def on_connect ( self , client , userdata , flags , response_code ): # pylint:disable=unused-argument \"\"\"! Callback on client connect @param client The client object @param userdata Data on the user @param flags Flags! @param response_code Response code from the server @return None \"\"\" if response_code == 0 : logging . debug ( \"Connected to MQTT broker!\" ) self . connected = True else : logging . debug ( \"Failed to connect, return code %s \" , response_code ) def on_message ( self , client , userdata , message ): # pylint:disable=unused-argument \"\"\"! Callback on message received @param client The client object @param userdata Data on the user @param message Object representing the message that has been received @return None \"\"\" outermessage = json . loads ( message . payload . decode ( \"utf-8\" )) try : payload = outermessage [ 'payload' ] except KeyError : # Invalid message logging . debug ( \"Invalid message: %s \" , message . payload ) return handle_message ( message . topic [ 17 :], payload ) def send_message ( self , topic , payload ): \"\"\"! Helper function to send a message @param topic The topic to which to send a message @param payload The payload to send in the message @return None \"\"\" self . client . publish ( topic , self . prep_payload ( payload )) def prep_payload ( self , data ): \"\"\"! Helper function to prepare the wrapper for the message @param data The data to wrap within the envelope @return The wrapped message \"\"\" payload = { \"username\" : \"system\" , \"source\" : \"audioplayer\" , \"payload\" : data } return json . dumps ( payload ) mqtt = MqttConnector () Updated on 2022-11-28 at 15:55:23 +0000","title":"/github/signalling-audio/mqtt.py"},{"location":"audiosystem/Files/mqtt_8py/#githubsignalling-audiomqttpy","text":"","title":"/github/signalling-audio/mqtt.py"},{"location":"audiosystem/Files/mqtt_8py/#namespaces","text":"Name mqtt MQTT Client functions.","title":"Namespaces"},{"location":"audiosystem/Files/mqtt_8py/#classes","text":"Name class mqtt::MqttConnector Mqtt Connector class.","title":"Classes"},{"location":"audiosystem/Files/mqtt_8py/#source-code","text":"\"\"\"! @brief MQTT Client functions\"\"\" import os import json import ssl import logging from paho.mqtt import client as mqtt_client from message_handlers import handle_message class MqttConnector : \"\"\"! Mqtt Connector class \"\"\" broker = os . getenv ( \"MQTT_BROKER\" ) port = os . getenv ( \"MQTT_PORT\" ) client_id = 'audioplayer' username = os . getenv ( \"MQTT_USERNAME\" ) password = os . getenv ( \"MQTT_PASSWORD\" ) client = None connected = False def init ( self ): \"\"\"! Initialise the module \"\"\" logging . info ( \"Connecting to MQTT\" ) self . connect_mqtt () self . client . loop_start () while not self . connected : pass logging . info ( \"Connected\" ) self . client . subscribe ( \"signalling/audio/play\" ) def connect_mqtt ( self ): \"\"\"! Connect to the MQTT server \"\"\" # Set Connecting Client ID self . client = mqtt_client . Client ( self . client_id ) # Set the connection parameters self . client . username_pw_set ( self . username , self . password ) self . client . tls_set ( cert_reqs = ssl . CERT_NONE ) self . client . tls_insecure_set ( True ) # Set the callbacks self . client . on_connect = self . on_connect self . client . on_message = self . on_message # Actually connect self . client . connect ( self . broker , int ( self . port )) def on_connect ( self , client , userdata , flags , response_code ): # pylint:disable=unused-argument \"\"\"! Callback on client connect @param client The client object @param userdata Data on the user @param flags Flags! @param response_code Response code from the server @return None \"\"\" if response_code == 0 : logging . debug ( \"Connected to MQTT broker!\" ) self . connected = True else : logging . debug ( \"Failed to connect, return code %s \" , response_code ) def on_message ( self , client , userdata , message ): # pylint:disable=unused-argument \"\"\"! Callback on message received @param client The client object @param userdata Data on the user @param message Object representing the message that has been received @return None \"\"\" outermessage = json . loads ( message . payload . decode ( \"utf-8\" )) try : payload = outermessage [ 'payload' ] except KeyError : # Invalid message logging . debug ( \"Invalid message: %s \" , message . payload ) return handle_message ( message . topic [ 17 :], payload ) def send_message ( self , topic , payload ): \"\"\"! Helper function to send a message @param topic The topic to which to send a message @param payload The payload to send in the message @return None \"\"\" self . client . publish ( topic , self . prep_payload ( payload )) def prep_payload ( self , data ): \"\"\"! Helper function to prepare the wrapper for the message @param data The data to wrap within the envelope @return The wrapped message \"\"\" payload = { \"username\" : \"system\" , \"source\" : \"audioplayer\" , \"payload\" : data } return json . dumps ( payload ) mqtt = MqttConnector () Updated on 2022-11-28 at 15:55:23 +0000","title":"Source code"},{"location":"audiosystem/Modules/index_groups/","text":"Modules \u00b6 Updated on 2022-11-28 at 15:55:23 +0000","title":"Modules"},{"location":"audiosystem/Modules/index_groups/#modules","text":"Updated on 2022-11-28 at 15:55:23 +0000","title":"Modules"},{"location":"audiosystem/Namespaces/","text":"Namespaces \u00b6 namespace audio namespace main namespace message_handlers namespace mqtt MQTT Client functions. Updated on 2022-11-28 at 15:55:23 +0000","title":"Namespaces"},{"location":"audiosystem/Namespaces/#namespaces","text":"namespace audio namespace main namespace message_handlers namespace mqtt MQTT Client functions. Updated on 2022-11-28 at 15:55:23 +0000","title":"Namespaces"},{"location":"audiosystem/Namespaces/namespaceaudio/","text":"audio \u00b6 More... Classes \u00b6 Name class audio::AudioHandler Audio handler class. Attributes \u00b6 Name audio Detailed Description \u00b6 Functions handling audio Attributes Documentation \u00b6 variable audio \u00b6 audio = AudioHandler (); Updated on 2022-11-28 at 15:55:23 +0000","title":"audio"},{"location":"audiosystem/Namespaces/namespaceaudio/#audio","text":"More...","title":"audio"},{"location":"audiosystem/Namespaces/namespaceaudio/#classes","text":"Name class audio::AudioHandler Audio handler class.","title":"Classes"},{"location":"audiosystem/Namespaces/namespaceaudio/#attributes","text":"Name audio","title":"Attributes"},{"location":"audiosystem/Namespaces/namespaceaudio/#detailed-description","text":"Functions handling audio","title":"Detailed Description"},{"location":"audiosystem/Namespaces/namespaceaudio/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"audiosystem/Namespaces/namespaceaudio/#variable-audio","text":"audio = AudioHandler (); Updated on 2022-11-28 at 15:55:23 +0000","title":"variable audio"},{"location":"audiosystem/Namespaces/namespacemain/","text":"main \u00b6 Functions \u00b6 Name def main () Main entry point. Attributes \u00b6 Name level Functions Documentation \u00b6 function main \u00b6 def main () Main entry point. Attributes Documentation \u00b6 variable level \u00b6 level ; Updated on 2022-11-28 at 15:55:23 +0000","title":"main"},{"location":"audiosystem/Namespaces/namespacemain/#main","text":"","title":"main"},{"location":"audiosystem/Namespaces/namespacemain/#functions","text":"Name def main () Main entry point.","title":"Functions"},{"location":"audiosystem/Namespaces/namespacemain/#attributes","text":"Name level","title":"Attributes"},{"location":"audiosystem/Namespaces/namespacemain/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"audiosystem/Namespaces/namespacemain/#function-main","text":"def main () Main entry point.","title":"function main"},{"location":"audiosystem/Namespaces/namespacemain/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"audiosystem/Namespaces/namespacemain/#variable-level","text":"level ; Updated on 2022-11-28 at 15:55:23 +0000","title":"variable level"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/","text":"message_handlers \u00b6 More... Functions \u00b6 Name def handle_message (topic topic, payload payload) Main entry point to the module. def play_audio (payload payload) Handle the queueing up of audio. def handle_config (payload payload) Handle the changing of config. Detailed Description \u00b6 Handlers for various messages Functions Documentation \u00b6 function handle_message \u00b6 def handle_message ( topic topic , payload payload ) Main entry point to the module. function play_audio \u00b6 def play_audio ( payload payload ) Handle the queueing up of audio. function handle_config \u00b6 def handle_config ( payload payload ) Handle the changing of config. Updated on 2022-11-28 at 15:55:23 +0000","title":"message_handlers"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#message_handlers","text":"More...","title":"message_handlers"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#functions","text":"Name def handle_message (topic topic, payload payload) Main entry point to the module. def play_audio (payload payload) Handle the queueing up of audio. def handle_config (payload payload) Handle the changing of config.","title":"Functions"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#detailed-description","text":"Handlers for various messages","title":"Detailed Description"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#function-handle_message","text":"def handle_message ( topic topic , payload payload ) Main entry point to the module.","title":"function handle_message"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#function-play_audio","text":"def play_audio ( payload payload ) Handle the queueing up of audio.","title":"function play_audio"},{"location":"audiosystem/Namespaces/namespacemessage__handlers/#function-handle_config","text":"def handle_config ( payload payload ) Handle the changing of config. Updated on 2022-11-28 at 15:55:23 +0000","title":"function handle_config"},{"location":"audiosystem/Namespaces/namespacemqtt/","text":"mqtt \u00b6 MQTT Client functions. Classes \u00b6 Name class mqtt::MqttConnector Mqtt Connector class. Attributes \u00b6 Name mqtt Attributes Documentation \u00b6 variable mqtt \u00b6 mqtt = MqttConnector (); Updated on 2022-11-28 at 15:55:23 +0000","title":"mqtt"},{"location":"audiosystem/Namespaces/namespacemqtt/#mqtt","text":"MQTT Client functions.","title":"mqtt"},{"location":"audiosystem/Namespaces/namespacemqtt/#classes","text":"Name class mqtt::MqttConnector Mqtt Connector class.","title":"Classes"},{"location":"audiosystem/Namespaces/namespacemqtt/#attributes","text":"Name mqtt","title":"Attributes"},{"location":"audiosystem/Namespaces/namespacemqtt/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"audiosystem/Namespaces/namespacemqtt/#variable-mqtt","text":"mqtt = MqttConnector (); Updated on 2022-11-28 at 15:55:23 +0000","title":"variable mqtt"},{"location":"audiosystem/Pages/","text":"Pages \u00b6 page Signalling System Audio System page Signalling Audio Updated on 2022-11-28 at 15:55:23 +0000","title":"Pages"},{"location":"audiosystem/Pages/#pages","text":"page Signalling System Audio System page Signalling Audio Updated on 2022-11-28 at 15:55:23 +0000","title":"Pages"},{"location":"audiosystem/Pages/md__github_signalling-audio_README/","text":"Signalling Audio \u00b6 This repo contains the audio software used by EHMRS for their signalling system. The software runs and listens to MQTT messages, playing audio as appropriate when requested to. Updated on 2022-11-28 at 15:55:23 +0000","title":"Signalling Audio"},{"location":"audiosystem/Pages/md__github_signalling-audio_README/#signalling-audio","text":"This repo contains the audio software used by EHMRS for their signalling system. The software runs and listens to MQTT messages, playing audio as appropriate when requested to. Updated on 2022-11-28 at 15:55:23 +0000","title":"Signalling Audio"},{"location":"devices/","text":"Devices \u00b6 We have a number of physical devices that exist in the field (although not all of them are in the actual field, we include devices that are in the signal box) Broadly speaking, we have the following devices: Buttons Frame Levers Points Relays Track Sections Sensors Signals","title":"Devices"},{"location":"devices/#devices","text":"We have a number of physical devices that exist in the field (although not all of them are in the actual field, we include devices that are in the signal box) Broadly speaking, we have the following devices: Buttons Frame Levers Points Relays Track Sections Sensors Signals","title":"Devices"},{"location":"devices/buttons/","text":"Buttons \u00b6 We use custom made button boxes to request routes from start points. Generally, these are at either end of our platforms, and at sidings just before they join the main line. Each button consists of a LED Halo'd button, which allows us to both detect an input (push the button), and also display to the user that the request has been recognised (lighting the halo). We also use the halo to indicate a fault state by flashing it if the request cannot be met.","title":"Buttons"},{"location":"devices/buttons/#buttons","text":"We use custom made button boxes to request routes from start points. Generally, these are at either end of our platforms, and at sidings just before they join the main line. Each button consists of a LED Halo'd button, which allows us to both detect an input (push the button), and also display to the user that the request has been recognised (lighting the halo). We also use the halo to indicate a fault state by flashing it if the request cannot be met.","title":"Buttons"},{"location":"devices/levers/","text":"Frame levers \u00b6 We have in our signal box a 23-lever London Underground frame that came out of service from Hyde Park Corner. Although the mechanical interlocking has been removed, we retain the electromechanical locking by the use of solenoids on each of the bars. This allows the system to lock levers in a manner similar to that which mechanical interlocking would provide. Each lever has two inputs and a single output. The inputs read when the levers are all the way in the frame (normal), and when they are all the way out of the frame (reverse). The use of two inputs means that the system can detect when a lever is not fully either out of or in the frame. The output is used to lock the lever in the event that it should not be pulled (for example to protect pointwork).","title":"Frame levers"},{"location":"devices/levers/#frame-levers","text":"We have in our signal box a 23-lever London Underground frame that came out of service from Hyde Park Corner. Although the mechanical interlocking has been removed, we retain the electromechanical locking by the use of solenoids on each of the bars. This allows the system to lock levers in a manner similar to that which mechanical interlocking would provide. Each lever has two inputs and a single output. The inputs read when the levers are all the way in the frame (normal), and when they are all the way out of the frame (reverse). The use of two inputs means that the system can detect when a lever is not fully either out of or in the frame. The output is used to lock the lever in the event that it should not be pulled (for example to protect pointwork).","title":"Frame levers"},{"location":"devices/points/","text":"Points \u00b6 The majority our pointwork has motors to allow the system to change a point using compressed air to actuate the point changes. There are then a pair of microswitches within the housing that allows the system to read the position of a point. The use of two switches allows us to detect both a normal position, a reverse position, and a situation where the point is not fully in either state. The one point that we have that is not actuated by the system still contains the microswitch assembly to allow the system to detect the state of the point. This is required, as the point is on the main line.","title":"Points"},{"location":"devices/points/#points","text":"The majority our pointwork has motors to allow the system to change a point using compressed air to actuate the point changes. There are then a pair of microswitches within the housing that allows the system to read the position of a point. The use of two switches allows us to detect both a normal position, a reverse position, and a situation where the point is not fully in either state. The one point that we have that is not actuated by the system still contains the microswitch assembly to allow the system to detect the state of the point. This is required, as the point is on the main line.","title":"Points"},{"location":"devices/relays/","text":"Relays \u00b6 The relays with which the system interacts can be broadly split into two catagories: Input relays Output relays The input relays allow the system to detect the state of something, i.e. the system is detecting across the contacts The output relays allow the system to output a state to a device, i.e. the system is wired across the coil. Relays generally are used for safety-related items. We currently have the following relays: Emergency Stop (e-stop) \u00b6 This relay is wired through all the e-stop buttons on-site, as well as the software e-stop relay (to allow the system to trigger an emergency stop). Software e-stop \u00b6 This output relay allows the system to trigger an emergency stop by breaking the e-stop chain. e-stop reset \u00b6 This output relay allows the system to reset the e-stop relay to a closed state. Power on \u00b6 This relay triggers the power-on procedure, which includes building the reservoir in the compressor, and turning on power to auxiliary systems. Power off \u00b6 Similar to the power on relay, but for the power-off procedure. This includes triggering a dump of the compressor's reservoir. Auxiliary contactor \u00b6 This allows the system to detect whether the auxiliary system contactor is closed, and therefore whether the power-on or power-off procedure is complete. AC contactor \u00b6 This allows the system to detect a mains power feed AC loss. Although the system runs on UPS for a number of hours, this contactor allows the system to alert engineers to an AC loss, allowing them to restore mains power before the system has to enter a shutdown state.","title":"Relays"},{"location":"devices/relays/#relays","text":"The relays with which the system interacts can be broadly split into two catagories: Input relays Output relays The input relays allow the system to detect the state of something, i.e. the system is detecting across the contacts The output relays allow the system to output a state to a device, i.e. the system is wired across the coil. Relays generally are used for safety-related items. We currently have the following relays:","title":"Relays"},{"location":"devices/relays/#emergency-stop-e-stop","text":"This relay is wired through all the e-stop buttons on-site, as well as the software e-stop relay (to allow the system to trigger an emergency stop).","title":"Emergency Stop (e-stop)"},{"location":"devices/relays/#software-e-stop","text":"This output relay allows the system to trigger an emergency stop by breaking the e-stop chain.","title":"Software e-stop"},{"location":"devices/relays/#e-stop-reset","text":"This output relay allows the system to reset the e-stop relay to a closed state.","title":"e-stop reset"},{"location":"devices/relays/#power-on","text":"This relay triggers the power-on procedure, which includes building the reservoir in the compressor, and turning on power to auxiliary systems.","title":"Power on"},{"location":"devices/relays/#power-off","text":"Similar to the power on relay, but for the power-off procedure. This includes triggering a dump of the compressor's reservoir.","title":"Power off"},{"location":"devices/relays/#auxiliary-contactor","text":"This allows the system to detect whether the auxiliary system contactor is closed, and therefore whether the power-on or power-off procedure is complete.","title":"Auxiliary contactor"},{"location":"devices/relays/#ac-contactor","text":"This allows the system to detect a mains power feed AC loss. Although the system runs on UPS for a number of hours, this contactor allows the system to alert engineers to an AC loss, allowing them to restore mains power before the system has to enter a shutdown state.","title":"AC contactor"},{"location":"devices/sections/","text":"Track sections \u00b6 Each track section on the main line uses 24/48v to detect the presence of a train. This is done by feeding the voltage into one of the rails (via a large resistor) , with the other rail connected to ground. By detecting the voltage on the \"live\" rail, one can detect the presence of a train by whether the voltage drops to near-zero. When the voltage drops it is indicative of a train in the section as the voltage travels through the wheels, across the axle, and to ground via the other rail. For points, we detect by energising the entire point to 24/48v and then detecting the loss of that voltage to the neighbouring section's ground rail.","title":"Track sections"},{"location":"devices/sections/#track-sections","text":"Each track section on the main line uses 24/48v to detect the presence of a train. This is done by feeding the voltage into one of the rails (via a large resistor) , with the other rail connected to ground. By detecting the voltage on the \"live\" rail, one can detect the presence of a train by whether the voltage drops to near-zero. When the voltage drops it is indicative of a train in the section as the voltage travels through the wheels, across the axle, and to ground via the other rail. For points, we detect by energising the entire point to 24/48v and then detecting the loss of that voltage to the neighbouring section's ground rail.","title":"Track sections"},{"location":"devices/sensors/","text":"Sensors \u00b6 We use a number of sensors to provide safety features. Tunnel sensors \u00b6 We have a sensor on each of the tunnel entrances. This allows the system to detect if the tunnel shutter is open fully. If it detects that a tunnel shutter is not fully open, then it will drop the previous signal to danger, and display an error. Level crossing sensors \u00b6 The level crossing has pairs of light beam sensors. The beams are shot across the space where the gate opens at a height that as soon as the gate is not closed the beam is broken. This allows the system to detect if the crossing is not closed. In the event that the crossing is detected as open the system will not clear a signal that routes a train via the crossing.","title":"Sensors"},{"location":"devices/sensors/#sensors","text":"We use a number of sensors to provide safety features.","title":"Sensors"},{"location":"devices/sensors/#tunnel-sensors","text":"We have a sensor on each of the tunnel entrances. This allows the system to detect if the tunnel shutter is open fully. If it detects that a tunnel shutter is not fully open, then it will drop the previous signal to danger, and display an error.","title":"Tunnel sensors"},{"location":"devices/sensors/#level-crossing-sensors","text":"The level crossing has pairs of light beam sensors. The beams are shot across the space where the gate opens at a height that as soon as the gate is not closed the beam is broken. This allows the system to detect if the crossing is not closed. In the event that the crossing is detected as open the system will not clear a signal that routes a train via the crossing.","title":"Level crossing sensors"},{"location":"devices/signals/","text":"Signals \u00b6 Broadly speaking, we have four different signal types: Three aspect \u00b6 These make up the majority of our signals. On the main line, all the signals are three aspect. Some signals have route indicators (or feathers) to indicate the route that is set. Some of our main line signals include shunt aspects when appropriate. Two aspect (red/green) \u00b6 We have two two aspect signals with a red and green aspect, both in the center of our main platform. Two aspect (red/white) \u00b6 At each of our sidings there is a two aspect shunt signal. Information indicators \u00b6 Although not strictly signals, we have a number of information indicators that we use, including an OFF indicator in the middle of the platform.","title":"Signals"},{"location":"devices/signals/#signals","text":"Broadly speaking, we have four different signal types:","title":"Signals"},{"location":"devices/signals/#three-aspect","text":"These make up the majority of our signals. On the main line, all the signals are three aspect. Some signals have route indicators (or feathers) to indicate the route that is set. Some of our main line signals include shunt aspects when appropriate.","title":"Three aspect"},{"location":"devices/signals/#two-aspect-redgreen","text":"We have two two aspect signals with a red and green aspect, both in the center of our main platform.","title":"Two aspect (red/green)"},{"location":"devices/signals/#two-aspect-redwhite","text":"At each of our sidings there is a two aspect shunt signal.","title":"Two aspect (red/white)"},{"location":"devices/signals/#information-indicators","text":"Although not strictly signals, we have a number of information indicators that we use, including an OFF indicator in the middle of the platform.","title":"Information indicators"},{"location":"mainsystem/Classes/","text":"Classes \u00b6 Updated on 2022-11-28 at 15:55:22 +0000","title":"Classes"},{"location":"mainsystem/Classes/#classes","text":"Updated on 2022-11-28 at 15:55:22 +0000","title":"Classes"},{"location":"mainsystem/Examples/index_examples/","text":"Examples \u00b6 Updated on 2022-11-28 at 15:55:22 +0000","title":"Examples"},{"location":"mainsystem/Examples/index_examples/#examples","text":"Updated on 2022-11-28 at 15:55:22 +0000","title":"Examples"},{"location":"mainsystem/Files/AIEastBound_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/AI/AIEastBound.vb \u00b6 Source code \u00b6 Module AIEastBound Public Sub logic () AISectionA () AISectionB () AISectionC () AISectionD () AISectionE () AISectionF () AISectionG () AISectionH () AISectionI () AISectionJ () AISectionK () AISectionL () AISectionM () AISectionN () AISectionO () AISectionP () AISectionQ () AISectionA11 () AISectionC19 () AISectionDE () AISectionF12 () AISectionF13 () AISectionNO () AISectionNO14 () AISectionOP () AISectionQ10 () End Sub Public Sub AISectionA () ' Start SectionA code as train arrives in section If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = False Then AITimerSectionA = AIShortSectionValue AISectionAInUse = True End If ' Code to move into next section once conditions are met If AISectionAInUse = True Then If AISectionAOccupie = True And AITimerSectionA <= AIBetweenSections Then AISectionBOccupie = True AITimerSectionA = AITimerSectionA - 1 If Not Points . PointReturns ( PointNames . P6b ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 6b\" ) Else AITimerSectionA = AITimerSectionA - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = True Then AISectionAOccupie = False AISectionAInUse = False End If End Sub Public Sub AISectionB () ' Start SectionB code as train arrives in section If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = False Then AITimerSectionB = AIMediumSectionValue AISectionBInUse = True End If ' Code to move into next section once conditions are met If AISectionBInUse = True Then If AISectionBOccupie = True And AITimerSectionB <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionB = 0 End If Else AITimerSectionB = AITimerSectionB - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = True Then AISectionBOccupie = False AISectionBInUse = False End If End Sub Public Sub AISectionC () ' Start SectionC code as train arrives in section If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = False Then AITimerSectionC = AILongSectionValue AISectionCInUse = True End If ' Code to move into next section once conditions are met If AISectionCInUse = True Then If AISectionCOccupie = True And AITimerSectionC <= AIBetweenSections Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then If Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger Then AISectionDOccupie = True AITimerSectionC = 0 End If ElseIf Points . PointReturns ( PointNames . P19 ) = PointInReverse Then AISectionC19Occupie = True AITimerSectionC = AITimerSectionC - 1 Else MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionC = AITimerSectionC - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = True Then AISectionCOccupie = False AISectionCInUse = False End If End Sub Public Sub AISectionD () ' Start SectionD code as train arrives in section If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = False Then AITimerSectionD = AILongSectionValue AISectionDInUse = True End If ' Code to move into next section once conditions are met If AISectionDInUse = True Then If AISectionDOccupie = True And AITimerSectionD <= AIBetweenSections Then AISectionDEOccupie = True AITimerSectionD = AITimerSectionD - 1 Else AITimerSectionD = AITimerSectionD - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = True Then AISectionDOccupie = False AISectionDInUse = False End If End Sub Public Sub AISectionE () ' Start SectionE code as train arrives in section If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = False Then AITimerSectionE = AIMediumSectionValue AISectionEInUse = True End If ' Code to move into next section once conditions are met If AISectionEInUse = True Then If AISectionEOccupie = True And AITimerSectionE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P13 ) = PointInNormal Then AISectionFOccupie = True AITimerSectionE = 0 ElseIf Points . PointReturns ( PointNames . P13 ) = PointInReverse Then AISectionF13Occupie = True AITimerSectionE = 0 Else MsgBox ( \"AI Train in section E derailed on point 13\" ) End If End If Else AITimerSectionE = AITimerSectionE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = True Then AISectionEOccupie = False AISectionEInUse = False End If End Sub Public Sub AISectionF () ' Start SectionF code as train arrives in section If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = False Then AITimerSectionF = AIShortSectionValue AISectionFInUse = True End If ' Code to move into next section once conditions are met If AISectionFInUse = True Then If AISectionFOccupie = True And AITimerSectionF <= AIBetweenSections Then AISectionGOccupie = True If Not Points . PointReturns ( PointNames . P12 ) = PointInNormal Then MsgBox ( \"AI Train in section F derailed on point 12\" ) End If AITimerSectionF = AITimerSectionF - 1 End If ' Code to clear section once section timer reaches 0 If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = True Then AISectionFOccupie = False AISectionFInUse = False End If End Sub Public Sub AISectionG () ' Start SectionG code as train arrives in section If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = False Then AITimerSectionG = AIShortSectionValue AISectionGInUse = True End If ' Code to move into next section once conditions are met If AISectionGInUse = True Then If AISectionGOccupie = True And AITimerSectionG <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger Then AISectionHOccupie = True AITimerSectionG = 0 End If Else AITimerSectionG = AITimerSectionG - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = True Then AISectionGOccupie = False AISectionGInUse = False End If End Sub Public Sub AISectionH () ' Start SectionH code as train arrives in section If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = False Then AITimerSectionH = AIShortSectionValue AISectionHInUse = True End If ' Code to move into next section once conditions are met If AISectionHInUse = True Then If AISectionHOccupie = True And AITimerSectionH <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInNormal Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then AISectionAOccupie = True AITimerSectionH = 0 ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then AISectionKOccupie = True AITimerSectionH = 0 Else MsgBox ( \"AI Train in section H derailed on point 5a\" ) End If ElseIf Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionA11Occupie = True AITimerSectionH = 0 Else MsgBox ( \"AI Train in section H derailed on point 11\" ) End If End If Else AITimerSectionH = AITimerSectionH - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = True Then AISectionHOccupie = False AISectionHInUse = False End If End Sub Public Sub AISectionI () ' Start SectionI code as train arrives in section If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = False Then AITimerSectionI = AIMediumSectionValue AISectionIInUse = True End If ' Code to move into next section once conditions are met If AISectionIInUse = True Then If AISectionIOccupie = True And AITimerSectionI <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then AISectionQ10Occupie = True AITimerSectionI = 0 If Not Points . PointReturns ( PointNames . P10 ) = PointInReverse Then MsgBox ( \"AI Train in section Q10 derailed on point 10\" ) End If Else AITimerSectionI = AITimerSectionI - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = True Then AISectionIOccupie = False AISectionIInUse = False End If End Sub Public Sub AISectionJ () ' Start SectionJ code as train arrives in section If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = False Then AITimerSectionJ = AIShortSectionValue AISectionJInUse = True End If ' Code to move into next section once conditions are met If AISectionJInUse = True Then If AISectionJOccupie = True And AITimerSectionJ <= AIBetweenSections Then AISectionBOccupie = True AITimerSectionJ = AITimerSectionJ - 1 If Not Points . PointReturns ( PointNames . P6b ) = PointInReverse Then MsgBox ( \"AI Train in section J derailed on point 6b\" ) Else AITimerSectionJ = AITimerSectionJ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = True Then AISectionJOccupie = False AISectionJInUse = False End If End Sub Public Sub AISectionK () ' Start SectionK code as train arrives in section If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = False Then AITimerSectionK = AIShortSectionValue AISectionKInUse = True End If ' Code to move into next section once conditions are met If AISectionKInUse = True Then If AISectionKOccupie = True And AITimerSectionK <= AIBetweenSections Then AISectionMOccupie = True AITimerSectionK = AITimerSectionK - 1 ' If Not Points . PointReturns ( Point5a ) = PointInReverse Then MsgBox ( \"AI Train in section K derailed on point 5b\" ) Else AITimerSectionK = AITimerSectionK - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = True Then AISectionKOccupie = False AISectionKInUse = False End If End Sub Public Sub AISectionL () ' Start SectionL code as train arrives in section If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = False Then AITimerSectionL = AIShortSectionValue AISectionLInUse = True End If ' Code to move into next section once conditions are met If AISectionLInUse = True Then If AISectionLOccupie = True And AITimerSectionL <= AIBetweenSections Then AISectionMOccupie = True AITimerSectionL = AITimerSectionL - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInNormal Then MsgBox ( \"AI Train in section L derailed on point 6b\" ) Else AITimerSectionL = AITimerSectionL - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = True Then AISectionLOccupie = False AISectionLInUse = False End If End Sub Public Sub AISectionM () ' Start SectionM code as train arrives in section If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = False Then AITimerSectionM = AIShortSectionValue AISectionMInUse = True End If ' Code to move into next section once conditions are met If AISectionMInUse = True Then If AISectionMOccupie = True And AITimerSectionM <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger Then AISectionNOccupie = True AITimerSectionM = 0 End If Else AITimerSectionM = AITimerSectionM - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = True Then AISectionMOccupie = False AISectionMInUse = False End If End Sub Public Sub AISectionN () ' Start SectionN code as train arrives in section If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = False Then AITimerSectionN = AIShortSectionValue AISectionNInUse = True End If ' Code to move into next section once conditions are met If AISectionNInUse = True Then If AISectionNOccupie = True And AITimerSectionN <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then AISectionNOOccupie = True AITimerSectionN = 0 ElseIf Points . PointReturns ( PointNames . P14 ) = PointInReverse Then AISectionNO14Occupie = True AITimerSectionN = AITimerSectionN - 1 Else MsgBox ( \"AI Train in section N derailed on point 14\" ) End If End If Else AITimerSectionN = AITimerSectionN - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = True Then AISectionNOccupie = False AISectionNInUse = False End If End Sub Public Sub AISectionO () ' Start SectionO code as train arrives in section If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = False Then AITimerSectionO = AIShortSectionValue AISectionOInUse = True End If ' Code to move into next section once conditions are met If AISectionOInUse = True Then If AISectionOOccupie = True And AITimerSectionO <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then AISectionOPOccupie = True AITimerSectionO = 0 End If Else AITimerSectionO = AITimerSectionO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = True Then AISectionOOccupie = False AISectionOInUse = False End If End Sub Public Sub AISectionP () ' Start SectionP code as train arrives in section If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = False Then AITimerSectionP = AIShortSectionValue AISectionPInUse = True End If ' Code to move into next section once conditions are met If AISectionPInUse = True Then If AISectionPOccupie = True And AITimerSectionP <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger Then AISectionQOccupie = True AITimerSectionP = 0 If Not Points . PointReturns ( PointNames . P10 ) = PointInNormal Then MsgBox ( \"AI Train in section Q derailed on point 10\" ) End If Else AITimerSectionP = AITimerSectionP - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = True Then AISectionPOccupie = False AISectionPInUse = False End If End Sub Public Sub AISectionQ () ' Start SectionQ code as train arrives in section If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = False Then AITimerSectionQ = AIShortSectionValue AISectionQInUse = True End If ' Code to move into next section once conditions are met If AISectionQInUse = True Then If AISectionQOccupie = True And AITimerSectionQ <= AIBetweenSections Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal Then AISectionLOccupie = True AITimerSectionQ = AITimerSectionQ - 1 ElseIf Points . PointReturns ( PointNames . P6a ) = PointInReverse Then AISectionJOccupie = True AITimerSectionQ = AITimerSectionQ - 1 Else MsgBox ( \"AI Train in section Q derailed on point 6a\" ) End If Else AITimerSectionQ = AITimerSectionQ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = True Then AISectionQOccupie = False AISectionQInUse = False End If End Sub Public Sub AISectionA11 () ' Start SectionA11 code as train arrives in section If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = False Then AITimerSectionA11 = AIShortSectionValue AISectionA11InUse = True End If ' Code to move into next section once conditions are met If AISectionA11InUse = True Then If AISectionA11Occupie = True And AITimerSectionA11 <= AIBetweenSections Then AITimerSectionA11 = AITimerSectionA11 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = True Then AISectionA11Occupie = False AISectionA11InUse = False End If End Sub Public Sub AISectionC19 () ' Start SectionC19 code as train arrives in section If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = False Then AITimerSectionC19 = AIShortSectionValue AISectionC19InUse = True End If ' Code to move into next section once conditions are met If AISectionC19InUse = True Then If AISectionC19Occupie = True And AITimerSectionC19 <= AIBetweenSections Then AITimerSectionC19 = AITimerSectionC19 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = True Then AISectionC19Occupie = False AISectionC19InUse = False End If End Sub Public Sub AISectionDE () ' Start SectionDE code as train arrives in section If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = False Then AITimerSectionDE = AIShortSectionValue AISectionDEInUse = True End If ' Code to move into next section once conditions are met If AISectionDEInUse = True Then If AISectionDEOccupie = True And AITimerSectionDE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then AISectionEOccupie = True AITimerSectionDE = 0 End If Else AITimerSectionDE = AITimerSectionDE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = True Then AISectionDEOccupie = False AISectionDEInUse = False End If End Sub Public Sub AISectionF12 () ' Start SectionF12 code as train arrives in section If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = False Then AITimerSectionF12 = AIShortSectionValue AISectionF12InUse = True End If ' Code to move into next section once conditions are met If AISectionF12InUse = True Then If AISectionF12Occupie = True And AITimerSectionF12 <= AIBetweenSections Then AISectionGOccupie = True If Not Points . PointReturns ( PointNames . P12 ) = PointInReverse Then MsgBox ( \"AI Train in section F12 derailed on point 12\" ) End If AITimerSectionF12 = AITimerSectionF12 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = True Then AISectionF12Occupie = False AISectionF12InUse = False End If End Sub Public Sub AISectionF13 () ' Start SectionF13 code as train arrives in section If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = False Then AITimerSectionF13 = AIShortSectionValue AISectionF13InUse = True End If ' Code to move into next section once conditions are met If AISectionF13InUse = True Then If AISectionF13Occupie = True And AITimerSectionF13 <= AIBetweenSections Then AISectionIOccupie = True Else AITimerSectionF13 = AITimerSectionF13 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = True Then AISectionF13Occupie = False AISectionF13InUse = False End If End Sub Public Sub AISectionNO () ' Start SectionNO code as train arrives in section If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = False Then AITimerSectionNO = AIShortSectionValue AISectionNOInUse = True End If ' Code to move into next section once conditions are met If AISectionNOInUse = True Then If AISectionNOOccupie = True And AITimerSectionNO <= AIBetweenSections Then AISectionOOccupie = True End If AITimerSectionNO = AITimerSectionNO - 1 End If ' Code to clear section once section timer reaches 0 If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = True Then AISectionNOOccupie = False AISectionNOInUse = False End If End Sub Public Sub AISectionNO14 () ' Start SectionNO14 code as train arrives in section If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = False Then AITimerSectionNO14 = AIShortSectionValue AISectionNO14InUse = True End If ' Code to move into next section once conditions are met If AISectionNO14InUse = True Then AITimerSectionNO14 = AITimerSectionNO14 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = True Then AISectionNO14Occupie = False AISectionNO14InUse = False End If End Sub Public Sub AISectionOP () ' Start SectionOP code as train arrives in section If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = False Then AITimerSectionOP = AIShortSectionValue AISectionOPInUse = True End If ' Code to move into next section once conditions are met If AISectionOPInUse = True Then If AISectionOPOccupie = True And AITimerSectionOP <= AIBetweenSections Then AISectionPOccupie = True End If AITimerSectionOP = AITimerSectionOP - 1 End If ' Code to clear section once section timer reaches 0 If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = True Then AISectionOPOccupie = False AISectionOPInUse = False End If End Sub Public Sub AISectionQ10 () ' Start SectionQ10 code as train arrives in section If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = False Then AITimerSectionQ10 = AIShortSectionValue AISectionQ10InUse = True End If ' Code to move into next section once conditions are met If AISectionQ10InUse = True Then If AISectionQ10Occupie = True And AITimerSectionQ10 <= AIBetweenSections Then AISectionQOccupie = True If Not Points . PointReturns ( PointNames . P10 ) = PointInReverse Then MsgBox ( \"AI Train in section Q10 derailed on point 10\" ) End If AITimerSectionQ10 = AITimerSectionQ10 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = True Then AISectionQ10Occupie = False AISectionQ10InUse = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIEastBound.vb"},{"location":"mainsystem/Files/AIEastBound_8vb/#githubsignallingsystemehmr-signalling-systemaiaieastboundvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIEastBound.vb"},{"location":"mainsystem/Files/AIEastBound_8vb/#source-code","text":"Module AIEastBound Public Sub logic () AISectionA () AISectionB () AISectionC () AISectionD () AISectionE () AISectionF () AISectionG () AISectionH () AISectionI () AISectionJ () AISectionK () AISectionL () AISectionM () AISectionN () AISectionO () AISectionP () AISectionQ () AISectionA11 () AISectionC19 () AISectionDE () AISectionF12 () AISectionF13 () AISectionNO () AISectionNO14 () AISectionOP () AISectionQ10 () End Sub Public Sub AISectionA () ' Start SectionA code as train arrives in section If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = False Then AITimerSectionA = AIShortSectionValue AISectionAInUse = True End If ' Code to move into next section once conditions are met If AISectionAInUse = True Then If AISectionAOccupie = True And AITimerSectionA <= AIBetweenSections Then AISectionBOccupie = True AITimerSectionA = AITimerSectionA - 1 If Not Points . PointReturns ( PointNames . P6b ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 6b\" ) Else AITimerSectionA = AITimerSectionA - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = True Then AISectionAOccupie = False AISectionAInUse = False End If End Sub Public Sub AISectionB () ' Start SectionB code as train arrives in section If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = False Then AITimerSectionB = AIMediumSectionValue AISectionBInUse = True End If ' Code to move into next section once conditions are met If AISectionBInUse = True Then If AISectionBOccupie = True And AITimerSectionB <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionB = 0 End If Else AITimerSectionB = AITimerSectionB - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = True Then AISectionBOccupie = False AISectionBInUse = False End If End Sub Public Sub AISectionC () ' Start SectionC code as train arrives in section If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = False Then AITimerSectionC = AILongSectionValue AISectionCInUse = True End If ' Code to move into next section once conditions are met If AISectionCInUse = True Then If AISectionCOccupie = True And AITimerSectionC <= AIBetweenSections Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then If Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger Then AISectionDOccupie = True AITimerSectionC = 0 End If ElseIf Points . PointReturns ( PointNames . P19 ) = PointInReverse Then AISectionC19Occupie = True AITimerSectionC = AITimerSectionC - 1 Else MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionC = AITimerSectionC - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = True Then AISectionCOccupie = False AISectionCInUse = False End If End Sub Public Sub AISectionD () ' Start SectionD code as train arrives in section If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = False Then AITimerSectionD = AILongSectionValue AISectionDInUse = True End If ' Code to move into next section once conditions are met If AISectionDInUse = True Then If AISectionDOccupie = True And AITimerSectionD <= AIBetweenSections Then AISectionDEOccupie = True AITimerSectionD = AITimerSectionD - 1 Else AITimerSectionD = AITimerSectionD - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = True Then AISectionDOccupie = False AISectionDInUse = False End If End Sub Public Sub AISectionE () ' Start SectionE code as train arrives in section If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = False Then AITimerSectionE = AIMediumSectionValue AISectionEInUse = True End If ' Code to move into next section once conditions are met If AISectionEInUse = True Then If AISectionEOccupie = True And AITimerSectionE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P13 ) = PointInNormal Then AISectionFOccupie = True AITimerSectionE = 0 ElseIf Points . PointReturns ( PointNames . P13 ) = PointInReverse Then AISectionF13Occupie = True AITimerSectionE = 0 Else MsgBox ( \"AI Train in section E derailed on point 13\" ) End If End If Else AITimerSectionE = AITimerSectionE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = True Then AISectionEOccupie = False AISectionEInUse = False End If End Sub Public Sub AISectionF () ' Start SectionF code as train arrives in section If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = False Then AITimerSectionF = AIShortSectionValue AISectionFInUse = True End If ' Code to move into next section once conditions are met If AISectionFInUse = True Then If AISectionFOccupie = True And AITimerSectionF <= AIBetweenSections Then AISectionGOccupie = True If Not Points . PointReturns ( PointNames . P12 ) = PointInNormal Then MsgBox ( \"AI Train in section F derailed on point 12\" ) End If AITimerSectionF = AITimerSectionF - 1 End If ' Code to clear section once section timer reaches 0 If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = True Then AISectionFOccupie = False AISectionFInUse = False End If End Sub Public Sub AISectionG () ' Start SectionG code as train arrives in section If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = False Then AITimerSectionG = AIShortSectionValue AISectionGInUse = True End If ' Code to move into next section once conditions are met If AISectionGInUse = True Then If AISectionGOccupie = True And AITimerSectionG <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger Then AISectionHOccupie = True AITimerSectionG = 0 End If Else AITimerSectionG = AITimerSectionG - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = True Then AISectionGOccupie = False AISectionGInUse = False End If End Sub Public Sub AISectionH () ' Start SectionH code as train arrives in section If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = False Then AITimerSectionH = AIShortSectionValue AISectionHInUse = True End If ' Code to move into next section once conditions are met If AISectionHInUse = True Then If AISectionHOccupie = True And AITimerSectionH <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInNormal Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then AISectionAOccupie = True AITimerSectionH = 0 ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then AISectionKOccupie = True AITimerSectionH = 0 Else MsgBox ( \"AI Train in section H derailed on point 5a\" ) End If ElseIf Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionA11Occupie = True AITimerSectionH = 0 Else MsgBox ( \"AI Train in section H derailed on point 11\" ) End If End If Else AITimerSectionH = AITimerSectionH - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = True Then AISectionHOccupie = False AISectionHInUse = False End If End Sub Public Sub AISectionI () ' Start SectionI code as train arrives in section If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = False Then AITimerSectionI = AIMediumSectionValue AISectionIInUse = True End If ' Code to move into next section once conditions are met If AISectionIInUse = True Then If AISectionIOccupie = True And AITimerSectionI <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then AISectionQ10Occupie = True AITimerSectionI = 0 If Not Points . PointReturns ( PointNames . P10 ) = PointInReverse Then MsgBox ( \"AI Train in section Q10 derailed on point 10\" ) End If Else AITimerSectionI = AITimerSectionI - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = True Then AISectionIOccupie = False AISectionIInUse = False End If End Sub Public Sub AISectionJ () ' Start SectionJ code as train arrives in section If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = False Then AITimerSectionJ = AIShortSectionValue AISectionJInUse = True End If ' Code to move into next section once conditions are met If AISectionJInUse = True Then If AISectionJOccupie = True And AITimerSectionJ <= AIBetweenSections Then AISectionBOccupie = True AITimerSectionJ = AITimerSectionJ - 1 If Not Points . PointReturns ( PointNames . P6b ) = PointInReverse Then MsgBox ( \"AI Train in section J derailed on point 6b\" ) Else AITimerSectionJ = AITimerSectionJ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = True Then AISectionJOccupie = False AISectionJInUse = False End If End Sub Public Sub AISectionK () ' Start SectionK code as train arrives in section If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = False Then AITimerSectionK = AIShortSectionValue AISectionKInUse = True End If ' Code to move into next section once conditions are met If AISectionKInUse = True Then If AISectionKOccupie = True And AITimerSectionK <= AIBetweenSections Then AISectionMOccupie = True AITimerSectionK = AITimerSectionK - 1 ' If Not Points . PointReturns ( Point5a ) = PointInReverse Then MsgBox ( \"AI Train in section K derailed on point 5b\" ) Else AITimerSectionK = AITimerSectionK - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = True Then AISectionKOccupie = False AISectionKInUse = False End If End Sub Public Sub AISectionL () ' Start SectionL code as train arrives in section If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = False Then AITimerSectionL = AIShortSectionValue AISectionLInUse = True End If ' Code to move into next section once conditions are met If AISectionLInUse = True Then If AISectionLOccupie = True And AITimerSectionL <= AIBetweenSections Then AISectionMOccupie = True AITimerSectionL = AITimerSectionL - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInNormal Then MsgBox ( \"AI Train in section L derailed on point 6b\" ) Else AITimerSectionL = AITimerSectionL - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = True Then AISectionLOccupie = False AISectionLInUse = False End If End Sub Public Sub AISectionM () ' Start SectionM code as train arrives in section If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = False Then AITimerSectionM = AIShortSectionValue AISectionMInUse = True End If ' Code to move into next section once conditions are met If AISectionMInUse = True Then If AISectionMOccupie = True And AITimerSectionM <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger Then AISectionNOccupie = True AITimerSectionM = 0 End If Else AITimerSectionM = AITimerSectionM - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = True Then AISectionMOccupie = False AISectionMInUse = False End If End Sub Public Sub AISectionN () ' Start SectionN code as train arrives in section If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = False Then AITimerSectionN = AIShortSectionValue AISectionNInUse = True End If ' Code to move into next section once conditions are met If AISectionNInUse = True Then If AISectionNOccupie = True And AITimerSectionN <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then AISectionNOOccupie = True AITimerSectionN = 0 ElseIf Points . PointReturns ( PointNames . P14 ) = PointInReverse Then AISectionNO14Occupie = True AITimerSectionN = AITimerSectionN - 1 Else MsgBox ( \"AI Train in section N derailed on point 14\" ) End If End If Else AITimerSectionN = AITimerSectionN - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = True Then AISectionNOccupie = False AISectionNInUse = False End If End Sub Public Sub AISectionO () ' Start SectionO code as train arrives in section If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = False Then AITimerSectionO = AIShortSectionValue AISectionOInUse = True End If ' Code to move into next section once conditions are met If AISectionOInUse = True Then If AISectionOOccupie = True And AITimerSectionO <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then AISectionOPOccupie = True AITimerSectionO = 0 End If Else AITimerSectionO = AITimerSectionO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = True Then AISectionOOccupie = False AISectionOInUse = False End If End Sub Public Sub AISectionP () ' Start SectionP code as train arrives in section If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = False Then AITimerSectionP = AIShortSectionValue AISectionPInUse = True End If ' Code to move into next section once conditions are met If AISectionPInUse = True Then If AISectionPOccupie = True And AITimerSectionP <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger Then AISectionQOccupie = True AITimerSectionP = 0 If Not Points . PointReturns ( PointNames . P10 ) = PointInNormal Then MsgBox ( \"AI Train in section Q derailed on point 10\" ) End If Else AITimerSectionP = AITimerSectionP - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = True Then AISectionPOccupie = False AISectionPInUse = False End If End Sub Public Sub AISectionQ () ' Start SectionQ code as train arrives in section If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = False Then AITimerSectionQ = AIShortSectionValue AISectionQInUse = True End If ' Code to move into next section once conditions are met If AISectionQInUse = True Then If AISectionQOccupie = True And AITimerSectionQ <= AIBetweenSections Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal Then AISectionLOccupie = True AITimerSectionQ = AITimerSectionQ - 1 ElseIf Points . PointReturns ( PointNames . P6a ) = PointInReverse Then AISectionJOccupie = True AITimerSectionQ = AITimerSectionQ - 1 Else MsgBox ( \"AI Train in section Q derailed on point 6a\" ) End If Else AITimerSectionQ = AITimerSectionQ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = True Then AISectionQOccupie = False AISectionQInUse = False End If End Sub Public Sub AISectionA11 () ' Start SectionA11 code as train arrives in section If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = False Then AITimerSectionA11 = AIShortSectionValue AISectionA11InUse = True End If ' Code to move into next section once conditions are met If AISectionA11InUse = True Then If AISectionA11Occupie = True And AITimerSectionA11 <= AIBetweenSections Then AITimerSectionA11 = AITimerSectionA11 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = True Then AISectionA11Occupie = False AISectionA11InUse = False End If End Sub Public Sub AISectionC19 () ' Start SectionC19 code as train arrives in section If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = False Then AITimerSectionC19 = AIShortSectionValue AISectionC19InUse = True End If ' Code to move into next section once conditions are met If AISectionC19InUse = True Then If AISectionC19Occupie = True And AITimerSectionC19 <= AIBetweenSections Then AITimerSectionC19 = AITimerSectionC19 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = True Then AISectionC19Occupie = False AISectionC19InUse = False End If End Sub Public Sub AISectionDE () ' Start SectionDE code as train arrives in section If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = False Then AITimerSectionDE = AIShortSectionValue AISectionDEInUse = True End If ' Code to move into next section once conditions are met If AISectionDEInUse = True Then If AISectionDEOccupie = True And AITimerSectionDE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then AISectionEOccupie = True AITimerSectionDE = 0 End If Else AITimerSectionDE = AITimerSectionDE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = True Then AISectionDEOccupie = False AISectionDEInUse = False End If End Sub Public Sub AISectionF12 () ' Start SectionF12 code as train arrives in section If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = False Then AITimerSectionF12 = AIShortSectionValue AISectionF12InUse = True End If ' Code to move into next section once conditions are met If AISectionF12InUse = True Then If AISectionF12Occupie = True And AITimerSectionF12 <= AIBetweenSections Then AISectionGOccupie = True If Not Points . PointReturns ( PointNames . P12 ) = PointInReverse Then MsgBox ( \"AI Train in section F12 derailed on point 12\" ) End If AITimerSectionF12 = AITimerSectionF12 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = True Then AISectionF12Occupie = False AISectionF12InUse = False End If End Sub Public Sub AISectionF13 () ' Start SectionF13 code as train arrives in section If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = False Then AITimerSectionF13 = AIShortSectionValue AISectionF13InUse = True End If ' Code to move into next section once conditions are met If AISectionF13InUse = True Then If AISectionF13Occupie = True And AITimerSectionF13 <= AIBetweenSections Then AISectionIOccupie = True Else AITimerSectionF13 = AITimerSectionF13 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = True Then AISectionF13Occupie = False AISectionF13InUse = False End If End Sub Public Sub AISectionNO () ' Start SectionNO code as train arrives in section If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = False Then AITimerSectionNO = AIShortSectionValue AISectionNOInUse = True End If ' Code to move into next section once conditions are met If AISectionNOInUse = True Then If AISectionNOOccupie = True And AITimerSectionNO <= AIBetweenSections Then AISectionOOccupie = True End If AITimerSectionNO = AITimerSectionNO - 1 End If ' Code to clear section once section timer reaches 0 If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = True Then AISectionNOOccupie = False AISectionNOInUse = False End If End Sub Public Sub AISectionNO14 () ' Start SectionNO14 code as train arrives in section If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = False Then AITimerSectionNO14 = AIShortSectionValue AISectionNO14InUse = True End If ' Code to move into next section once conditions are met If AISectionNO14InUse = True Then AITimerSectionNO14 = AITimerSectionNO14 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = True Then AISectionNO14Occupie = False AISectionNO14InUse = False End If End Sub Public Sub AISectionOP () ' Start SectionOP code as train arrives in section If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = False Then AITimerSectionOP = AIShortSectionValue AISectionOPInUse = True End If ' Code to move into next section once conditions are met If AISectionOPInUse = True Then If AISectionOPOccupie = True And AITimerSectionOP <= AIBetweenSections Then AISectionPOccupie = True End If AITimerSectionOP = AITimerSectionOP - 1 End If ' Code to clear section once section timer reaches 0 If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = True Then AISectionOPOccupie = False AISectionOPInUse = False End If End Sub Public Sub AISectionQ10 () ' Start SectionQ10 code as train arrives in section If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = False Then AITimerSectionQ10 = AIShortSectionValue AISectionQ10InUse = True End If ' Code to move into next section once conditions are met If AISectionQ10InUse = True Then If AISectionQ10Occupie = True And AITimerSectionQ10 <= AIBetweenSections Then AISectionQOccupie = True If Not Points . PointReturns ( PointNames . P10 ) = PointInReverse Then MsgBox ( \"AI Train in section Q10 derailed on point 10\" ) End If AITimerSectionQ10 = AITimerSectionQ10 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = True Then AISectionQ10Occupie = False AISectionQ10InUse = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/AIStart_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/AI/AIStart.vb \u00b6 Source code \u00b6 Module AIStart Public AIShortSectionValue As Integer = 8 Public AIMediumSectionValue As Integer = 17 Public AILongSectionValue As Integer = 28 Public AIBetweenSections As Integer = 5 Public AISectionAOccupie As Boolean = False Public AITimerSectionA As Integer = 0 Public AISectionAInUse As Boolean = False Public AISectionBOccupie As Boolean = False Public AITimerSectionB As Integer = 0 Public AISectionBInUse As Boolean = False Public AISectionCOccupie As Boolean = False Public AITimerSectionC As Integer = 0 Public AISectionCInUse As Boolean = False Public AISectionDOccupie As Boolean = False Public AITimerSectionD As Integer = 0 Public AISectionDInUse As Boolean = False Public AISectionEOccupie As Boolean = False Public AITimerSectionE As Integer = 0 Public AISectionEInUse As Boolean = False Public AISectionFOccupie As Boolean = False Public AITimerSectionF As Integer = 0 Public AISectionFInUse As Boolean = False Public AISectionGOccupie As Boolean = False Public AITimerSectionG As Integer = 0 Public AISectionGInUse As Boolean = False Public AISectionHOccupie As Boolean = False Public AITimerSectionH As Integer = 0 Public AISectionHInUse As Boolean = False Public AISectionIOccupie As Boolean = False Public AITimerSectionI As Integer = 0 Public AISectionIInUse As Boolean = False Public AISectionJOccupie As Boolean = False Public AITimerSectionJ As Integer = 0 Public AISectionJInUse As Boolean = False Public AISectionKOccupie As Boolean = False Public AITimerSectionK As Integer = 0 Public AISectionKInUse As Boolean = False Public AISectionLOccupie As Boolean = False Public AITimerSectionL As Integer = 0 Public AISectionLInUse As Boolean = False Public AISectionMOccupie As Boolean = False Public AITimerSectionM As Integer = 0 Public AISectionMInUse As Boolean = False Public AISectionNOccupie As Boolean = False Public AITimerSectionN As Integer = 0 Public AISectionNInUse As Boolean = False Public AISectionOOccupie As Boolean = False Public AITimerSectionO As Integer = 0 Public AISectionOInUse As Boolean = False Public AISectionPOccupie As Boolean = False Public AITimerSectionP As Integer = 0 Public AISectionPInUse As Boolean = False Public AISectionQOccupie As Boolean = False Public AITimerSectionQ As Integer = 0 Public AISectionQInUse As Boolean = False Public AISectionA11Occupie As Boolean = False Public AITimerSectionA11 As Integer = 0 Public AISectionA11InUse As Boolean = False Public AISectionC19Occupie As Boolean = False Public AITimerSectionC19 As Integer = 0 Public AISectionC19InUse As Boolean = False Public AISectionDEOccupie As Boolean = False Public AITimerSectionDE As Integer = 0 Public AISectionDEInUse As Boolean = False Public AISectionF12Occupie As Boolean = False Public AITimerSectionF12 As Integer = 0 Public AISectionF12InUse As Boolean = False Public AISectionF13Occupie As Boolean = False Public AITimerSectionF13 As Integer = 0 Public AISectionF13InUse As Boolean = False Public AISectionNOOccupie As Boolean = False Public AITimerSectionNO As Integer = 0 Public AISectionNOInUse As Boolean = False Public AISectionNO14Occupie As Boolean = False Public AITimerSectionNO14 As Integer = 0 Public AISectionNO14InUse As Boolean = False Public AISectionOPOccupie As Boolean = False Public AITimerSectionOP As Integer = 0 Public AISectionOPInUse As Boolean = False Public AISectionQ10Occupie As Boolean = False Public AITimerSectionQ10 As Integer = 0 Public AISectionQ10InUse As Boolean = False Public AISectionP5aOccupie As Boolean = False Public AITimerSectionP5a As Integer = 0 Public AISectionP5aInUse As Boolean = False Public AISectionP5bOccupie As Boolean = False Public AITimerSectionP5b As Integer = 0 Public AISectionP5bInUse As Boolean = False Public AISectionP6aOccupie As Boolean = False Public AITimerSectionP6a As Integer = 0 Public AISectionP6aInUse As Boolean = False Public AISectionP6bOccupie As Boolean = False Public AITimerSectionP6b As Integer = 0 Public AISectionP6bInUse As Boolean = False Public AISectionP10Occupie As Boolean = False Public AITimerSectionP10 As Integer = 0 Public AISectionP10InUse As Boolean = False Public AISectionP11Occupie As Boolean = False Public AITimerSectionP11 As Integer = 0 Public AISectionP11InUse As Boolean = False Public AISectionP12Occupie As Boolean = False Public AITimerSectionP12 As Integer = 0 Public AISectionP12InUse As Boolean = False Public AISectionP13Occupie As Boolean = False Public AITimerSectionP13 As Integer = 0 Public AISectionP13InUse As Boolean = False Public AISectionP14Occupie As Boolean = False Public AITimerSectionP14 As Integer = 0 Public AISectionP14InUse As Boolean = False Public AISectionP19Occupie As Boolean = False Public AITimerSectionP19 As Integer = 0 Public AISectionP19InUse As Boolean = False Public AISectionROccupie As Boolean = False Public AITimerSectionR As Integer = 0 Public AISectionRInUse As Boolean = False Public AISectionCDOccupie As Boolean = False Public AITimerSectionCD As Integer = 0 Public AISectionCDInUse As Boolean = False Public Sub AIStart () If RuntimeConfig . config . AIEnabled = True Then If EastBound Then AIEastBound . logic () If WestBound Then AIWestBound . logic () Else AISectionAOccupie = False AISectionBOccupie = False AISectionCOccupie = False AISectionDOccupie = False AISectionEOccupie = False AISectionFOccupie = False AISectionGOccupie = False AISectionHOccupie = False AISectionIOccupie = False AISectionJOccupie = False AISectionKOccupie = False AISectionLOccupie = False AISectionMOccupie = False AISectionNOccupie = False AISectionOOccupie = False AISectionPOccupie = False AISectionQOccupie = False AISectionA11Occupie = False AISectionC19Occupie = False AISectionDEOccupie = False AISectionF12Occupie = False AISectionF13Occupie = False AISectionNOOccupie = False AISectionNO14Occupie = False AISectionOPOccupie = False AISectionQ10Occupie = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIStart.vb"},{"location":"mainsystem/Files/AIStart_8vb/#githubsignallingsystemehmr-signalling-systemaiaistartvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIStart.vb"},{"location":"mainsystem/Files/AIStart_8vb/#source-code","text":"Module AIStart Public AIShortSectionValue As Integer = 8 Public AIMediumSectionValue As Integer = 17 Public AILongSectionValue As Integer = 28 Public AIBetweenSections As Integer = 5 Public AISectionAOccupie As Boolean = False Public AITimerSectionA As Integer = 0 Public AISectionAInUse As Boolean = False Public AISectionBOccupie As Boolean = False Public AITimerSectionB As Integer = 0 Public AISectionBInUse As Boolean = False Public AISectionCOccupie As Boolean = False Public AITimerSectionC As Integer = 0 Public AISectionCInUse As Boolean = False Public AISectionDOccupie As Boolean = False Public AITimerSectionD As Integer = 0 Public AISectionDInUse As Boolean = False Public AISectionEOccupie As Boolean = False Public AITimerSectionE As Integer = 0 Public AISectionEInUse As Boolean = False Public AISectionFOccupie As Boolean = False Public AITimerSectionF As Integer = 0 Public AISectionFInUse As Boolean = False Public AISectionGOccupie As Boolean = False Public AITimerSectionG As Integer = 0 Public AISectionGInUse As Boolean = False Public AISectionHOccupie As Boolean = False Public AITimerSectionH As Integer = 0 Public AISectionHInUse As Boolean = False Public AISectionIOccupie As Boolean = False Public AITimerSectionI As Integer = 0 Public AISectionIInUse As Boolean = False Public AISectionJOccupie As Boolean = False Public AITimerSectionJ As Integer = 0 Public AISectionJInUse As Boolean = False Public AISectionKOccupie As Boolean = False Public AITimerSectionK As Integer = 0 Public AISectionKInUse As Boolean = False Public AISectionLOccupie As Boolean = False Public AITimerSectionL As Integer = 0 Public AISectionLInUse As Boolean = False Public AISectionMOccupie As Boolean = False Public AITimerSectionM As Integer = 0 Public AISectionMInUse As Boolean = False Public AISectionNOccupie As Boolean = False Public AITimerSectionN As Integer = 0 Public AISectionNInUse As Boolean = False Public AISectionOOccupie As Boolean = False Public AITimerSectionO As Integer = 0 Public AISectionOInUse As Boolean = False Public AISectionPOccupie As Boolean = False Public AITimerSectionP As Integer = 0 Public AISectionPInUse As Boolean = False Public AISectionQOccupie As Boolean = False Public AITimerSectionQ As Integer = 0 Public AISectionQInUse As Boolean = False Public AISectionA11Occupie As Boolean = False Public AITimerSectionA11 As Integer = 0 Public AISectionA11InUse As Boolean = False Public AISectionC19Occupie As Boolean = False Public AITimerSectionC19 As Integer = 0 Public AISectionC19InUse As Boolean = False Public AISectionDEOccupie As Boolean = False Public AITimerSectionDE As Integer = 0 Public AISectionDEInUse As Boolean = False Public AISectionF12Occupie As Boolean = False Public AITimerSectionF12 As Integer = 0 Public AISectionF12InUse As Boolean = False Public AISectionF13Occupie As Boolean = False Public AITimerSectionF13 As Integer = 0 Public AISectionF13InUse As Boolean = False Public AISectionNOOccupie As Boolean = False Public AITimerSectionNO As Integer = 0 Public AISectionNOInUse As Boolean = False Public AISectionNO14Occupie As Boolean = False Public AITimerSectionNO14 As Integer = 0 Public AISectionNO14InUse As Boolean = False Public AISectionOPOccupie As Boolean = False Public AITimerSectionOP As Integer = 0 Public AISectionOPInUse As Boolean = False Public AISectionQ10Occupie As Boolean = False Public AITimerSectionQ10 As Integer = 0 Public AISectionQ10InUse As Boolean = False Public AISectionP5aOccupie As Boolean = False Public AITimerSectionP5a As Integer = 0 Public AISectionP5aInUse As Boolean = False Public AISectionP5bOccupie As Boolean = False Public AITimerSectionP5b As Integer = 0 Public AISectionP5bInUse As Boolean = False Public AISectionP6aOccupie As Boolean = False Public AITimerSectionP6a As Integer = 0 Public AISectionP6aInUse As Boolean = False Public AISectionP6bOccupie As Boolean = False Public AITimerSectionP6b As Integer = 0 Public AISectionP6bInUse As Boolean = False Public AISectionP10Occupie As Boolean = False Public AITimerSectionP10 As Integer = 0 Public AISectionP10InUse As Boolean = False Public AISectionP11Occupie As Boolean = False Public AITimerSectionP11 As Integer = 0 Public AISectionP11InUse As Boolean = False Public AISectionP12Occupie As Boolean = False Public AITimerSectionP12 As Integer = 0 Public AISectionP12InUse As Boolean = False Public AISectionP13Occupie As Boolean = False Public AITimerSectionP13 As Integer = 0 Public AISectionP13InUse As Boolean = False Public AISectionP14Occupie As Boolean = False Public AITimerSectionP14 As Integer = 0 Public AISectionP14InUse As Boolean = False Public AISectionP19Occupie As Boolean = False Public AITimerSectionP19 As Integer = 0 Public AISectionP19InUse As Boolean = False Public AISectionROccupie As Boolean = False Public AITimerSectionR As Integer = 0 Public AISectionRInUse As Boolean = False Public AISectionCDOccupie As Boolean = False Public AITimerSectionCD As Integer = 0 Public AISectionCDInUse As Boolean = False Public Sub AIStart () If RuntimeConfig . config . AIEnabled = True Then If EastBound Then AIEastBound . logic () If WestBound Then AIWestBound . logic () Else AISectionAOccupie = False AISectionBOccupie = False AISectionCOccupie = False AISectionDOccupie = False AISectionEOccupie = False AISectionFOccupie = False AISectionGOccupie = False AISectionHOccupie = False AISectionIOccupie = False AISectionJOccupie = False AISectionKOccupie = False AISectionLOccupie = False AISectionMOccupie = False AISectionNOccupie = False AISectionOOccupie = False AISectionPOccupie = False AISectionQOccupie = False AISectionA11Occupie = False AISectionC19Occupie = False AISectionDEOccupie = False AISectionF12Occupie = False AISectionF13Occupie = False AISectionNOOccupie = False AISectionNO14Occupie = False AISectionOPOccupie = False AISectionQ10Occupie = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/AIWestBound_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/AI/AIWestBound.vb \u00b6 Source code \u00b6 Module AIWestBound Public Sub logic () AISectionA () AISectionB () AISectionC () AISectionD () AISectionE () AISectionF () AISectionG () AISectionH () AISectionI () AISectionJ () AISectionK () AISectionL () AISectionM () AISectionN () AISectionO () AISectionP () AISectionQ () AISectionA11 () AISectionC19 () AISectionDE () AISectionF12 () AISectionF13 () AISectionNO () AISectionNO14 () AISectionOP () AISectionQ10 () End Sub Public Sub AISectionA () ' Start SectionA code as train arrives in section If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = False Then AITimerSectionA = AIShortSectionValue AISectionAInUse = True End If ' Code to move into next section once conditions are met If AISectionAInUse = True Then If AISectionAOccupie = True And AITimerSectionA <= AIBetweenSections Then AISectionHOccupie = True AITimerSectionA = AITimerSectionA - 1 If Not Points . PointReturns ( PointNames . P5a ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 5a\" ) If Not Points . PointReturns ( PointNames . P11 ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 11\" ) Else AITimerSectionA = AITimerSectionA - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = True Then AISectionAOccupie = False AISectionAInUse = False End If End Sub Public Sub AISectionB () ' Start SectionB code as train arrives in section If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = False Then AITimerSectionB = AIMediumSectionValue AISectionBInUse = True End If ' Code to move into next section once conditions are met If AISectionBInUse = True Then If AISectionBOccupie = True And AITimerSectionB <= AIBetweenSections Then If PointReturns ( PointNames . P6b ) = PointInNormal Then AISectionAOccupie = True AITimerSectionB = AITimerSectionB - 1 ElseIf PointReturns ( PointNames . P6b ) = PointInReverse Then AISectionJOccupie = True AITimerSectionB = AITimerSectionB - 1 Else MsgBox ( \"AI Train in section B derailed on point 6b\" ) End If Else AITimerSectionB = AITimerSectionB - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = True Then AISectionBOccupie = False AISectionBInUse = False End If End Sub Public Sub AISectionC () ' Start SectionC code as train arrives in section If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = False Then AITimerSectionC = AILongSectionValue AISectionCInUse = True End If ' Code to move into next section once conditions are met If AISectionCInUse = True Then If AISectionCOccupie = True And AITimerSectionC <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then AISectionBOccupie = True AITimerSectionC = 0 End If Else AITimerSectionC = AITimerSectionC - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = True Then AISectionCOccupie = False AISectionCInUse = False End If End Sub Public Sub AISectionD () ' Start SectionD code as train arrives in section If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = False Then AITimerSectionD = AILongSectionValue AISectionDInUse = True End If ' Code to move into next section once conditions are met If AISectionDInUse = True Then If AISectionDOccupie = True And AITimerSectionD <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionD = 0 If Not Points . PointReturns ( PointNames . P19 ) = PointInNormal Then MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionD = AITimerSectionD - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = True Then AISectionDOccupie = False AISectionDInUse = False End If End Sub Public Sub AISectionE () ' Start SectionE code as train arrives in section If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = False Then AITimerSectionE = AIMediumSectionValue AISectionEInUse = True End If ' Code to move into next section once conditions are met If AISectionEInUse = True Then If AISectionEOccupie = True And AITimerSectionE <= AIBetweenSections Then AISectionDEOccupie = True End If AITimerSectionE = AITimerSectionE - 1 End If ' Code to clear section once section timer reaches 0 If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = True Then AISectionEOccupie = False AISectionEInUse = False End If End Sub Public Sub AISectionF () ' Start SectionF code as train arrives in section If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = False Then AITimerSectionF = AIShortSectionValue AISectionFInUse = True End If ' Code to move into next section once conditions are met If AISectionFInUse = True Then If AISectionFOccupie = True And AITimerSectionF <= AIBetweenSections Then AISectionEOccupie = True End If AITimerSectionF = AITimerSectionF - 1 End If ' Code to clear section once section timer reaches 0 If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = True Then AISectionFOccupie = False AISectionFInUse = False End If End Sub Public Sub AISectionG () ' Start SectionG code as train arrives in section If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = False Then AITimerSectionG = AIShortSectionValue AISectionGInUse = True End If ' Code to move into next section once conditions are met If AISectionGInUse = True Then If AISectionGOccupie = True And AITimerSectionG <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal Then AISectionFOccupie = True AITimerSectionG = 0 If Not Points . PointReturns ( PointNames . P13 ) = PointInNormal Then MsgBox ( \"AI Train in section F derailed on point 13\" ) ElseIf Points . PointReturns ( PointNames . P12 ) = PointInReverse Then AISectionF12Occupie = True AITimerSectionG = 0 Else MsgBox ( \"AI Train in section F derailed on point 12\" ) End If End If Else AITimerSectionG = AITimerSectionG - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = True Then AISectionGOccupie = False AISectionGInUse = False End If End Sub Public Sub AISectionH () ' Start SectionH code as train arrives in section If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = False Then AITimerSectionH = AIShortSectionValue AISectionHInUse = True End If ' Code to move into next section once conditions are met If AISectionHInUse = True Then If AISectionHOccupie = True And AITimerSectionH <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger Then AISectionGOccupie = True AITimerSectionH = 0 End If Else AITimerSectionH = AITimerSectionH - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = True Then AISectionHOccupie = False AISectionHInUse = False End If End Sub Public Sub AISectionI () ' Start SectionI code as train arrives in section If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = False Then AITimerSectionI = AIMediumSectionValue AISectionIInUse = True End If ' Code to move into next section once conditions are met If AISectionIInUse = True Then If AISectionIOccupie = True And AITimerSectionI <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then AISectionF13Occupie = True AITimerSectionI = 0 End If Else AITimerSectionI = AITimerSectionI - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = True Then AISectionIOccupie = False AISectionIInUse = False End If End Sub Public Sub AISectionJ () ' Start SectionJ code as train arrives in section If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = False Then AITimerSectionJ = AIShortSectionValue AISectionJInUse = True End If ' Code to move into next section once conditions are met If AISectionJInUse = True Then If AISectionJOccupie = True And AITimerSectionJ <= AIBetweenSections Then AISectionQOccupie = True AITimerSectionJ = AITimerSectionJ - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInReverse Then MsgBox ( \"AI Train in section J derailed on point 6a\" ) Else AITimerSectionJ = AITimerSectionJ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = True Then AISectionJOccupie = False AISectionJInUse = False End If End Sub Public Sub AISectionK () ' Start SectionK code as train arrives in section If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = False Then AITimerSectionK = AIShortSectionValue AISectionKInUse = True End If ' Code to move into next section once conditions are met If AISectionKInUse = True Then If AISectionKOccupie = True And AITimerSectionK <= AIBetweenSections Then AISectionHOccupie = True AITimerSectionK = AITimerSectionK - 1 If Not Points . PointReturns ( PointNames . P5a ) = PointInReverse Then MsgBox ( \"AI Train in section K derailed on point 5a\" ) If Not Points . PointReturns ( PointNames . P11 ) = PointInNormal Then MsgBox ( \"AI Train in section K derailed on point 11\" ) Else AITimerSectionK = AITimerSectionK - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = True Then AISectionKOccupie = False AISectionKInUse = False End If End Sub Public Sub AISectionL () ' Start SectionL code as train arrives in section If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = False Then AITimerSectionL = AIShortSectionValue AISectionLInUse = True End If ' Code to move into next section once conditions are met If AISectionLInUse = True Then If AISectionLOccupie = True And AITimerSectionL <= AIBetweenSections Then AISectionQOccupie = True AITimerSectionL = AITimerSectionL - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInNormal Then MsgBox ( \"AI Train in section L derailed on point 6a\" ) Else AITimerSectionL = AITimerSectionL - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = True Then AISectionLOccupie = False AISectionLInUse = False End If End Sub Public Sub AISectionM () ' Start SectionM code as train arrives in section If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = False Then AITimerSectionM = AIShortSectionValue AISectionMInUse = True End If ' Code to move into next section once conditions are met If AISectionMInUse = True Then If AISectionMOccupie = True And AITimerSectionM <= AIBetweenSections Then If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then AISectionLOccupie = True AITimerSectionM = AITimerSectionM - 1 ElseIf Points . PointReturns ( PointNames . P5b ) = PointInReverse Then AISectionKOccupie = True AITimerSectionM = AITimerSectionM - 1 Else MsgBox ( \"AI Train in section M derailed on point 5b\" ) End If Else AITimerSectionM = AITimerSectionM - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = True Then AISectionMOccupie = False AISectionMInUse = False End If End Sub Public Sub AISectionN () ' Start SectionN code as train arrives in section If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = False Then AITimerSectionN = AIShortSectionValue AISectionNInUse = True End If ' Code to move into next section once conditions are met If AISectionNInUse = True Then If AISectionNOccupie = True And AITimerSectionN <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then AISectionMOccupie = True AITimerSectionN = 0 End If Else AITimerSectionN = AITimerSectionN - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = True Then AISectionNOccupie = False AISectionNInUse = False End If End Sub Public Sub AISectionO () ' Start SectionO code as train arrives in section If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = False Then AITimerSectionO = AIShortSectionValue AISectionOInUse = True End If ' Code to move into next section once conditions are met If AISectionOInUse = True Then If AISectionOOccupie = True And AITimerSectionO <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then AISectionNOOccupie = True AITimerSectionO = 0 If Not Points . PointReturns ( PointNames . P14 ) = PointInNormal Then MsgBox ( \"AI Train in section NO derailed on point 14\" ) End If Else AITimerSectionO = AITimerSectionO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = True Then AISectionOOccupie = False AISectionOInUse = False End If End Sub Public Sub AISectionP () ' Start SectionP code as train arrives in section If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = False Then AITimerSectionP = AIShortSectionValue AISectionPInUse = True End If ' Code to move into next section once conditions are met If AISectionPInUse = True Then If AISectionPOccupie = True And AITimerSectionP <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger Then AISectionOPOccupie = True AITimerSectionP = 0 End If Else AITimerSectionP = AITimerSectionP - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = True Then AISectionPOccupie = False AISectionPInUse = False End If End Sub Public Sub AISectionQ () ' Start SectionQ code as train arrives in section If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = False Then AITimerSectionQ = AIShortSectionValue AISectionQInUse = True End If ' Code to move into next section once conditions are met If AISectionQInUse = True Then If AISectionQOccupie = True And AITimerSectionQ <= AIBetweenSections Then If Points . PointReturns ( Pointnames . P10 ) = PointInNormal Then AISectionPOccupie = True AITimerSectionQ = AITimerSectionQ - 1 ElseIf Points . PointReturns ( Pointnames . P10 ) = PointInReverse Then AISectionQ10Occupie = True AITimerSectionQ = AITimerSectionQ - 1 Else MsgBox ( \"AI Train in section Q derailed on point 10\" ) End If Else AITimerSectionQ = AITimerSectionQ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = True Then AISectionQOccupie = False AISectionQInUse = False End If End Sub Public Sub AISectionA11 () ' Start SectionA11 code as train arrives in section If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = False Then AITimerSectionA11 = AIShortSectionValue AISectionA11InUse = True End If ' Code to move into next section once conditions are met If AISectionA11InUse = True Then If AISectionA11Occupie = True And AITimerSectionA11 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionHOccupie = True AITimerSectionA11 = 0 Else If Not Points . PointReturns ( PointNames . P11 ) = PointInReverse Then MsgBox ( \"AI Train in section A derailed on point 11\" ) End If Else AITimerSectionA11 = AITimerSectionA11 - 1 End If End If End If ' Code to clear section once section timer reaches 0 If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = True Then AISectionA11Occupie = False AISectionA11InUse = False End If End Sub Public Sub AISectionC19 () ' Start SectionC19 code as train arrives in section If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = False Then AITimerSectionC19 = AIShortSectionValue AISectionC19InUse = True End If ' Code to move into next section once conditions are met If AISectionC19InUse = True Then If AISectionC19Occupie = True And AITimerSectionC19 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionCOccupie = True AITimerSectionC19 = 0 Else If Not Points . PointReturns ( PointNames . P19 ) = PointInReverse Then MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionC19 = AITimerSectionC19 - 1 End If Else AITimerSectionC19 = AITimerSectionC19 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = True Then AISectionC19Occupie = False AISectionC19InUse = False End If End Sub Public Sub AISectionDE () ' Start SectionDE code as train arrives in section If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = False Then AITimerSectionDE = AIShortSectionValue AISectionDEInUse = True End If ' Code to move into next section once conditions are met If AISectionDEInUse = True Then If AISectionDEOccupie = True And AITimerSectionDE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then AISectionDOccupie = True AITimerSectionDE = 0 End If Else AITimerSectionDE = AITimerSectionDE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = True Then AISectionDEOccupie = False AISectionDEInUse = False End If End Sub Public Sub AISectionF12 () ' Start SectionF12 code as train arrives in section If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = False Then AITimerSectionF12 = AIShortSectionValue AISectionF12InUse = True End If ' Code to move into next section once conditions are met If AISectionF12InUse = True Then If AISectionF12Occupie = True And AITimerSectionF12 <= AIBetweenSections Then AITimerSectionF12 = AITimerSectionF12 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = True Then AISectionF12Occupie = False AISectionF12InUse = False End If End Sub Public Sub AISectionF13 () ' Start SectionF13 code as train arrives in section If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = False Then AITimerSectionF13 = AIShortSectionValue AISectionF13InUse = True End If ' Code to move into next section once conditions are met If AISectionF13InUse = True Then If AISectionF13Occupie = True And AITimerSectionF13 <= AIBetweenSections Then AISectionEOccupie = True AITimerSectionF13 = AITimerSectionF13 - 1 If Not Points . PointReturns ( PointNames . P13 ) = PointInReverse Then MsgBox ( \"AI Train in section F13 derailed on point 13\" ) Else AITimerSectionF13 = AITimerSectionF13 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = True Then AISectionF13Occupie = False AISectionF13InUse = False End If End Sub Public Sub AISectionNO () ' Start SectionNO code as train arrives in section If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = False Then AITimerSectionNO = AIShortSectionValue AISectionNOInUse = True End If ' Code to move into next section once conditions are met If AISectionNOInUse = True Then If AISectionNOOccupie = True And AITimerSectionNO <= AIBetweenSections Then AISectionNOccupie = True AITimerSectionNO = AITimerSectionNO - 1 If Not Points . PointReturns ( PointNames . P14 ) = PointInNormal Then MsgBox ( \"AI Train in section NO derailed on point 14\" ) Else AITimerSectionNO = AITimerSectionNO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = True Then AISectionNOOccupie = False AISectionNOInUse = False End If End Sub Public Sub AISectionNO14 () ' Start SectionNO14 code as train arrives in section If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = False Then AITimerSectionNO14 = AIShortSectionValue AISectionNO14InUse = True End If ' Code to move into next section once conditions are met If AISectionNO14InUse = True Then If AISectionNO14Occupie = True And AITimerSectionNO14 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionNO14 = 0 If Not Points . PointReturns ( PointNames . P14 ) = PointInReverse Then MsgBox ( \"AI Train in section NO14 derailed on point 14\" ) Else AITimerSectionNO14 = AITimerSectionNO14 - 1 End If End If End If ' Code to clear section once section timer reaches 0 If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = True Then AISectionNO14Occupie = False AISectionNO14InUse = False End If End Sub Public Sub AISectionOP () ' Start SectionOP code as train arrives in section If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = False Then AITimerSectionOP = AIShortSectionValue AISectionOPInUse = True End If ' Code to move into next section once conditions are met If AISectionOPInUse = True Then If AISectionOPOccupie = True And AITimerSectionOP <= AIBetweenSections Then AISectionOOccupie = True End If AITimerSectionOP = AITimerSectionOP - 1 End If ' Code to clear section once section timer reaches 0 If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = True Then AISectionOPOccupie = False AISectionOPInUse = False End If End Sub Public Sub AISectionQ10 () ' Start SectionQ10 code as train arrives in section If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = False Then AITimerSectionQ10 = AIShortSectionValue AISectionQ10InUse = True End If ' Code to move into next section once conditions are met If AISectionQ10InUse = True Then If AISectionQ10Occupie = True And AITimerSectionQ10 <= AIBetweenSections Then AISectionIOccupie = True End If AITimerSectionQ10 = AITimerSectionQ10 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = True Then AISectionQ10Occupie = False AISectionQ10InUse = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIWestBound.vb"},{"location":"mainsystem/Files/AIWestBound_8vb/#githubsignallingsystemehmr-signalling-systemaiaiwestboundvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/AI/AIWestBound.vb"},{"location":"mainsystem/Files/AIWestBound_8vb/#source-code","text":"Module AIWestBound Public Sub logic () AISectionA () AISectionB () AISectionC () AISectionD () AISectionE () AISectionF () AISectionG () AISectionH () AISectionI () AISectionJ () AISectionK () AISectionL () AISectionM () AISectionN () AISectionO () AISectionP () AISectionQ () AISectionA11 () AISectionC19 () AISectionDE () AISectionF12 () AISectionF13 () AISectionNO () AISectionNO14 () AISectionOP () AISectionQ10 () End Sub Public Sub AISectionA () ' Start SectionA code as train arrives in section If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = False Then AITimerSectionA = AIShortSectionValue AISectionAInUse = True End If ' Code to move into next section once conditions are met If AISectionAInUse = True Then If AISectionAOccupie = True And AITimerSectionA <= AIBetweenSections Then AISectionHOccupie = True AITimerSectionA = AITimerSectionA - 1 If Not Points . PointReturns ( PointNames . P5a ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 5a\" ) If Not Points . PointReturns ( PointNames . P11 ) = PointInNormal Then MsgBox ( \"AI Train in section A derailed on point 11\" ) Else AITimerSectionA = AITimerSectionA - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionAOccupie = True And AITimerSectionA = 0 And AISectionAInUse = True Then AISectionAOccupie = False AISectionAInUse = False End If End Sub Public Sub AISectionB () ' Start SectionB code as train arrives in section If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = False Then AITimerSectionB = AIMediumSectionValue AISectionBInUse = True End If ' Code to move into next section once conditions are met If AISectionBInUse = True Then If AISectionBOccupie = True And AITimerSectionB <= AIBetweenSections Then If PointReturns ( PointNames . P6b ) = PointInNormal Then AISectionAOccupie = True AITimerSectionB = AITimerSectionB - 1 ElseIf PointReturns ( PointNames . P6b ) = PointInReverse Then AISectionJOccupie = True AITimerSectionB = AITimerSectionB - 1 Else MsgBox ( \"AI Train in section B derailed on point 6b\" ) End If Else AITimerSectionB = AITimerSectionB - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionBOccupie = True And AITimerSectionB = 0 And AISectionBInUse = True Then AISectionBOccupie = False AISectionBInUse = False End If End Sub Public Sub AISectionC () ' Start SectionC code as train arrives in section If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = False Then AITimerSectionC = AILongSectionValue AISectionCInUse = True End If ' Code to move into next section once conditions are met If AISectionCInUse = True Then If AISectionCOccupie = True And AITimerSectionC <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then AISectionBOccupie = True AITimerSectionC = 0 End If Else AITimerSectionC = AITimerSectionC - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionCOccupie = True And AITimerSectionC = 0 And AISectionCInUse = True Then AISectionCOccupie = False AISectionCInUse = False End If End Sub Public Sub AISectionD () ' Start SectionD code as train arrives in section If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = False Then AITimerSectionD = AILongSectionValue AISectionDInUse = True End If ' Code to move into next section once conditions are met If AISectionDInUse = True Then If AISectionDOccupie = True And AITimerSectionD <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionD = 0 If Not Points . PointReturns ( PointNames . P19 ) = PointInNormal Then MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionD = AITimerSectionD - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDOccupie = True And AITimerSectionD = 0 And AISectionDInUse = True Then AISectionDOccupie = False AISectionDInUse = False End If End Sub Public Sub AISectionE () ' Start SectionE code as train arrives in section If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = False Then AITimerSectionE = AIMediumSectionValue AISectionEInUse = True End If ' Code to move into next section once conditions are met If AISectionEInUse = True Then If AISectionEOccupie = True And AITimerSectionE <= AIBetweenSections Then AISectionDEOccupie = True End If AITimerSectionE = AITimerSectionE - 1 End If ' Code to clear section once section timer reaches 0 If AISectionEOccupie = True And AITimerSectionE = 0 And AISectionEInUse = True Then AISectionEOccupie = False AISectionEInUse = False End If End Sub Public Sub AISectionF () ' Start SectionF code as train arrives in section If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = False Then AITimerSectionF = AIShortSectionValue AISectionFInUse = True End If ' Code to move into next section once conditions are met If AISectionFInUse = True Then If AISectionFOccupie = True And AITimerSectionF <= AIBetweenSections Then AISectionEOccupie = True End If AITimerSectionF = AITimerSectionF - 1 End If ' Code to clear section once section timer reaches 0 If AISectionFOccupie = True And AITimerSectionF = 0 And AISectionFInUse = True Then AISectionFOccupie = False AISectionFInUse = False End If End Sub Public Sub AISectionG () ' Start SectionG code as train arrives in section If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = False Then AITimerSectionG = AIShortSectionValue AISectionGInUse = True End If ' Code to move into next section once conditions are met If AISectionGInUse = True Then If AISectionGOccupie = True And AITimerSectionG <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal Then AISectionFOccupie = True AITimerSectionG = 0 If Not Points . PointReturns ( PointNames . P13 ) = PointInNormal Then MsgBox ( \"AI Train in section F derailed on point 13\" ) ElseIf Points . PointReturns ( PointNames . P12 ) = PointInReverse Then AISectionF12Occupie = True AITimerSectionG = 0 Else MsgBox ( \"AI Train in section F derailed on point 12\" ) End If End If Else AITimerSectionG = AITimerSectionG - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionGOccupie = True And AITimerSectionG = 0 And AISectionGInUse = True Then AISectionGOccupie = False AISectionGInUse = False End If End Sub Public Sub AISectionH () ' Start SectionH code as train arrives in section If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = False Then AITimerSectionH = AIShortSectionValue AISectionHInUse = True End If ' Code to move into next section once conditions are met If AISectionHInUse = True Then If AISectionHOccupie = True And AITimerSectionH <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger Then AISectionGOccupie = True AITimerSectionH = 0 End If Else AITimerSectionH = AITimerSectionH - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionHOccupie = True And AITimerSectionH = 0 And AISectionHInUse = True Then AISectionHOccupie = False AISectionHInUse = False End If End Sub Public Sub AISectionI () ' Start SectionI code as train arrives in section If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = False Then AITimerSectionI = AIMediumSectionValue AISectionIInUse = True End If ' Code to move into next section once conditions are met If AISectionIInUse = True Then If AISectionIOccupie = True And AITimerSectionI <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then AISectionF13Occupie = True AITimerSectionI = 0 End If Else AITimerSectionI = AITimerSectionI - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionIOccupie = True And AITimerSectionI = 0 And AISectionIInUse = True Then AISectionIOccupie = False AISectionIInUse = False End If End Sub Public Sub AISectionJ () ' Start SectionJ code as train arrives in section If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = False Then AITimerSectionJ = AIShortSectionValue AISectionJInUse = True End If ' Code to move into next section once conditions are met If AISectionJInUse = True Then If AISectionJOccupie = True And AITimerSectionJ <= AIBetweenSections Then AISectionQOccupie = True AITimerSectionJ = AITimerSectionJ - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInReverse Then MsgBox ( \"AI Train in section J derailed on point 6a\" ) Else AITimerSectionJ = AITimerSectionJ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionJOccupie = True And AITimerSectionJ = 0 And AISectionJInUse = True Then AISectionJOccupie = False AISectionJInUse = False End If End Sub Public Sub AISectionK () ' Start SectionK code as train arrives in section If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = False Then AITimerSectionK = AIShortSectionValue AISectionKInUse = True End If ' Code to move into next section once conditions are met If AISectionKInUse = True Then If AISectionKOccupie = True And AITimerSectionK <= AIBetweenSections Then AISectionHOccupie = True AITimerSectionK = AITimerSectionK - 1 If Not Points . PointReturns ( PointNames . P5a ) = PointInReverse Then MsgBox ( \"AI Train in section K derailed on point 5a\" ) If Not Points . PointReturns ( PointNames . P11 ) = PointInNormal Then MsgBox ( \"AI Train in section K derailed on point 11\" ) Else AITimerSectionK = AITimerSectionK - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionKOccupie = True And AITimerSectionK = 0 And AISectionKInUse = True Then AISectionKOccupie = False AISectionKInUse = False End If End Sub Public Sub AISectionL () ' Start SectionL code as train arrives in section If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = False Then AITimerSectionL = AIShortSectionValue AISectionLInUse = True End If ' Code to move into next section once conditions are met If AISectionLInUse = True Then If AISectionLOccupie = True And AITimerSectionL <= AIBetweenSections Then AISectionQOccupie = True AITimerSectionL = AITimerSectionL - 1 If Not Points . PointReturns ( PointNames . P6a ) = PointInNormal Then MsgBox ( \"AI Train in section L derailed on point 6a\" ) Else AITimerSectionL = AITimerSectionL - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionLOccupie = True And AITimerSectionL = 0 And AISectionLInUse = True Then AISectionLOccupie = False AISectionLInUse = False End If End Sub Public Sub AISectionM () ' Start SectionM code as train arrives in section If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = False Then AITimerSectionM = AIShortSectionValue AISectionMInUse = True End If ' Code to move into next section once conditions are met If AISectionMInUse = True Then If AISectionMOccupie = True And AITimerSectionM <= AIBetweenSections Then If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then AISectionLOccupie = True AITimerSectionM = AITimerSectionM - 1 ElseIf Points . PointReturns ( PointNames . P5b ) = PointInReverse Then AISectionKOccupie = True AITimerSectionM = AITimerSectionM - 1 Else MsgBox ( \"AI Train in section M derailed on point 5b\" ) End If Else AITimerSectionM = AITimerSectionM - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionMOccupie = True And AITimerSectionM = 0 And AISectionMInUse = True Then AISectionMOccupie = False AISectionMInUse = False End If End Sub Public Sub AISectionN () ' Start SectionN code as train arrives in section If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = False Then AITimerSectionN = AIShortSectionValue AISectionNInUse = True End If ' Code to move into next section once conditions are met If AISectionNInUse = True Then If AISectionNOccupie = True And AITimerSectionN <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then AISectionMOccupie = True AITimerSectionN = 0 End If Else AITimerSectionN = AITimerSectionN - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOccupie = True And AITimerSectionN = 0 And AISectionNInUse = True Then AISectionNOccupie = False AISectionNInUse = False End If End Sub Public Sub AISectionO () ' Start SectionO code as train arrives in section If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = False Then AITimerSectionO = AIShortSectionValue AISectionOInUse = True End If ' Code to move into next section once conditions are met If AISectionOInUse = True Then If AISectionOOccupie = True And AITimerSectionO <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then AISectionNOOccupie = True AITimerSectionO = 0 If Not Points . PointReturns ( PointNames . P14 ) = PointInNormal Then MsgBox ( \"AI Train in section NO derailed on point 14\" ) End If Else AITimerSectionO = AITimerSectionO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionOOccupie = True And AITimerSectionO = 0 And AISectionOInUse = True Then AISectionOOccupie = False AISectionOInUse = False End If End Sub Public Sub AISectionP () ' Start SectionP code as train arrives in section If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = False Then AITimerSectionP = AIShortSectionValue AISectionPInUse = True End If ' Code to move into next section once conditions are met If AISectionPInUse = True Then If AISectionPOccupie = True And AITimerSectionP <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger Then AISectionOPOccupie = True AITimerSectionP = 0 End If Else AITimerSectionP = AITimerSectionP - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionPOccupie = True And AITimerSectionP = 0 And AISectionPInUse = True Then AISectionPOccupie = False AISectionPInUse = False End If End Sub Public Sub AISectionQ () ' Start SectionQ code as train arrives in section If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = False Then AITimerSectionQ = AIShortSectionValue AISectionQInUse = True End If ' Code to move into next section once conditions are met If AISectionQInUse = True Then If AISectionQOccupie = True And AITimerSectionQ <= AIBetweenSections Then If Points . PointReturns ( Pointnames . P10 ) = PointInNormal Then AISectionPOccupie = True AITimerSectionQ = AITimerSectionQ - 1 ElseIf Points . PointReturns ( Pointnames . P10 ) = PointInReverse Then AISectionQ10Occupie = True AITimerSectionQ = AITimerSectionQ - 1 Else MsgBox ( \"AI Train in section Q derailed on point 10\" ) End If Else AITimerSectionQ = AITimerSectionQ - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionQOccupie = True And AITimerSectionQ = 0 And AISectionQInUse = True Then AISectionQOccupie = False AISectionQInUse = False End If End Sub Public Sub AISectionA11 () ' Start SectionA11 code as train arrives in section If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = False Then AITimerSectionA11 = AIShortSectionValue AISectionA11InUse = True End If ' Code to move into next section once conditions are met If AISectionA11InUse = True Then If AISectionA11Occupie = True And AITimerSectionA11 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionHOccupie = True AITimerSectionA11 = 0 Else If Not Points . PointReturns ( PointNames . P11 ) = PointInReverse Then MsgBox ( \"AI Train in section A derailed on point 11\" ) End If Else AITimerSectionA11 = AITimerSectionA11 - 1 End If End If End If ' Code to clear section once section timer reaches 0 If AISectionA11Occupie = True And AITimerSectionA11 = 0 And AISectionA11InUse = True Then AISectionA11Occupie = False AISectionA11InUse = False End If End Sub Public Sub AISectionC19 () ' Start SectionC19 code as train arrives in section If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = False Then AITimerSectionC19 = AIShortSectionValue AISectionC19InUse = True End If ' Code to move into next section once conditions are met If AISectionC19InUse = True Then If AISectionC19Occupie = True And AITimerSectionC19 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then AISectionCOccupie = True AITimerSectionC19 = 0 Else If Not Points . PointReturns ( PointNames . P19 ) = PointInReverse Then MsgBox ( \"AI Train in section C derailed on point 19\" ) End If Else AITimerSectionC19 = AITimerSectionC19 - 1 End If Else AITimerSectionC19 = AITimerSectionC19 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionC19Occupie = True And AITimerSectionC19 = 0 And AISectionC19InUse = True Then AISectionC19Occupie = False AISectionC19InUse = False End If End Sub Public Sub AISectionDE () ' Start SectionDE code as train arrives in section If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = False Then AITimerSectionDE = AIShortSectionValue AISectionDEInUse = True End If ' Code to move into next section once conditions are met If AISectionDEInUse = True Then If AISectionDEOccupie = True And AITimerSectionDE <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then AISectionDOccupie = True AITimerSectionDE = 0 End If Else AITimerSectionDE = AITimerSectionDE - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionDEOccupie = True And AITimerSectionDE = 0 And AISectionDEInUse = True Then AISectionDEOccupie = False AISectionDEInUse = False End If End Sub Public Sub AISectionF12 () ' Start SectionF12 code as train arrives in section If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = False Then AITimerSectionF12 = AIShortSectionValue AISectionF12InUse = True End If ' Code to move into next section once conditions are met If AISectionF12InUse = True Then If AISectionF12Occupie = True And AITimerSectionF12 <= AIBetweenSections Then AITimerSectionF12 = AITimerSectionF12 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF12Occupie = True And AITimerSectionF12 = 0 And AISectionF12InUse = True Then AISectionF12Occupie = False AISectionF12InUse = False End If End Sub Public Sub AISectionF13 () ' Start SectionF13 code as train arrives in section If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = False Then AITimerSectionF13 = AIShortSectionValue AISectionF13InUse = True End If ' Code to move into next section once conditions are met If AISectionF13InUse = True Then If AISectionF13Occupie = True And AITimerSectionF13 <= AIBetweenSections Then AISectionEOccupie = True AITimerSectionF13 = AITimerSectionF13 - 1 If Not Points . PointReturns ( PointNames . P13 ) = PointInReverse Then MsgBox ( \"AI Train in section F13 derailed on point 13\" ) Else AITimerSectionF13 = AITimerSectionF13 - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionF13Occupie = True And AITimerSectionF13 = 0 And AISectionF13InUse = True Then AISectionF13Occupie = False AISectionF13InUse = False End If End Sub Public Sub AISectionNO () ' Start SectionNO code as train arrives in section If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = False Then AITimerSectionNO = AIShortSectionValue AISectionNOInUse = True End If ' Code to move into next section once conditions are met If AISectionNOInUse = True Then If AISectionNOOccupie = True And AITimerSectionNO <= AIBetweenSections Then AISectionNOccupie = True AITimerSectionNO = AITimerSectionNO - 1 If Not Points . PointReturns ( PointNames . P14 ) = PointInNormal Then MsgBox ( \"AI Train in section NO derailed on point 14\" ) Else AITimerSectionNO = AITimerSectionNO - 1 End If End If ' Code to clear section once section timer reaches 0 If AISectionNOOccupie = True And AITimerSectionNO = 0 And AISectionNOInUse = True Then AISectionNOOccupie = False AISectionNOInUse = False End If End Sub Public Sub AISectionNO14 () ' Start SectionNO14 code as train arrives in section If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = False Then AITimerSectionNO14 = AIShortSectionValue AISectionNO14InUse = True End If ' Code to move into next section once conditions are met If AISectionNO14InUse = True Then If AISectionNO14Occupie = True And AITimerSectionNO14 <= AIBetweenSections Then If Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger Then AISectionCOccupie = True AITimerSectionNO14 = 0 If Not Points . PointReturns ( PointNames . P14 ) = PointInReverse Then MsgBox ( \"AI Train in section NO14 derailed on point 14\" ) Else AITimerSectionNO14 = AITimerSectionNO14 - 1 End If End If End If ' Code to clear section once section timer reaches 0 If AISectionNO14Occupie = True And AITimerSectionNO14 = 0 And AISectionNO14InUse = True Then AISectionNO14Occupie = False AISectionNO14InUse = False End If End Sub Public Sub AISectionOP () ' Start SectionOP code as train arrives in section If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = False Then AITimerSectionOP = AIShortSectionValue AISectionOPInUse = True End If ' Code to move into next section once conditions are met If AISectionOPInUse = True Then If AISectionOPOccupie = True And AITimerSectionOP <= AIBetweenSections Then AISectionOOccupie = True End If AITimerSectionOP = AITimerSectionOP - 1 End If ' Code to clear section once section timer reaches 0 If AISectionOPOccupie = True And AITimerSectionOP = 0 And AISectionOPInUse = True Then AISectionOPOccupie = False AISectionOPInUse = False End If End Sub Public Sub AISectionQ10 () ' Start SectionQ10 code as train arrives in section If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = False Then AITimerSectionQ10 = AIShortSectionValue AISectionQ10InUse = True End If ' Code to move into next section once conditions are met If AISectionQ10InUse = True Then If AISectionQ10Occupie = True And AITimerSectionQ10 <= AIBetweenSections Then AISectionIOccupie = True End If AITimerSectionQ10 = AITimerSectionQ10 - 1 End If ' Code to clear section once section timer reaches 0 If AISectionQ10Occupie = True And AITimerSectionQ10 = 0 And AISectionQ10InUse = True Then AISectionQ10Occupie = False AISectionQ10InUse = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/AlarmsAndNotifications_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Misc/AlarmsAndNotifications.vb \u00b6 Source code \u00b6 Public Module AlarmsAndNotifications ' Log File Public ReadOnly MyDate As Date = Now ' Get current date Public ReadOnly DaysInMonth As Integer = Date . DaysInMonth ( MyDate . Year , MyDate . Month ) ' Get amount if days in current month Public ReadOnly LastDayInMonthDate As Date = New Date ( MyDate . Year , MyDate . Month , DaysInMonth ) ' Get the number of the last day in the month Public ReadOnly theMonth As String = DateTime . Now . ToString ( \"MMMM\" ) ' Get current month Public ReadOnly theYear As String = DateTime . Now . ToString ( \"yyyy\" ) ' Get current year ' Add Fault to log file Public Sub UpdateSystemLog ( FaultTextToAddToLog As String ) Dim filepath As String = GlobalConfig . config . LogPath & \"\\EHMR Log File \" & theMonth & \" \" & theYear & \".txt\" If Not System . IO . File . Exists ( filepath ) Then System . IO . File . Create ( filepath ). Dispose () End If Try Using writer As New IO . StreamWriter ( filepath , True ) writer . WriteLine ( MyDate & \" - \" & FaultTextToAddToLog . ToString ) End Using Catch e As System . IO . IOException End Try End Sub ' Second timer countdown Public Sub SecondTick () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc/AlarmsAndNotifications.vb"},{"location":"mainsystem/Files/AlarmsAndNotifications_8vb/#githubsignallingsystemehmr-signalling-systemmiscalarmsandnotificationsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc/AlarmsAndNotifications.vb"},{"location":"mainsystem/Files/AlarmsAndNotifications_8vb/#source-code","text":"Public Module AlarmsAndNotifications ' Log File Public ReadOnly MyDate As Date = Now ' Get current date Public ReadOnly DaysInMonth As Integer = Date . DaysInMonth ( MyDate . Year , MyDate . Month ) ' Get amount if days in current month Public ReadOnly LastDayInMonthDate As Date = New Date ( MyDate . Year , MyDate . Month , DaysInMonth ) ' Get the number of the last day in the month Public ReadOnly theMonth As String = DateTime . Now . ToString ( \"MMMM\" ) ' Get current month Public ReadOnly theYear As String = DateTime . Now . ToString ( \"yyyy\" ) ' Get current year ' Add Fault to log file Public Sub UpdateSystemLog ( FaultTextToAddToLog As String ) Dim filepath As String = GlobalConfig . config . LogPath & \"\\EHMR Log File \" & theMonth & \" \" & theYear & \".txt\" If Not System . IO . File . Exists ( filepath ) Then System . IO . File . Create ( filepath ). Dispose () End If Try Using writer As New IO . StreamWriter ( filepath , True ) writer . WriteLine ( MyDate & \" - \" & FaultTextToAddToLog . ToString ) End Using Catch e As System . IO . IOException End Try End Sub ' Second timer countdown Public Sub SecondTick () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/AnalogIOManager_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/AnalogIOManager.vb \u00b6 Source code \u00b6 Public Module AnalogIOManager Public ActualAnalogValue ( 64 ) As Double Public PlaceHolder As String Public ReadOnly AnalogInputPointReturnNormal () As Integer = { 33 , 35 , 37 , 39 , 41 , 43 , 45 , 47 , 49 , 51 } Public ReadOnly AnalogInputPointReturnReverse () As Integer = { 34 , 36 , 38 , 40 , 42 , 44 , 46 , 48 , 50 , 52 } Public ReadOnly AnalogInputPointSections () As Integer = { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 } Public Sub Logic () Dim x As Integer = 1 Dim y As Integer = 1 Do Until x = 65 PlaceHolder = ( Serial . DataReadInputAnalogArray ( y ) & \".\" & Serial . DataReadInputAnalogArray ( y + 1 )) ActualAnalogValue ( x ) = ( Math . Round ( CDbl ( Val ( PlaceHolder )), 2 )) x = x + 1 y = y + 2 Loop End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/AnalogIOManager.vb"},{"location":"mainsystem/Files/AnalogIOManager_8vb/#githubsignallingsystemehmr-signalling-systemdevicesanalogiomanagervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/AnalogIOManager.vb"},{"location":"mainsystem/Files/AnalogIOManager_8vb/#source-code","text":"Public Module AnalogIOManager Public ActualAnalogValue ( 64 ) As Double Public PlaceHolder As String Public ReadOnly AnalogInputPointReturnNormal () As Integer = { 33 , 35 , 37 , 39 , 41 , 43 , 45 , 47 , 49 , 51 } Public ReadOnly AnalogInputPointReturnReverse () As Integer = { 34 , 36 , 38 , 40 , 42 , 44 , 46 , 48 , 50 , 52 } Public ReadOnly AnalogInputPointSections () As Integer = { 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 } Public Sub Logic () Dim x As Integer = 1 Dim y As Integer = 1 Do Until x = 65 PlaceHolder = ( Serial . DataReadInputAnalogArray ( y ) & \".\" & Serial . DataReadInputAnalogArray ( y + 1 )) ActualAnalogValue ( x ) = ( Math . Round ( CDbl ( Val ( PlaceHolder )), 2 )) x = x + 1 y = y + 2 Loop End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/AppServer_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Web/AppServer.vb \u00b6 Source code \u00b6 Imports System . Net . Sockets Imports System . Text Imports System . Threading Module AppServer Sub MyBackgroundThread () Do TCPRequest () Loop End Sub ReadOnly ThreadTCPRequest As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThreadTCP () ThreadTCPRequest . Start () End Sub Public Sub EndThreadTCP () ThreadTCPRequest . Suspend () End Sub Sub TCPRequest () ' Must listen on correct port - must be same as port client wants to connect on . Const portNumber As Integer = 801 Dim tcpListener As New TcpListener ( portNumber ) tcpListener . Start () ' Console . WriteLine ( \"Waiting for connection...\" ) Try ' ------ Accept the pending client connection and return ' ------ a TcpClient initialized for communication . Dim tcpClient As TcpClient = tcpListener . AcceptTcpClient () ' tcpClient . ReceiveTimeout = 7200000 ' Console . WriteLine ( \"Connection accepted.\" ) ' ----- Get the stream Dim networkStream As NetworkStream = tcpClient . GetStream () ' ----- Read the stream into a byte array Dim bytes ( tcpClient . ReceiveBufferSize ) As Byte networkStream . Read ( bytes , 0 , CInt ( tcpClient . ReceiveBufferSize )) ' ----- Return the data received from the client to the console . Dim clientdata As String = Encoding . ASCII . GetString ( bytes ) ' Console . WriteLine (( \"Client sent: \" + clientdata )) Dim UserName As String Dim Password As String Dim Device As String Dim DeviceState As String Dim EndCheck As String Dim split = clientdata . Split ( \":\" ) If ( split . Count = 5 ) Then UserName = split ( 0 ). ToString () Password = split ( 1 ). ToString () Device = split ( 2 ). ToString () DeviceState = split ( 3 ). ToString () EndCheck = split ( 4 ). ToString () End If Dim responseString As String = UpdateSettings . TCPUpdateSetting ( UserName , Password , Device , DeviceState ) Dim sendBytes As [ Byte ]() = Encoding . ASCII . GetBytes ( responseString ) networkStream . Write ( sendBytes , 0 , sendBytes . Length ) ' Console . WriteLine (( \"Message Sent /> : \" + clientdata )) ' responseString )) ' Any communication with the remote client using the TcpClient can go here . ' Close TcpListener and TcpClient . tcpClient . Close () tcpListener . Stop () ' Console . WriteLine ( \"exit\" ) ' Console . ReadLine () Catch e As Exception tcpListener . Stop () ' TelegramMessageSender . sendMessage ( TelegramMessageSender . SoftwareFaults , e . ToString ()) ' Console . ReadLine () Updater . UpdateNow () End Try End Sub Public Sub StopThread () ThreadTCPRequest . Suspend () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Web/AppServer.vb"},{"location":"mainsystem/Files/AppServer_8vb/#githubsignallingsystemehmr-signalling-systemwebappservervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Web/AppServer.vb"},{"location":"mainsystem/Files/AppServer_8vb/#source-code","text":"Imports System . Net . Sockets Imports System . Text Imports System . Threading Module AppServer Sub MyBackgroundThread () Do TCPRequest () Loop End Sub ReadOnly ThreadTCPRequest As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThreadTCP () ThreadTCPRequest . Start () End Sub Public Sub EndThreadTCP () ThreadTCPRequest . Suspend () End Sub Sub TCPRequest () ' Must listen on correct port - must be same as port client wants to connect on . Const portNumber As Integer = 801 Dim tcpListener As New TcpListener ( portNumber ) tcpListener . Start () ' Console . WriteLine ( \"Waiting for connection...\" ) Try ' ------ Accept the pending client connection and return ' ------ a TcpClient initialized for communication . Dim tcpClient As TcpClient = tcpListener . AcceptTcpClient () ' tcpClient . ReceiveTimeout = 7200000 ' Console . WriteLine ( \"Connection accepted.\" ) ' ----- Get the stream Dim networkStream As NetworkStream = tcpClient . GetStream () ' ----- Read the stream into a byte array Dim bytes ( tcpClient . ReceiveBufferSize ) As Byte networkStream . Read ( bytes , 0 , CInt ( tcpClient . ReceiveBufferSize )) ' ----- Return the data received from the client to the console . Dim clientdata As String = Encoding . ASCII . GetString ( bytes ) ' Console . WriteLine (( \"Client sent: \" + clientdata )) Dim UserName As String Dim Password As String Dim Device As String Dim DeviceState As String Dim EndCheck As String Dim split = clientdata . Split ( \":\" ) If ( split . Count = 5 ) Then UserName = split ( 0 ). ToString () Password = split ( 1 ). ToString () Device = split ( 2 ). ToString () DeviceState = split ( 3 ). ToString () EndCheck = split ( 4 ). ToString () End If Dim responseString As String = UpdateSettings . TCPUpdateSetting ( UserName , Password , Device , DeviceState ) Dim sendBytes As [ Byte ]() = Encoding . ASCII . GetBytes ( responseString ) networkStream . Write ( sendBytes , 0 , sendBytes . Length ) ' Console . WriteLine (( \"Message Sent /> : \" + clientdata )) ' responseString )) ' Any communication with the remote client using the TcpClient can go here . ' Close TcpListener and TcpClient . tcpClient . Close () tcpListener . Stop () ' Console . WriteLine ( \"exit\" ) ' Console . ReadLine () Catch e As Exception tcpListener . Stop () ' TelegramMessageSender . sendMessage ( TelegramMessageSender . SoftwareFaults , e . ToString ()) ' Console . ReadLine () Updater . UpdateNow () End Try End Sub Public Sub StopThread () ThreadTCPRequest . Suspend () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ApplicationEvents_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/ApplicationEvents.vb \u00b6 Source code \u00b6 # Disable Warning CA1707 ' Identifiers should not contain underscores Namespace My ' The following events are available for MyApplication : ' Startup : Raised when the application starts , before the startup form is created . ' Shutdown : Raised after all application forms are closed . This event is not raised if the application terminates abnormally . ' UnhandledException : Raised if the application encounters an unhandled exception . ' StartupNextInstance : Raised when launching a single - instance application and the application is already active . ' NetworkAvailabilityChanged : Raised when the network connection is connected or disconnected . Partial Friend Class MyApplication End Class End Namespace # Enable Warning CA1707 ' Identifiers should not contain underscores Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/ApplicationEvents.vb"},{"location":"mainsystem/Files/ApplicationEvents_8vb/#githubsignallingsystemehmr-signalling-systemapplicationeventsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/ApplicationEvents.vb"},{"location":"mainsystem/Files/ApplicationEvents_8vb/#source-code","text":"# Disable Warning CA1707 ' Identifiers should not contain underscores Namespace My ' The following events are available for MyApplication : ' Startup : Raised when the application starts , before the startup form is created . ' Shutdown : Raised after all application forms are closed . This event is not raised if the application terminates abnormally . ' UnhandledException : Raised if the application encounters an unhandled exception . ' StartupNextInstance : Raised when launching a single - instance application and the application is already active . ' NetworkAvailabilityChanged : Raised when the network connection is connected or disconnected . Partial Friend Class MyApplication End Class End Namespace # Enable Warning CA1707 ' Identifiers should not contain underscores Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/BlockSections_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/BlockSections.vb \u00b6 Source code \u00b6 Module BlockTrackSection ' EastBound ' AJ1E Function BlockSafeAJ1EtoAJ16E () If ( Points . PointReturns ( PointNames . P6a )) = PointInReverse And ( TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False ) Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ1EtoAJ18E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ1EtoSiding () If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False Then Return False Else Return True End If End Function ' AJ2E Function BlockSafeAJ2EtoAJ16E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Or ( Points . PointReturns ( PointNames . P11 )) = PointInNormal And ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False ) Then Return False Else Return True End If End Function ' AJ3E Function BlockSafeAJ3EtoAJ4E () If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then Return False Else Return True End If End Function ' AJ4E Function BlockSafeAJ4EtoAJ7E () If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ4EtoAJ21E () If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False Then Return False Else Return True End If End Function ' AJ7E Function BlockSafeAJ7EtoAJ1E () If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then Return False Else Return True End If End Function ' AJ8E Function BlockSafeAJ8EtoAJ3E () If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False And TunnelSafe = True And CrossingSafe = True Then Return False Else Return True End If End Function ' AJ9E Function BlockSafeAJ9EtoAJ17E () If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ9EtoSiding () If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then Return False Else Return True End If End Function ' AJ15W ' AJ16E Function BlockSafeAJ16EtoAJ8E () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ16EtoSiding () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then Return False Else Return True End If End Function ' AJ17E Function BlockSafeAJ17EtoAJ2E () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = False Then Return False Else Return True End If End Function ' AJ18E Function BlockSafeAJ18EtoAJ9E () If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then Return False Else Return True End If End Function ' AJ21E Function BlockSafeAJ21EtoAJ16E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Or ( Points . PointReturns ( PointNames . P11 )) = PointInNormal And ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False ) Then Return False Else Return True End If End Function Function BlockSafeAJ21EtoAJ18E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Or ( PointReturns ( PointNames . P5a ) = PointInNormal Or ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False )) Then Return False Else Return True End If End Function End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/BlockSections.vb"},{"location":"mainsystem/Files/BlockSections_8vb/#githubsignallingsystemehmr-signalling-systemlogicblocksectionsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/BlockSections.vb"},{"location":"mainsystem/Files/BlockSections_8vb/#source-code","text":"Module BlockTrackSection ' EastBound ' AJ1E Function BlockSafeAJ1EtoAJ16E () If ( Points . PointReturns ( PointNames . P6a )) = PointInReverse And ( TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False ) Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ1EtoAJ18E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ1EtoSiding () If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False Then Return False Else Return True End If End Function ' AJ2E Function BlockSafeAJ2EtoAJ16E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Or ( Points . PointReturns ( PointNames . P11 )) = PointInNormal And ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False ) Then Return False Else Return True End If End Function ' AJ3E Function BlockSafeAJ3EtoAJ4E () If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then Return False Else Return True End If End Function ' AJ4E Function BlockSafeAJ4EtoAJ7E () If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ4EtoAJ21E () If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False Then Return False Else Return True End If End Function ' AJ7E Function BlockSafeAJ7EtoAJ1E () If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then Return False Else Return True End If End Function ' AJ8E Function BlockSafeAJ8EtoAJ3E () If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False And TunnelSafe = True And CrossingSafe = True Then Return False Else Return True End If End Function ' AJ9E Function BlockSafeAJ9EtoAJ17E () If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ9EtoSiding () If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then Return False Else Return True End If End Function ' AJ15W ' AJ16E Function BlockSafeAJ16EtoAJ8E () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then Return False Else Return True End If End Function Function BlockSafeAJ16EtoSiding () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then Return False Else Return True End If End Function ' AJ17E Function BlockSafeAJ17EtoAJ2E () If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Or TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = False Then Return False Else Return True End If End Function ' AJ18E Function BlockSafeAJ18EtoAJ9E () If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then Return False Else Return True End If End Function ' AJ21E Function BlockSafeAJ21EtoAJ16E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Or ( Points . PointReturns ( PointNames . P11 )) = PointInNormal And ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False ) Then Return False Else Return True End If End Function Function BlockSafeAJ21EtoAJ18E () If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Or ( PointReturns ( PointNames . P5a ) = PointInNormal Or ( PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False )) Then Return False Else Return True End If End Function End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Buttons_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Buttons.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Buttons Public ReadOnly ButtonCount As Integer = 40 Public ReadOnly buttonDescriptions () As String = { \"Error\" , \"EB Platform 1 - Inner\" , \"EB Platform 1 - Outer\" , \"EB Platform 1 - Headshunt\" , \"EB Platform 1 - Extension\" , \"EB Platform 1 - EngineShed\" , \"EB Platform 1 - Foxhole\" , \"WB Platform 1 - Tunnel\" , \"WB Platform 1 - Extension\" , \"WB Platform 1 - TurnTable\" , \"EB Platform 2 - Inner\" , \"EB Platform 2 - Outer\" , \"EB Platform 3 - Outer\" , \"EB Platform 2 - Extension\" , \"EB Platform 2 - EngineShed\" , \"EB Platform 2 - Foxhole\" , \"WB Platform 2 - Tunnel\" , \"WB Platform 2 - Extension\" , \"Remote Platform 1 - TRTS\" , \"Remote Platform 2 - TRTS\" , \"Engine Shed - Request\" , \"TurnTable - Request\" , \"HeadShunt - Request\" , \"FoxHole - Request\" , \"Platform Controller - TRTS\" , \"Platform Controller - Enable Manual\" , \"NOT USED\" , \"Platform Controller - P1 Approach\" , \"Platform Controller - P2 Approach\" , \"Platform Controller - AUX 1\" , \"Platform Controller - AUX 2\" , \"Platform Controller - AUX 3\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" } Public ButtonIndicatorLight () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , False , False , False , False , False , False , False , False } Public ButtonRequestError () As Integer = { 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 } Public ButtonHold () As Integer = { 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 } Public ButtonFlash () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public ButtonToggle () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public ButtonRequest () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub ButtonsLogic () ButtonErrors () If Initializations . ButtonsInitiated = True Then ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 1 - 1 )) = 1 And ButtonHold ( ButtonNames . Button1 ) = 0 Then ButtonHold ( ButtonNames . Button1 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button1 = False Else ButtonToggle ( ButtonNames . Button1 ) = True End If End If If ButtonToggle ( ButtonNames . Button1 ) = True Then If ButtonRequest ( ButtonNames . Button1 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button1 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ1EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button1 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button1 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 2 - 1 )) = 1 And ButtonHold ( ButtonNames . Button2 ) = 0 Then ButtonHold ( ButtonNames . Button2 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button2 = False Else ButtonToggle ( ButtonNames . Button2 ) = True End If End If If ButtonToggle ( ButtonNames . Button2 ) = True Then If ButtonRequest ( ButtonNames . Button2 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button2 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button2 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button2 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 3 - 1 )) = 1 And ButtonHold ( ButtonNames . Button3 ) = 0 Then ButtonHold ( ButtonNames . Button3 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button3 = False Else ButtonToggle ( ButtonNames . Button3 ) = True End If End If If ButtonToggle ( ButtonNames . Button3 ) = True Then If ButtonRequest ( ButtonNames . Button3 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button3 ) = False Bell = BellRequestCouncil BackLockAJ1EtoSiding = SignalBackLockSignalCouncilViaButton Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button3 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button3 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 4 - 1 )) = 1 And ButtonHold ( ButtonNames . Button4 ) = 0 Then ButtonHold ( ButtonNames . Button4 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button4 = False Else ButtonToggle ( ButtonNames . Button4 ) = True End If End If If ButtonToggle ( ButtonNames . Button4 ) = True Then If ButtonRequest ( ButtonNames . Button4 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button4 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionG = False Or Device . SectionH = False ) And Device . EastBound = True Then Button4Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button4 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 5 - 1 )) = 1 And ButtonHold ( ButtonNames . Button5 ) = 0 Then ButtonHold ( ButtonNames . Button5 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button5 = False Else ButtonToggle ( ButtonNames . Button5 ) = True End If End If If ButtonToggle ( ButtonNames . Button5 ) = True Then If ButtonRequest ( ButtonNames . Button5 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button5 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button5 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button5 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 6 - 1 )) = 1 And ButtonHold ( ButtonNames . Button6 ) = 0 Then ButtonHold ( ButtonNames . Button6 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Then ' Button6 = False Else ButtonToggle ( ButtonNames . Button6 ) = True End If End If If ButtonToggle ( ButtonNames . Button6 ) = True Then If ButtonRequest ( ButtonNames . Button6 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button6 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ1EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button6 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button6 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 7 - 1 )) = 1 And ButtonHold ( ButtonNames . Button7 ) = 0 Then ButtonHold ( ButtonNames . Button7 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button8 ) Or ButtonRequest ( ButtonNames . Button9 ) Then ' Button7 = False Else ButtonToggle ( ButtonNames . Button7 ) = True End If End If If ButtonToggle ( ButtonNames . Button7 ) = True Then If ButtonRequest ( ButtonNames . Button7 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button7 ) = False Bell = BellRequestCouncil AJ3WReset = True BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) Then ButtonRequest ( ButtonNames . Button7 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button7 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 8 - 1 )) = 1 And ButtonHold ( ButtonNames . Button8 ) = 0 Then ButtonHold ( ButtonNames . Button8 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button7 ) Or ButtonRequest ( ButtonNames . Button9 ) Then ' Button8 = False Else ButtonToggle ( ButtonNames . Button8 ) = True End If End If If ButtonToggle ( ButtonNames . Button8 ) = True Then If ButtonRequest ( ButtonNames . Button8 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button8 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionG = False Or Device . SectionH = False ) And Device . westBound = True Then Button8Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button8 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 9 - 1 )) = 1 And ButtonHold ( ButtonNames . Button9 ) = 0 Then ButtonHold ( ButtonNames . Button9 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button7 ) Or ButtonRequest ( ButtonNames . Button8 ) Then ' Button9 = False Else ButtonToggle ( ButtonNames . Button9 ) = True End If End If If ButtonToggle ( ButtonNames . Button9 ) = True Then If ButtonRequest ( ButtonNames . Button9 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button9 ) = False Bell = BellRequestCouncil BackLockAJ15WtoSiding = SignalBackLockSignalCouncilViaButton Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then ButtonRequest ( ButtonNames . Button9 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button9 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel Platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 10 - 1 )) = 1 And ButtonHold ( ButtonNames . Button10 ) = 0 Then ButtonHold ( ButtonNames . Button10 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button10 = False Else ButtonToggle ( ButtonNames . Button10 ) = True End If End If If ButtonToggle ( ButtonNames . Button10 ) = True Then If ButtonRequest ( ButtonNames . Button10 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button10 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ21EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button10 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button10 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 11 - 1 )) = 1 And ButtonHold ( ButtonNames . Button11 ) = 0 Then ButtonHold ( ButtonNames . Button11 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button11 = False Else ButtonToggle ( ButtonNames . Button11 ) = True End If End If If ButtonToggle ( ButtonNames . Button11 ) = True Then If ButtonRequest ( ButtonNames . Button11 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button11 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button11 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button11 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 12 - 1 )) = 1 And ButtonHold ( ButtonNames . Button12 ) = 0 Then ButtonHold ( ButtonNames . Button12 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button12 = False Else ButtonToggle ( ButtonNames . Button12 ) = True End If End If If ButtonToggle ( ButtonNames . Button12 ) = True Then If ButtonRequest ( ButtonNames . Button12 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button12 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionI = False ) And Device . eastBound = True Then Button12Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button12 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 13 - 1 )) = 1 And ButtonHold ( ButtonNames . Button13 ) = 0 Then ButtonHold ( ButtonNames . Button13 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button13 = False Else ButtonToggle ( ButtonNames . Button13 ) = True End If End If If ButtonToggle ( ButtonNames . Button13 ) = True Then If ButtonRequest ( ButtonNames . Button13 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button13 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button13 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button13 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 14 - 1 )) = 1 And ButtonHold ( ButtonNames . Button14 ) = 0 Then ButtonHold ( ButtonNames . Button14 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Then ' Button14 = False Else ButtonToggle ( ButtonNames . Button14 ) = True End If End If If ButtonToggle ( ButtonNames . Button14 ) = True Then If ButtonRequest ( ButtonNames . Button14 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button14 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ21EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button14 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button14 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 15 - 1 )) = 1 And ButtonHold ( ButtonNames . Button15 ) = 0 Then ButtonHold ( ButtonNames . Button15 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button16 ) Then ' Button15 = False Else ButtonToggle ( ButtonNames . Button15 ) = True End If End If If ButtonToggle ( ButtonNames . Button15 ) = True Then If ButtonRequest ( ButtonNames . Button15 ) = True Then LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button15 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And WestBound = True Then ButtonRequest ( ButtonNames . Button15 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button15 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 16 - 1 )) = 1 And ButtonHold ( ButtonNames . Button16 ) = 0 Then ButtonHold ( ButtonNames . Button16 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button15 ) Then ' Button16 = False Else ButtonToggle ( ButtonNames . Button16 ) = True End If End If If ButtonToggle ( ButtonNames . Button16 ) = True Then If ButtonRequest ( ButtonNames . Button16 ) = True Then LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button16 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionI = False ) And Device . westBound = True Then Button16Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button16 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons Remote platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 17 - 1 )) = 1 And ButtonHold ( ButtonNames . Button17 ) = 0 Then ButtonHold ( ButtonNames . Button17 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button17 ) = True End If If ButtonToggle ( ButtonNames . Button17 ) = True Then If ButtonRequest ( ButtonNames . Button17 ) = True Then LogicStart . AJ1EReset = True LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button17 ) = False Bell = BellRequestCouncil BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton If AJ18EInner = True Then AJ18EReset = True End If If AJ3WOuter = True Then AJ3WReset = True End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button17 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button17 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons Remote platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 18 - 1 )) = 1 And ButtonHold ( ButtonNames . Button18 ) = 0 Then ButtonHold ( ButtonNames . Button18 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button18 ) = True End If If ButtonToggle ( ButtonNames . Button18 ) = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then LogicStart . AJ21EReset = True LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button18 ) = False Bell = BellRequestCouncil Else ' If Device . SectionI = False Then Button18Request = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button18 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Engine shed road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 19 - 1 )) = 1 And ButtonHold ( ButtonNames . Button19 ) = 0 Then ButtonHold ( ButtonNames . Button19 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button19 ) = True End If If ButtonToggle ( ButtonNames . Button19 ) = True Then If ButtonRequest ( ButtonNames . Button19 ) = True Then LogicStart . S19Reset = True ButtonRequest ( ButtonNames . Button19 ) = False Bell = BellRequestCouncil BackLockS19Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button19 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button19 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for TurnTable road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 20 - 1 )) = 1 And ButtonHold ( ButtonNames . Button20 ) = 0 Then ButtonHold ( ButtonNames . Button20 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button20 ) = True End If If ButtonToggle ( ButtonNames . Button20 ) = True Then If ButtonRequest ( ButtonNames . Button20 ) = True Then LogicStart . S12Reset = True ButtonRequest ( ButtonNames . Button20 ) = False Bell = BellRequestCouncil BackLockS12Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button20 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button20 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for HeadShunt road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 21 - 1 )) = 1 And ButtonHold ( ButtonNames . Button21 ) = 0 Then ButtonHold ( ButtonNames . Button21 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button21 ) = True End If If ButtonToggle ( ButtonNames . Button21 ) = True Then If ButtonRequest ( ButtonNames . Button21 ) = True Then LogicStart . S11Reset = True ButtonRequest ( ButtonNames . Button21 ) = False Bell = BellRequestCouncil BackLockS11Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button21 ) = True ' - ------------------------------------------------------------------------------------------------------------------- Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button21 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Foxhole road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 22 - 1 )) = 1 And ButtonHold ( ButtonNames . Button22 ) = 0 Then ButtonHold ( ButtonNames . Button22 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button22 ) = True End If If ButtonToggle ( ButtonNames . Button22 ) = True Then If ButtonRequest ( ButtonNames . Button22 ) = True Then LogicStart . S14Reset = True ButtonRequest ( ButtonNames . Button22 ) = False Bell = BellRequestCouncil BackLockS14Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button22 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button22 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 23 - 1 )) = 1 And ButtonHold ( ButtonNames . Button23 ) = 0 Then ButtonHold ( ButtonNames . Button23 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button23 ) = True End If If ButtonToggle ( ButtonNames . Button23 ) = True Then If ButtonRequest ( ButtonNames . Button23 ) = True Then LogicStart . AJ1EReset = True LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button23 ) = False Bell = BellRequestCouncil BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton If AJ18EInner = True Then AJ18EReset = True End If If AJ3WOuter = True Then AJ3WReset = True End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button23 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button23 ) = False End If ' Call On Buttons If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 25 - 1 )) = 1 And ButtonHold ( ButtonNames . Button25 ) = 0 Then ButtonHold ( ButtonNames . Button25 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button25 ) = True End If If ButtonToggle ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button25 ) = False Else ButtonRequest ( ButtonNames . Button25 ) = True End If ButtonToggle ( ButtonNames . Button25 ) = False End If If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then ButtonFlash ( ButtonNames . Button25 ) = False Else ButtonFlash ( ButtonNames . Button25 ) = True End If If EastBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 26 - 1 )) = 1 And ButtonHold ( ButtonNames . Button26 ) = 0 And ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) Then ButtonHold ( ButtonNames . Button26 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button26 ) = True End If ElseIf WestBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 26 - 1 )) = 1 And ButtonHold ( ButtonNames . Button26 ) = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then ButtonHold ( ButtonNames . Button26 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button26 ) = True End If End If If ButtonToggle ( ButtonNames . Button26 ) = True Then If EastBound Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = False LogicStart . AJ4EPlatform1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = True End If ElseIf WestBound Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = False LogicStart . AJ18WPlatform1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = True End If End If ButtonToggle ( ButtonNames . Button26 ) = False End If If EastBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 27 - 1 )) = 1 And ButtonHold ( ButtonNames . Button27 ) = 0 And ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) Then ButtonHold ( ButtonNames . Button27 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button27 ) = True End If ElseIf WestBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 27 - 1 )) = 1 And ButtonHold ( ButtonNames . Button27 ) = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then ButtonHold ( ButtonNames . Button27 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button27 ) = True End If End If If ButtonToggle ( ButtonNames . Button27 ) = True Then If EastBound Then If ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = False LogicStart . AJ4EPlatform2 = False Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = True End If ElseIf WestBound Then If ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = False LogicStart . AJ18WPlatform2 = False Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = True End If End If ButtonToggle ( ButtonNames . Button27 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' AUX Sounds ' AUX 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 28 - 1 )) = 1 And ButtonHold ( ButtonNames . Button28 ) = 0 Then ButtonHold ( ButtonNames . Button28 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button28 ) = True End If If ButtonToggle ( ButtonNames . Button28 ) = True Then If ButtonRequest ( ButtonNames . Button28 ) = True Then ButtonRequest ( ButtonNames . Button28 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound1 () ButtonRequest ( ButtonNames . Button28 ) = True End If End If ButtonToggle ( ButtonNames . Button28 ) = False End If ' AUX 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 29 - 1 )) = 1 And ButtonHold ( ButtonNames . Button29 ) = 0 Then ButtonHold ( ButtonNames . Button29 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button29 ) = True End If If ButtonToggle ( ButtonNames . Button29 ) = True Then If ButtonRequest ( ButtonNames . Button29 ) = True Then ButtonRequest ( ButtonNames . Button29 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound2 () ButtonRequest ( ButtonNames . Button29 ) = True End If End If ButtonToggle ( ButtonNames . Button29 ) = False End If ' AUX 3 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 30 - 1 )) = 1 And ButtonHold ( ButtonNames . Button30 ) = 0 Then ButtonHold ( ButtonNames . Button30 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button30 ) = True End If If ButtonToggle ( ButtonNames . Button30 ) = True Then If ButtonRequest ( ButtonNames . Button30 ) = True Then ButtonRequest ( ButtonNames . Button30 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound3 () ButtonRequest ( ButtonNames . Button30 ) = True End If End If ButtonToggle ( ButtonNames . Button30 ) = False End If Else For i As Integer = 0 To ButtonCount - 1 ButtonRequest ( i ) = False ' Clear all requests if buttons not initilized Next End If End Sub ' Button Indicators Public Sub ButtonIndicators () If Points . TestMode = True Then For i As Integer = 0 To ButtonCount - 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 ' Illuminate all buttons Next Else ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel platform 1 ' Button 1 If ButtonHold ( ButtonNames . Button1 ) = 0 Then If EastBound = True Then If ( ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button1 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button1 ) = Not ButtonIndicatorLight ( ButtonNames . Button1 ) End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 1 End If ' Button 2 If ButtonHold ( ButtonNames . Button2 ) = 0 Then If ButtonRequest ( ButtonNames . Button2 ) = True Then If ButtonFlash ( ButtonNames . Button2 ) = False Then ButtonIndicatorLight ( ButtonNames . Button2 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button2 ) = Not ButtonIndicatorLight ( ButtonNames . Button2 ) End If Else ButtonIndicatorLight ( ButtonNames . Button2 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button2 ) = 1 End If ' Button 3 If ButtonHold ( ButtonNames . Button3 ) = 0 Then If ButtonRequest ( ButtonNames . Button3 ) = True Then If ButtonFlash ( ButtonNames . Button3 ) = False Then ButtonIndicatorLight ( ButtonNames . Button3 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button3 ) = Not ButtonIndicatorLight ( ButtonNames . Button3 ) End If Else ButtonIndicatorLight ( ButtonNames . Button3 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button3 ) = 1 End If ' Button 4 If ButtonHold ( ButtonNames . Button4 ) = 0 Then If ButtonRequest ( ButtonNames . Button4 ) = True Then If ButtonFlash ( ButtonNames . Button4 ) = False Then ButtonIndicatorLight ( ButtonNames . Button4 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button4 ) = Not ButtonIndicatorLight ( ButtonNames . Button4 ) End If Else ButtonIndicatorLight ( ButtonNames . Button4 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button4 ) = 1 End If ' Button 5 If ButtonHold ( ButtonNames . Button5 ) = 0 Then If ButtonRequest ( ButtonNames . Button5 ) = True Then If ButtonFlash ( ButtonNames . Button5 ) = False Then ButtonIndicatorLight ( ButtonNames . Button5 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button5 ) = Not ButtonIndicatorLight ( ButtonNames . Button5 ) End If Else ButtonIndicatorLight ( ButtonNames . Button5 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button5 ) = 1 End If ' Button 6 If ButtonHold ( ButtonNames . Button6 ) = 0 Then If ButtonRequest ( ButtonNames . Button6 ) = True Then If ButtonFlash ( ButtonNames . Button6 ) = False Then ButtonIndicatorLight ( ButtonNames . Button6 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button6 ) = Not ButtonIndicatorLight ( ButtonNames . Button6 ) End If Else ButtonIndicatorLight ( ButtonNames . Button6 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button6 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 1 ' Button 7 If ButtonHold ( ButtonNames . Button7 ) = 0 Then If WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button7 ) = Not ButtonIndicatorLight ( ButtonNames . Button7 ) End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If ElseIf EastBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button7 ) = Not ButtonIndicatorLight ( ButtonNames . Button7 ) End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 End If ' Button 8 If ButtonHold ( ButtonNames . Button8 ) = 0 Then If ButtonRequest ( ButtonNames . Button8 ) = True Then If ButtonFlash ( ButtonNames . Button8 ) = False Then ButtonIndicatorLight ( ButtonNames . Button8 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button8 ) = Not ButtonIndicatorLight ( ButtonNames . Button8 ) End If Else ButtonIndicatorLight ( ButtonNames . Button8 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button8 ) = 1 End If ' Button 9 If ButtonHold ( ButtonNames . Button9 ) = 0 Then If ButtonRequest ( ButtonNames . Button9 ) = True Then If ButtonFlash ( ButtonNames . Button9 ) = False Then ButtonIndicatorLight ( ButtonNames . Button9 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button9 ) = Not ButtonIndicatorLight ( ButtonNames . Button9 ) End If Else ButtonIndicatorLight ( ButtonNames . Button9 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button9 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel Platform 2 ' Button 10 If ButtonHold ( ButtonNames . Button10 ) = 0 Then If ButtonRequest ( ButtonNames . Button10 ) = True Then If ButtonFlash ( ButtonNames . Button10 ) = False Then ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button10 ) = Not ButtonIndicatorLight ( ButtonNames . Button10 ) End If Else ButtonIndicatorLight ( ButtonNames . Button10 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 End If ' Button 11 If ButtonHold ( ButtonNames . Button11 ) = 0 Then If ButtonRequest ( ButtonNames . Button11 ) = True Then If ButtonFlash ( ButtonNames . Button11 ) = False Then ButtonIndicatorLight ( ButtonNames . Button11 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button11 ) = Not ButtonIndicatorLight ( ButtonNames . Button11 ) End If Else ButtonIndicatorLight ( ButtonNames . Button11 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button11 ) = 1 End If ' Button 12 If ButtonHold ( ButtonNames . Button12 ) = 0 Then If ButtonRequest ( ButtonNames . Button12 ) = True Then If ButtonFlash ( ButtonNames . Button12 ) = False Then ButtonIndicatorLight ( ButtonNames . Button12 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button12 ) = Not ButtonIndicatorLight ( ButtonNames . Button12 ) End If Else ButtonIndicatorLight ( ButtonNames . Button12 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button12 ) = 1 End If ' Button 13 If ButtonHold ( ButtonNames . Button13 ) = 0 Then If ButtonRequest ( ButtonNames . Button13 ) = True Then If ButtonFlash ( ButtonNames . Button13 ) = False Then ButtonIndicatorLight ( ButtonNames . Button13 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button13 ) = Not ButtonIndicatorLight ( ButtonNames . Button13 ) End If Else ButtonIndicatorLight ( ButtonNames . Button13 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button13 ) = 1 End If ' Button 14 If ButtonHold ( ButtonNames . Button14 ) = 0 Then If ButtonRequest ( ButtonNames . Button14 ) = True Then If ButtonFlash ( ButtonNames . Button14 ) = False Then ButtonIndicatorLight ( ButtonNames . Button14 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button14 ) = Not ButtonIndicatorLight ( ButtonNames . Button14 ) End If Else ButtonIndicatorLight ( ButtonNames . Button14 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button14 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 2 ' Button 15 If ButtonHold ( ButtonNames . Button15 ) = 0 Then If ButtonRequest ( ButtonNames . Button15 ) = True Then If ButtonFlash ( ButtonNames . Button15 ) = False Then ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button15 ) = Not ButtonIndicatorLight ( ButtonNames . Button15 ) End If Else ButtonIndicatorLight ( ButtonNames . Button15 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 End If ' Button 16 If ButtonHold ( ButtonNames . Button16 ) = 0 Then If ButtonRequest ( ButtonNames . Button16 ) = True Then If ButtonFlash ( ButtonNames . Button16 ) = False Then ButtonIndicatorLight ( ButtonNames . Button16 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button16 ) = Not ButtonIndicatorLight ( ButtonNames . Button16 ) End If Else ButtonIndicatorLight ( ButtonNames . Button16 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button16 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If ButtonHold ( ButtonNames . Button17 ) = 0 Then If EastBound = True Then If ( ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button17 ) = Not ButtonIndicatorLight ( ButtonNames . Button17 ) End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If ElseIf WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button17 ) = Not ButtonIndicatorLight ( ButtonNames . Button17 ) End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 2 ' Button 18 If ButtonHold ( ButtonNames . Button18 ) = 0 Then If EastBound = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 ButtonRequest ( ButtonNames . Button18 ) = False End If ButtonIndicatorLight ( ButtonNames . Button18 ) = ButtonIndicatorLight ( ButtonNames . Button10 ) ElseIf WestBound = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 ButtonRequest ( ButtonNames . Button18 ) = False End If ButtonIndicatorLight ( ButtonNames . Button18 ) = ButtonIndicatorLight ( ButtonNames . Button15 ) Else End If Else ButtonIndicatorLight ( ButtonNames . Button18 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Engine shed road ' Button 19 If ButtonHold ( ButtonNames . Button19 ) = 0 Then If ButtonRequest ( ButtonNames . Button19 ) = True Then If ButtonFlash ( ButtonNames . Button19 ) = False Then ButtonIndicatorLight ( ButtonNames . Button19 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button19 ) = Not ButtonIndicatorLight ( ButtonNames . Button19 ) End If Else ButtonIndicatorLight ( ButtonNames . Button19 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button19 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for TurnTable road ' Button 20 If ButtonHold ( ButtonNames . Button20 ) = 0 Then If ButtonRequest ( ButtonNames . Button20 ) = True Then If ButtonFlash ( ButtonNames . Button20 ) = False Then ButtonIndicatorLight ( ButtonNames . Button20 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button20 ) = Not ButtonIndicatorLight ( ButtonNames . Button20 ) End If Else ButtonIndicatorLight ( ButtonNames . Button20 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button20 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for HeadShunt road ' Button 21 If ButtonHold ( ButtonNames . Button21 ) = 0 Then If ButtonRequest ( ButtonNames . Button21 ) = True Then If ButtonFlash ( ButtonNames . Button21 ) = False Then ButtonIndicatorLight ( ButtonNames . Button21 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button21 ) = Not ButtonIndicatorLight ( ButtonNames . Button21 ) End If Else ButtonIndicatorLight ( ButtonNames . Button21 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button21 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Foxhole road ' Button 22 If ButtonHold ( ButtonNames . Button22 ) = 0 Then If ButtonRequest ( ButtonNames . Button22 ) = True Then If ButtonFlash ( ButtonNames . Button22 ) = False Then ButtonIndicatorLight ( ButtonNames . Button22 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button22 ) = Not ButtonIndicatorLight ( ButtonNames . Button22 ) End If Else ButtonIndicatorLight ( ButtonNames . Button22 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button22 ) = 1 End If ' Not used yet ButtonIndicatorLight ( ButtonNames . Button24 ) = 0 ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If ButtonHold ( ButtonNames . Button23 ) = 0 Then If EastBound = True Then If ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button23 ) = False Then ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button23 ) = Not ButtonIndicatorLight ( ButtonNames . Button23 ) End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If ElseIf WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button23 ) = False Then ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button23 ) = Not ButtonIndicatorLight ( ButtonNames . Button23 ) End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 End If ' Buttons for Calling On ' Button 25 If ButtonHold ( ButtonNames . Button25 ) = 0 Then If ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonFlash ( ButtonNames . Button25 ) = False Then ButtonIndicatorLight ( ButtonNames . Button25 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button25 ) = Not ButtonIndicatorLight ( ButtonNames . Button25 ) End If Else ButtonIndicatorLight ( ButtonNames . Button25 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button25 ) = 1 End If ' Button 26 and 27 If EastBound Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) And ( TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True ) And ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonIndicatorLight ( ButtonNames . Button26 ) = 1 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 ElseIf ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonIndicatorLight ( ButtonNames . Button27 ) = 1 ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 Else ButtonIndicatorLight ( ButtonNames . Button26 ) = Not ButtonIndicatorLight ( ButtonNames . Button26 ) ButtonIndicatorLight ( ButtonNames . Button27 ) = Not ButtonIndicatorLight ( ButtonNames . Button27 ) Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 1 End If Else ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 End If ElseIf WestBound Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False ) And ( TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True ) And ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonIndicatorLight ( ButtonNames . Button26 ) = 1 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 ElseIf ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonIndicatorLight ( ButtonNames . Button27 ) = 1 ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 Else ButtonIndicatorLight ( ButtonNames . Button26 ) = Not ButtonIndicatorLight ( ButtonNames . Button26 ) ButtonIndicatorLight ( ButtonNames . Button27 ) = Not ButtonIndicatorLight ( ButtonNames . Button27 ) Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 1 End If Else ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 End If End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' AUX Sounds ' Button 28 If ButtonHold ( ButtonNames . Button28 ) = 0 Then If ButtonRequest ( ButtonNames . Button28 ) = True Then If ButtonFlash ( ButtonNames . Button28 ) = False Then ButtonIndicatorLight ( ButtonNames . Button28 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button28 ) = Not ButtonIndicatorLight ( ButtonNames . Button28 ) End If Else ButtonIndicatorLight ( ButtonNames . Button28 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button28 ) = 1 End If ' Button 29 If ButtonHold ( ButtonNames . Button29 ) = 0 Then If ButtonRequest ( ButtonNames . Button29 ) = True Then If ButtonFlash ( ButtonNames . Button29 ) = False Then ButtonIndicatorLight ( ButtonNames . Button29 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button29 ) = Not ButtonIndicatorLight ( ButtonNames . Button29 ) End If Else ButtonIndicatorLight ( ButtonNames . Button29 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button29 ) = 1 End If ' Button 30 If ButtonHold ( ButtonNames . Button30 ) = 0 Then If ButtonRequest ( ButtonNames . Button30 ) = True Then If ButtonFlash ( ButtonNames . Button30 ) = False Then ButtonIndicatorLight ( ButtonNames . Button30 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button30 ) = Not ButtonIndicatorLight ( ButtonNames . Button30 ) End If Else ButtonIndicatorLight ( ButtonNames . Button30 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button30 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Not Used ButtonIndicatorLight ( ButtonNames . Button31 ) = 0 ButtonIndicatorLight ( ButtonNames . Button32 ) = 0 For i As Integer = 0 To ButtonCount - 1 If RuntimeConfig . config . ButtonIndicatorState ( i ) = \"System\" Then If ButtonIndicatorLight ( i ) = 0 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 End If ElseIf RuntimeConfig . config . ButtonIndicatorState ( i ) = \"Off\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 End If Next End If End Sub ' Button Error Detection Public Sub ButtonErrors () For i As Integer = 0 To ButtonCount - 1 If ButtonRequest ( i ) = False Then ButtonRequestError ( i ) = ButttonFaultTime If ButtonRequestError ( i ) = 0 Then Errors . NewError ( \"Button Request \" & i + 1 & \" taking too long\" ) Else Errors . RemoveError ( \"Button Request \" & i + 1 & \" taking too long\" ) End If Next End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To ButtonCount - 1 If Not ButtonHold ( i ) = 0 Then ButtonHold ( i ) -= 1 If Not ButtonRequestError ( i ) = 0 Then ButtonRequestError ( i ) -= 1 Next ' Prevent countdown reaching zero ButtonRequestError ( 25 - 1 ) = 5 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Buttons.vb"},{"location":"mainsystem/Files/Buttons_8vb/#githubsignallingsystemehmr-signalling-systemdevicesbuttonsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Buttons.vb"},{"location":"mainsystem/Files/Buttons_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Buttons Public ReadOnly ButtonCount As Integer = 40 Public ReadOnly buttonDescriptions () As String = { \"Error\" , \"EB Platform 1 - Inner\" , \"EB Platform 1 - Outer\" , \"EB Platform 1 - Headshunt\" , \"EB Platform 1 - Extension\" , \"EB Platform 1 - EngineShed\" , \"EB Platform 1 - Foxhole\" , \"WB Platform 1 - Tunnel\" , \"WB Platform 1 - Extension\" , \"WB Platform 1 - TurnTable\" , \"EB Platform 2 - Inner\" , \"EB Platform 2 - Outer\" , \"EB Platform 3 - Outer\" , \"EB Platform 2 - Extension\" , \"EB Platform 2 - EngineShed\" , \"EB Platform 2 - Foxhole\" , \"WB Platform 2 - Tunnel\" , \"WB Platform 2 - Extension\" , \"Remote Platform 1 - TRTS\" , \"Remote Platform 2 - TRTS\" , \"Engine Shed - Request\" , \"TurnTable - Request\" , \"HeadShunt - Request\" , \"FoxHole - Request\" , \"Platform Controller - TRTS\" , \"Platform Controller - Enable Manual\" , \"NOT USED\" , \"Platform Controller - P1 Approach\" , \"Platform Controller - P2 Approach\" , \"Platform Controller - AUX 1\" , \"Platform Controller - AUX 2\" , \"Platform Controller - AUX 3\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" , \"NOT USED\" } Public ButtonIndicatorLight () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , False , False , False , False , False , False , False , False } Public ButtonRequestError () As Integer = { 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 } Public ButtonHold () As Integer = { 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 } Public ButtonFlash () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public ButtonToggle () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public ButtonRequest () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub ButtonsLogic () ButtonErrors () If Initializations . ButtonsInitiated = True Then ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 1 - 1 )) = 1 And ButtonHold ( ButtonNames . Button1 ) = 0 Then ButtonHold ( ButtonNames . Button1 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button1 = False Else ButtonToggle ( ButtonNames . Button1 ) = True End If End If If ButtonToggle ( ButtonNames . Button1 ) = True Then If ButtonRequest ( ButtonNames . Button1 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button1 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ1EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button1 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button1 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 2 - 1 )) = 1 And ButtonHold ( ButtonNames . Button2 ) = 0 Then ButtonHold ( ButtonNames . Button2 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button2 = False Else ButtonToggle ( ButtonNames . Button2 ) = True End If End If If ButtonToggle ( ButtonNames . Button2 ) = True Then If ButtonRequest ( ButtonNames . Button2 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button2 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button2 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button2 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 3 - 1 )) = 1 And ButtonHold ( ButtonNames . Button3 ) = 0 Then ButtonHold ( ButtonNames . Button3 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button3 = False Else ButtonToggle ( ButtonNames . Button3 ) = True End If End If If ButtonToggle ( ButtonNames . Button3 ) = True Then If ButtonRequest ( ButtonNames . Button3 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button3 ) = False Bell = BellRequestCouncil BackLockAJ1EtoSiding = SignalBackLockSignalCouncilViaButton Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button3 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button3 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 4 - 1 )) = 1 And ButtonHold ( ButtonNames . Button4 ) = 0 Then ButtonHold ( ButtonNames . Button4 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button5 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button4 = False Else ButtonToggle ( ButtonNames . Button4 ) = True End If End If If ButtonToggle ( ButtonNames . Button4 ) = True Then If ButtonRequest ( ButtonNames . Button4 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button4 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionG = False Or Device . SectionH = False ) And Device . EastBound = True Then Button4Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button4 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 5 - 1 )) = 1 And ButtonHold ( ButtonNames . Button5 ) = 0 Then ButtonHold ( ButtonNames . Button5 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button6 ) Then ' Button5 = False Else ButtonToggle ( ButtonNames . Button5 ) = True End If End If If ButtonToggle ( ButtonNames . Button5 ) = True Then If ButtonRequest ( ButtonNames . Button5 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button5 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button5 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button5 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 6 - 1 )) = 1 And ButtonHold ( ButtonNames . Button6 ) = 0 Then ButtonHold ( ButtonNames . Button6 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button1 ) Or ButtonRequest ( ButtonNames . Button2 ) Or ButtonRequest ( ButtonNames . Button3 ) Or ButtonRequest ( ButtonNames . Button4 ) Or ButtonRequest ( ButtonNames . Button5 ) Then ' Button6 = False Else ButtonToggle ( ButtonNames . Button6 ) = True End If End If If ButtonToggle ( ButtonNames . Button6 ) = True Then If ButtonRequest ( ButtonNames . Button6 ) = True Then LogicStart . AJ1EReset = True ButtonRequest ( ButtonNames . Button6 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ1EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button6 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button6 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 7 - 1 )) = 1 And ButtonHold ( ButtonNames . Button7 ) = 0 Then ButtonHold ( ButtonNames . Button7 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button8 ) Or ButtonRequest ( ButtonNames . Button9 ) Then ' Button7 = False Else ButtonToggle ( ButtonNames . Button7 ) = True End If End If If ButtonToggle ( ButtonNames . Button7 ) = True Then If ButtonRequest ( ButtonNames . Button7 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button7 ) = False Bell = BellRequestCouncil AJ3WReset = True BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False ) Then ButtonRequest ( ButtonNames . Button7 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button7 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 8 - 1 )) = 1 And ButtonHold ( ButtonNames . Button8 ) = 0 Then ButtonHold ( ButtonNames . Button8 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button7 ) Or ButtonRequest ( ButtonNames . Button9 ) Then ' Button8 = False Else ButtonToggle ( ButtonNames . Button8 ) = True End If End If If ButtonToggle ( ButtonNames . Button8 ) = True Then If ButtonRequest ( ButtonNames . Button8 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button8 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionG = False Or Device . SectionH = False ) And Device . westBound = True Then Button8Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button8 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 9 - 1 )) = 1 And ButtonHold ( ButtonNames . Button9 ) = 0 Then ButtonHold ( ButtonNames . Button9 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button7 ) Or ButtonRequest ( ButtonNames . Button8 ) Then ' Button9 = False Else ButtonToggle ( ButtonNames . Button9 ) = True End If End If If ButtonToggle ( ButtonNames . Button9 ) = True Then If ButtonRequest ( ButtonNames . Button9 ) = True Then LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button9 ) = False Bell = BellRequestCouncil BackLockAJ15WtoSiding = SignalBackLockSignalCouncilViaButton Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then ButtonRequest ( ButtonNames . Button9 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button9 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel Platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 10 - 1 )) = 1 And ButtonHold ( ButtonNames . Button10 ) = 0 Then ButtonHold ( ButtonNames . Button10 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button10 = False Else ButtonToggle ( ButtonNames . Button10 ) = True End If End If If ButtonToggle ( ButtonNames . Button10 ) = True Then If ButtonRequest ( ButtonNames . Button10 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button10 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ21EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button10 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button10 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 11 - 1 )) = 1 And ButtonHold ( ButtonNames . Button11 ) = 0 Then ButtonHold ( ButtonNames . Button11 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button11 = False Else ButtonToggle ( ButtonNames . Button11 ) = True End If End If If ButtonToggle ( ButtonNames . Button11 ) = True Then If ButtonRequest ( ButtonNames . Button11 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button11 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button11 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button11 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 12 - 1 )) = 1 And ButtonHold ( ButtonNames . Button12 ) = 0 Then ButtonHold ( ButtonNames . Button12 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button13 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button12 = False Else ButtonToggle ( ButtonNames . Button12 ) = True End If End If If ButtonToggle ( ButtonNames . Button12 ) = True Then If ButtonRequest ( ButtonNames . Button12 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button12 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionI = False ) And Device . eastBound = True Then Button12Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button12 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 13 - 1 )) = 1 And ButtonHold ( ButtonNames . Button13 ) = 0 Then ButtonHold ( ButtonNames . Button13 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button14 ) Then ' Button13 = False Else ButtonToggle ( ButtonNames . Button13 ) = True End If End If If ButtonToggle ( ButtonNames . Button13 ) = True Then If ButtonRequest ( ButtonNames . Button13 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button13 ) = False Bell = BellRequestCouncil AJ16EReset = True BackLockAJ21EtoAJ16E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button13 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button13 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 14 - 1 )) = 1 And ButtonHold ( ButtonNames . Button14 ) = 0 Then ButtonHold ( ButtonNames . Button14 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button10 ) Or ButtonRequest ( ButtonNames . Button11 ) Or ButtonRequest ( ButtonNames . Button12 ) Or ButtonRequest ( ButtonNames . Button13 ) Then ' Button14 = False Else ButtonToggle ( ButtonNames . Button14 ) = True End If End If If ButtonToggle ( ButtonNames . Button14 ) = True Then If ButtonRequest ( ButtonNames . Button14 ) = True Then LogicStart . AJ21EReset = True ButtonRequest ( ButtonNames . Button14 ) = False Bell = BellRequestCouncil AJ18EReset = True BackLockAJ21EtoAJ18E = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And EastBound = True Then ButtonRequest ( ButtonNames . Button14 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button14 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 15 - 1 )) = 1 And ButtonHold ( ButtonNames . Button15 ) = 0 Then ButtonHold ( ButtonNames . Button15 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button16 ) Then ' Button15 = False Else ButtonToggle ( ButtonNames . Button15 ) = True End If End If If ButtonToggle ( ButtonNames . Button15 ) = True Then If ButtonRequest ( ButtonNames . Button15 ) = True Then LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button15 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else If ( TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False ) And WestBound = True Then ButtonRequest ( ButtonNames . Button15 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button15 ) = False End If If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 16 - 1 )) = 1 And ButtonHold ( ButtonNames . Button16 ) = 0 Then ButtonHold ( ButtonNames . Button16 ) = ButtonDebounce If ButtonRequest ( ButtonNames . Button15 ) Then ' Button16 = False Else ButtonToggle ( ButtonNames . Button16 ) = True End If End If If ButtonToggle ( ButtonNames . Button16 ) = True Then If ButtonRequest ( ButtonNames . Button16 ) = True Then LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button16 ) = False Bell = BellRequestCouncil BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton Else ' If ( Device . SectionI = False ) And Device . westBound = True Then Button16Request = True Bell = BellRequestError End If ButtonToggle ( ButtonNames . Button16 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons Remote platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 17 - 1 )) = 1 And ButtonHold ( ButtonNames . Button17 ) = 0 Then ButtonHold ( ButtonNames . Button17 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button17 ) = True End If If ButtonToggle ( ButtonNames . Button17 ) = True Then If ButtonRequest ( ButtonNames . Button17 ) = True Then LogicStart . AJ1EReset = True LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button17 ) = False Bell = BellRequestCouncil BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton If AJ18EInner = True Then AJ18EReset = True End If If AJ3WOuter = True Then AJ3WReset = True End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button17 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button17 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons Remote platform 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 18 - 1 )) = 1 And ButtonHold ( ButtonNames . Button18 ) = 0 Then ButtonHold ( ButtonNames . Button18 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button18 ) = True End If If ButtonToggle ( ButtonNames . Button18 ) = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then LogicStart . AJ21EReset = True LogicStart . AJ22WReset = True ButtonRequest ( ButtonNames . Button18 ) = False Bell = BellRequestCouncil Else ' If Device . SectionI = False Then Button18Request = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button18 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Engine shed road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 19 - 1 )) = 1 And ButtonHold ( ButtonNames . Button19 ) = 0 Then ButtonHold ( ButtonNames . Button19 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button19 ) = True End If If ButtonToggle ( ButtonNames . Button19 ) = True Then If ButtonRequest ( ButtonNames . Button19 ) = True Then LogicStart . S19Reset = True ButtonRequest ( ButtonNames . Button19 ) = False Bell = BellRequestCouncil BackLockS19Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button19 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button19 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for TurnTable road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 20 - 1 )) = 1 And ButtonHold ( ButtonNames . Button20 ) = 0 Then ButtonHold ( ButtonNames . Button20 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button20 ) = True End If If ButtonToggle ( ButtonNames . Button20 ) = True Then If ButtonRequest ( ButtonNames . Button20 ) = True Then LogicStart . S12Reset = True ButtonRequest ( ButtonNames . Button20 ) = False Bell = BellRequestCouncil BackLockS12Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button20 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button20 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for HeadShunt road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 21 - 1 )) = 1 And ButtonHold ( ButtonNames . Button21 ) = 0 Then ButtonHold ( ButtonNames . Button21 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button21 ) = True End If If ButtonToggle ( ButtonNames . Button21 ) = True Then If ButtonRequest ( ButtonNames . Button21 ) = True Then LogicStart . S11Reset = True ButtonRequest ( ButtonNames . Button21 ) = False Bell = BellRequestCouncil BackLockS11Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button21 ) = True ' - ------------------------------------------------------------------------------------------------------------------- Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button21 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Foxhole road If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 22 - 1 )) = 1 And ButtonHold ( ButtonNames . Button22 ) = 0 Then ButtonHold ( ButtonNames . Button22 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button22 ) = True End If If ButtonToggle ( ButtonNames . Button22 ) = True Then If ButtonRequest ( ButtonNames . Button22 ) = True Then LogicStart . S14Reset = True ButtonRequest ( ButtonNames . Button22 ) = False Bell = BellRequestCouncil BackLockS14Out = SignalBackLockSignalCouncilViaButton Else ButtonRequest ( ButtonNames . Button22 ) = True Bell = BellRequestShunt End If ButtonToggle ( ButtonNames . Button22 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 23 - 1 )) = 1 And ButtonHold ( ButtonNames . Button23 ) = 0 Then ButtonHold ( ButtonNames . Button23 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button23 ) = True End If If ButtonToggle ( ButtonNames . Button23 ) = True Then If ButtonRequest ( ButtonNames . Button23 ) = True Then LogicStart . AJ1EReset = True LogicStart . AJ15WReset = True ButtonRequest ( ButtonNames . Button23 ) = False Bell = BellRequestCouncil BackLockAJ1EtoAJ16E = SignalBackLockSignalCouncilViaButton BackLockAJ15WtoAJ3W = SignalBackLockSignalCouncilViaButton If AJ18EInner = True Then AJ18EReset = True End If If AJ3WOuter = True Then AJ3WReset = True End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then ButtonRequest ( ButtonNames . Button23 ) = True Bell = BellRequestMainLine End If ButtonToggle ( ButtonNames . Button23 ) = False End If ' Call On Buttons If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 25 - 1 )) = 1 And ButtonHold ( ButtonNames . Button25 ) = 0 Then ButtonHold ( ButtonNames . Button25 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button25 ) = True End If If ButtonToggle ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button25 ) = False Else ButtonRequest ( ButtonNames . Button25 ) = True End If ButtonToggle ( ButtonNames . Button25 ) = False End If If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then ButtonFlash ( ButtonNames . Button25 ) = False Else ButtonFlash ( ButtonNames . Button25 ) = True End If If EastBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 26 - 1 )) = 1 And ButtonHold ( ButtonNames . Button26 ) = 0 And ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) Then ButtonHold ( ButtonNames . Button26 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button26 ) = True End If ElseIf WestBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 26 - 1 )) = 1 And ButtonHold ( ButtonNames . Button26 ) = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then ButtonHold ( ButtonNames . Button26 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button26 ) = True End If End If If ButtonToggle ( ButtonNames . Button26 ) = True Then If EastBound Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = False LogicStart . AJ4EPlatform1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = True End If ElseIf WestBound Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = False LogicStart . AJ18WPlatform1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button26 ) = True End If End If ButtonToggle ( ButtonNames . Button26 ) = False End If If EastBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 27 - 1 )) = 1 And ButtonHold ( ButtonNames . Button27 ) = 0 And ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) Then ButtonHold ( ButtonNames . Button27 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button27 ) = True End If ElseIf WestBound = True Then If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 27 - 1 )) = 1 And ButtonHold ( ButtonNames . Button27 ) = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then ButtonHold ( ButtonNames . Button27 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button27 ) = True End If End If If ButtonToggle ( ButtonNames . Button27 ) = True Then If EastBound Then If ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = False LogicStart . AJ4EPlatform2 = False Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = True End If ElseIf WestBound Then If ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = False LogicStart . AJ18WPlatform2 = False Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled ElseIf ButtonRequest ( ButtonNames . Button25 ) = True Then ButtonRequest ( ButtonNames . Button27 ) = True End If End If ButtonToggle ( ButtonNames . Button27 ) = False End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' AUX Sounds ' AUX 1 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 28 - 1 )) = 1 And ButtonHold ( ButtonNames . Button28 ) = 0 Then ButtonHold ( ButtonNames . Button28 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button28 ) = True End If If ButtonToggle ( ButtonNames . Button28 ) = True Then If ButtonRequest ( ButtonNames . Button28 ) = True Then ButtonRequest ( ButtonNames . Button28 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound1 () ButtonRequest ( ButtonNames . Button28 ) = True End If End If ButtonToggle ( ButtonNames . Button28 ) = False End If ' AUX 2 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 29 - 1 )) = 1 And ButtonHold ( ButtonNames . Button29 ) = 0 Then ButtonHold ( ButtonNames . Button29 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button29 ) = True End If If ButtonToggle ( ButtonNames . Button29 ) = True Then If ButtonRequest ( ButtonNames . Button29 ) = True Then ButtonRequest ( ButtonNames . Button29 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound2 () ButtonRequest ( ButtonNames . Button29 ) = True End If End If ButtonToggle ( ButtonNames . Button29 ) = False End If ' AUX 3 If Serial . DataReadInputsArray ( DigitalDeviceAddress . InputAddressButton ( 30 - 1 )) = 1 And ButtonHold ( ButtonNames . Button30 ) = 0 Then ButtonHold ( ButtonNames . Button30 ) = ButtonDebounce ButtonToggle ( ButtonNames . Button30 ) = True End If If ButtonToggle ( ButtonNames . Button30 ) = True Then If ButtonRequest ( ButtonNames . Button30 ) = True Then ButtonRequest ( ButtonNames . Button30 ) = False Else If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then Sound . AUXSound3 () ButtonRequest ( ButtonNames . Button30 ) = True End If End If ButtonToggle ( ButtonNames . Button30 ) = False End If Else For i As Integer = 0 To ButtonCount - 1 ButtonRequest ( i ) = False ' Clear all requests if buttons not initilized Next End If End Sub ' Button Indicators Public Sub ButtonIndicators () If Points . TestMode = True Then For i As Integer = 0 To ButtonCount - 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 ' Illuminate all buttons Next Else ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel platform 1 ' Button 1 If ButtonHold ( ButtonNames . Button1 ) = 0 Then If EastBound = True Then If ( ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button1 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button1 ) = Not ButtonIndicatorLight ( ButtonNames . Button1 ) End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button1 ) = 1 End If ' Button 2 If ButtonHold ( ButtonNames . Button2 ) = 0 Then If ButtonRequest ( ButtonNames . Button2 ) = True Then If ButtonFlash ( ButtonNames . Button2 ) = False Then ButtonIndicatorLight ( ButtonNames . Button2 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button2 ) = Not ButtonIndicatorLight ( ButtonNames . Button2 ) End If Else ButtonIndicatorLight ( ButtonNames . Button2 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button2 ) = 1 End If ' Button 3 If ButtonHold ( ButtonNames . Button3 ) = 0 Then If ButtonRequest ( ButtonNames . Button3 ) = True Then If ButtonFlash ( ButtonNames . Button3 ) = False Then ButtonIndicatorLight ( ButtonNames . Button3 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button3 ) = Not ButtonIndicatorLight ( ButtonNames . Button3 ) End If Else ButtonIndicatorLight ( ButtonNames . Button3 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button3 ) = 1 End If ' Button 4 If ButtonHold ( ButtonNames . Button4 ) = 0 Then If ButtonRequest ( ButtonNames . Button4 ) = True Then If ButtonFlash ( ButtonNames . Button4 ) = False Then ButtonIndicatorLight ( ButtonNames . Button4 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button4 ) = Not ButtonIndicatorLight ( ButtonNames . Button4 ) End If Else ButtonIndicatorLight ( ButtonNames . Button4 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button4 ) = 1 End If ' Button 5 If ButtonHold ( ButtonNames . Button5 ) = 0 Then If ButtonRequest ( ButtonNames . Button5 ) = True Then If ButtonFlash ( ButtonNames . Button5 ) = False Then ButtonIndicatorLight ( ButtonNames . Button5 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button5 ) = Not ButtonIndicatorLight ( ButtonNames . Button5 ) End If Else ButtonIndicatorLight ( ButtonNames . Button5 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button5 ) = 1 End If ' Button 6 If ButtonHold ( ButtonNames . Button6 ) = 0 Then If ButtonRequest ( ButtonNames . Button6 ) = True Then If ButtonFlash ( ButtonNames . Button6 ) = False Then ButtonIndicatorLight ( ButtonNames . Button6 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button6 ) = Not ButtonIndicatorLight ( ButtonNames . Button6 ) End If Else ButtonIndicatorLight ( ButtonNames . Button6 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button6 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 1 ' Button 7 If ButtonHold ( ButtonNames . Button7 ) = 0 Then If WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button7 ) = Not ButtonIndicatorLight ( ButtonNames . Button7 ) End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If ElseIf EastBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button7 ) = Not ButtonIndicatorLight ( ButtonNames . Button7 ) End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button7 ) = 1 End If ' Button 8 If ButtonHold ( ButtonNames . Button8 ) = 0 Then If ButtonRequest ( ButtonNames . Button8 ) = True Then If ButtonFlash ( ButtonNames . Button8 ) = False Then ButtonIndicatorLight ( ButtonNames . Button8 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button8 ) = Not ButtonIndicatorLight ( ButtonNames . Button8 ) End If Else ButtonIndicatorLight ( ButtonNames . Button8 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button8 ) = 1 End If ' Button 9 If ButtonHold ( ButtonNames . Button9 ) = 0 Then If ButtonRequest ( ButtonNames . Button9 ) = True Then If ButtonFlash ( ButtonNames . Button9 ) = False Then ButtonIndicatorLight ( ButtonNames . Button9 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button9 ) = Not ButtonIndicatorLight ( ButtonNames . Button9 ) End If Else ButtonIndicatorLight ( ButtonNames . Button9 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button9 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for East end of station panel Platform 2 ' Button 10 If ButtonHold ( ButtonNames . Button10 ) = 0 Then If ButtonRequest ( ButtonNames . Button10 ) = True Then If ButtonFlash ( ButtonNames . Button10 ) = False Then ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button10 ) = Not ButtonIndicatorLight ( ButtonNames . Button10 ) End If Else ButtonIndicatorLight ( ButtonNames . Button10 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 End If ' Button 11 If ButtonHold ( ButtonNames . Button11 ) = 0 Then If ButtonRequest ( ButtonNames . Button11 ) = True Then If ButtonFlash ( ButtonNames . Button11 ) = False Then ButtonIndicatorLight ( ButtonNames . Button11 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button11 ) = Not ButtonIndicatorLight ( ButtonNames . Button11 ) End If Else ButtonIndicatorLight ( ButtonNames . Button11 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button11 ) = 1 End If ' Button 12 If ButtonHold ( ButtonNames . Button12 ) = 0 Then If ButtonRequest ( ButtonNames . Button12 ) = True Then If ButtonFlash ( ButtonNames . Button12 ) = False Then ButtonIndicatorLight ( ButtonNames . Button12 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button12 ) = Not ButtonIndicatorLight ( ButtonNames . Button12 ) End If Else ButtonIndicatorLight ( ButtonNames . Button12 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button12 ) = 1 End If ' Button 13 If ButtonHold ( ButtonNames . Button13 ) = 0 Then If ButtonRequest ( ButtonNames . Button13 ) = True Then If ButtonFlash ( ButtonNames . Button13 ) = False Then ButtonIndicatorLight ( ButtonNames . Button13 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button13 ) = Not ButtonIndicatorLight ( ButtonNames . Button13 ) End If Else ButtonIndicatorLight ( ButtonNames . Button13 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button13 ) = 1 End If ' Button 14 If ButtonHold ( ButtonNames . Button14 ) = 0 Then If ButtonRequest ( ButtonNames . Button14 ) = True Then If ButtonFlash ( ButtonNames . Button14 ) = False Then ButtonIndicatorLight ( ButtonNames . Button14 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button14 ) = Not ButtonIndicatorLight ( ButtonNames . Button14 ) End If Else ButtonIndicatorLight ( ButtonNames . Button14 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button14 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for West end of station panel platform 2 ' Button 15 If ButtonHold ( ButtonNames . Button15 ) = 0 Then If ButtonRequest ( ButtonNames . Button15 ) = True Then If ButtonFlash ( ButtonNames . Button15 ) = False Then ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button15 ) = Not ButtonIndicatorLight ( ButtonNames . Button15 ) End If Else ButtonIndicatorLight ( ButtonNames . Button15 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 End If ' Button 16 If ButtonHold ( ButtonNames . Button16 ) = 0 Then If ButtonRequest ( ButtonNames . Button16 ) = True Then If ButtonFlash ( ButtonNames . Button16 ) = False Then ButtonIndicatorLight ( ButtonNames . Button16 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button16 ) = Not ButtonIndicatorLight ( ButtonNames . Button16 ) End If Else ButtonIndicatorLight ( ButtonNames . Button16 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button16 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If ButtonHold ( ButtonNames . Button17 ) = 0 Then If EastBound = True Then If ( ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button17 ) = Not ButtonIndicatorLight ( ButtonNames . Button17 ) End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If ElseIf WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button17 ) = False Then ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button17 ) = Not ButtonIndicatorLight ( ButtonNames . Button17 ) End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button17 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 2 ' Button 18 If ButtonHold ( ButtonNames . Button18 ) = 0 Then If EastBound = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then ButtonIndicatorLight ( ButtonNames . Button10 ) = 1 ButtonRequest ( ButtonNames . Button18 ) = False End If ButtonIndicatorLight ( ButtonNames . Button18 ) = ButtonIndicatorLight ( ButtonNames . Button10 ) ElseIf WestBound = True Then If ButtonRequest ( ButtonNames . Button18 ) = True Then ButtonIndicatorLight ( ButtonNames . Button15 ) = 1 ButtonRequest ( ButtonNames . Button18 ) = False End If ButtonIndicatorLight ( ButtonNames . Button18 ) = ButtonIndicatorLight ( ButtonNames . Button15 ) Else End If Else ButtonIndicatorLight ( ButtonNames . Button18 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Engine shed road ' Button 19 If ButtonHold ( ButtonNames . Button19 ) = 0 Then If ButtonRequest ( ButtonNames . Button19 ) = True Then If ButtonFlash ( ButtonNames . Button19 ) = False Then ButtonIndicatorLight ( ButtonNames . Button19 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button19 ) = Not ButtonIndicatorLight ( ButtonNames . Button19 ) End If Else ButtonIndicatorLight ( ButtonNames . Button19 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button19 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for TurnTable road ' Button 20 If ButtonHold ( ButtonNames . Button20 ) = 0 Then If ButtonRequest ( ButtonNames . Button20 ) = True Then If ButtonFlash ( ButtonNames . Button20 ) = False Then ButtonIndicatorLight ( ButtonNames . Button20 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button20 ) = Not ButtonIndicatorLight ( ButtonNames . Button20 ) End If Else ButtonIndicatorLight ( ButtonNames . Button20 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button20 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for HeadShunt road ' Button 21 If ButtonHold ( ButtonNames . Button21 ) = 0 Then If ButtonRequest ( ButtonNames . Button21 ) = True Then If ButtonFlash ( ButtonNames . Button21 ) = False Then ButtonIndicatorLight ( ButtonNames . Button21 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button21 ) = Not ButtonIndicatorLight ( ButtonNames . Button21 ) End If Else ButtonIndicatorLight ( ButtonNames . Button21 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button21 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for Foxhole road ' Button 22 If ButtonHold ( ButtonNames . Button22 ) = 0 Then If ButtonRequest ( ButtonNames . Button22 ) = True Then If ButtonFlash ( ButtonNames . Button22 ) = False Then ButtonIndicatorLight ( ButtonNames . Button22 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button22 ) = Not ButtonIndicatorLight ( ButtonNames . Button22 ) End If Else ButtonIndicatorLight ( ButtonNames . Button22 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button22 ) = 1 End If ' Not used yet ButtonIndicatorLight ( ButtonNames . Button24 ) = 0 ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Buttons for middle of station panel platform 1 If ButtonHold ( ButtonNames . Button23 ) = 0 Then If EastBound = True Then If ButtonRequest ( ButtonNames . Button1 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True Then If ButtonFlash ( ButtonNames . Button1 ) = False And ButtonFlash ( ButtonNames . Button23 ) = False Then ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button23 ) = Not ButtonIndicatorLight ( ButtonNames . Button23 ) End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If ElseIf WestBound = True Then If ( ButtonRequest ( ButtonNames . Button7 ) = True Or ButtonRequest ( ButtonNames . Button23 ) = True Or ButtonRequest ( ButtonNames . Button17 ) = True ) Then If ButtonFlash ( ButtonNames . Button7 ) = False And ButtonFlash ( ButtonNames . Button23 ) = False Then ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button23 ) = Not ButtonIndicatorLight ( ButtonNames . Button23 ) End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button23 ) = 1 End If ' Buttons for Calling On ' Button 25 If ButtonHold ( ButtonNames . Button25 ) = 0 Then If ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonFlash ( ButtonNames . Button25 ) = False Then ButtonIndicatorLight ( ButtonNames . Button25 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button25 ) = Not ButtonIndicatorLight ( ButtonNames . Button25 ) End If Else ButtonIndicatorLight ( ButtonNames . Button25 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button25 ) = 1 End If ' Button 26 and 27 If EastBound Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Or TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = False ) And ( TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True ) And ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonIndicatorLight ( ButtonNames . Button26 ) = 1 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 ElseIf ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonIndicatorLight ( ButtonNames . Button27 ) = 1 ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 Else ButtonIndicatorLight ( ButtonNames . Button26 ) = Not ButtonIndicatorLight ( ButtonNames . Button26 ) ButtonIndicatorLight ( ButtonNames . Button27 ) = Not ButtonIndicatorLight ( ButtonNames . Button27 ) Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 1 End If Else ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 End If ElseIf WestBound Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False ) And ( TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True ) And ButtonRequest ( ButtonNames . Button25 ) = True Then If ButtonRequest ( ButtonNames . Button26 ) = True Then ButtonIndicatorLight ( ButtonNames . Button26 ) = 1 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 ElseIf ButtonRequest ( ButtonNames . Button27 ) = True Then ButtonIndicatorLight ( ButtonNames . Button27 ) = 1 ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 Else ButtonIndicatorLight ( ButtonNames . Button26 ) = Not ButtonIndicatorLight ( ButtonNames . Button26 ) ButtonIndicatorLight ( ButtonNames . Button27 ) = Not ButtonIndicatorLight ( ButtonNames . Button27 ) Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 1 End If Else ButtonIndicatorLight ( ButtonNames . Button26 ) = 0 ButtonIndicatorLight ( ButtonNames . Button27 ) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCallInBuzzer ) = 0 End If End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' AUX Sounds ' Button 28 If ButtonHold ( ButtonNames . Button28 ) = 0 Then If ButtonRequest ( ButtonNames . Button28 ) = True Then If ButtonFlash ( ButtonNames . Button28 ) = False Then ButtonIndicatorLight ( ButtonNames . Button28 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button28 ) = Not ButtonIndicatorLight ( ButtonNames . Button28 ) End If Else ButtonIndicatorLight ( ButtonNames . Button28 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button28 ) = 1 End If ' Button 29 If ButtonHold ( ButtonNames . Button29 ) = 0 Then If ButtonRequest ( ButtonNames . Button29 ) = True Then If ButtonFlash ( ButtonNames . Button29 ) = False Then ButtonIndicatorLight ( ButtonNames . Button29 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button29 ) = Not ButtonIndicatorLight ( ButtonNames . Button29 ) End If Else ButtonIndicatorLight ( ButtonNames . Button29 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button29 ) = 1 End If ' Button 30 If ButtonHold ( ButtonNames . Button30 ) = 0 Then If ButtonRequest ( ButtonNames . Button30 ) = True Then If ButtonFlash ( ButtonNames . Button30 ) = False Then ButtonIndicatorLight ( ButtonNames . Button30 ) = 1 Else ButtonIndicatorLight ( ButtonNames . Button30 ) = Not ButtonIndicatorLight ( ButtonNames . Button30 ) End If Else ButtonIndicatorLight ( ButtonNames . Button30 ) = 0 End If Else ButtonIndicatorLight ( ButtonNames . Button30 ) = 1 End If ' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ' Not Used ButtonIndicatorLight ( ButtonNames . Button31 ) = 0 ButtonIndicatorLight ( ButtonNames . Button32 ) = 0 For i As Integer = 0 To ButtonCount - 1 If RuntimeConfig . config . ButtonIndicatorState ( i ) = \"System\" Then If ButtonIndicatorLight ( i ) = 0 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 End If ElseIf RuntimeConfig . config . ButtonIndicatorState ( i ) = \"Off\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( i )) = 1 End If Next End If End Sub ' Button Error Detection Public Sub ButtonErrors () For i As Integer = 0 To ButtonCount - 1 If ButtonRequest ( i ) = False Then ButtonRequestError ( i ) = ButttonFaultTime If ButtonRequestError ( i ) = 0 Then Errors . NewError ( \"Button Request \" & i + 1 & \" taking too long\" ) Else Errors . RemoveError ( \"Button Request \" & i + 1 & \" taking too long\" ) End If Next End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To ButtonCount - 1 If Not ButtonHold ( i ) = 0 Then ButtonHold ( i ) -= 1 If Not ButtonRequestError ( i ) = 0 Then ButtonRequestError ( i ) -= 1 Next ' Prevent countdown reaching zero ButtonRequestError ( 25 - 1 ) = 5 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigCrossing_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigCrossing.vb \u00b6 Source code \u00b6 Module ConfigCrossing ' Update Crossing Info Public Sub UpdateCrossingInfo () ' Overall If LineSide . CrossingSafe = True Then Configs . LabelCrossingSafe . Text = \" SAFE\" Configs . LabelCrossingSafe . BackColor = Configs . OnState Else Configs . LabelCrossingSafe . Text = \"UNSAFE\" Configs . LabelCrossingSafe . BackColor = Configs . OffState End If ' Sensor 1 If Configs . ComboBoxCrossingSensor1 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor1 . Text = RuntimeConfig . config . OutterGateOutSensor If RuntimeConfig . config . OutterGateOutSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor1State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor1State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor1State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor1State . BackColor = Configs . NoneNormalSetting End If ' Sensor 2 If Configs . ComboBoxCrossingSensor2 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor2 . Text = RuntimeConfig . config . OutterGateInSensor If RuntimeConfig . config . OutterGateInSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor2State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor2State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor2State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor2State . BackColor = Configs . NoneNormalSetting End If ' Sensor 3 If Configs . ComboBoxCrossingSensor3 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor3 . Text = RuntimeConfig . config . InnerGateOutSensor If RuntimeConfig . config . InnerGateOutSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor3State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor3State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor3State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor3State . BackColor = Configs . NoneNormalSetting End If ' Sensor 4 If Configs . ComboBoxCrossingSensor4 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor4 . Text = RuntimeConfig . config . InnerGateInSensor If RuntimeConfig . config . InnerGateInSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor4State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) Then Configs . LabelCrossingSensor4State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor4State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor4State . BackColor = Configs . NoneNormalSetting End If ' Buzzer If Configs . ComboBoxCrossingBuzzer . SelectedIndex = - 1 Then Configs . ComboBoxCrossingBuzzer . Text = RuntimeConfig . config . LevelCrossingWarningBuzzer End Sub ' TimerTick Public Sub TimerTick () UpdateCrossingInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigCrossing.vb"},{"location":"mainsystem/Files/ConfigCrossing_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigcrossingvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigCrossing.vb"},{"location":"mainsystem/Files/ConfigCrossing_8vb/#source-code","text":"Module ConfigCrossing ' Update Crossing Info Public Sub UpdateCrossingInfo () ' Overall If LineSide . CrossingSafe = True Then Configs . LabelCrossingSafe . Text = \" SAFE\" Configs . LabelCrossingSafe . BackColor = Configs . OnState Else Configs . LabelCrossingSafe . Text = \"UNSAFE\" Configs . LabelCrossingSafe . BackColor = Configs . OffState End If ' Sensor 1 If Configs . ComboBoxCrossingSensor1 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor1 . Text = RuntimeConfig . config . OutterGateOutSensor If RuntimeConfig . config . OutterGateOutSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor1State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor1State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor1State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor1State . BackColor = Configs . NoneNormalSetting End If ' Sensor 2 If Configs . ComboBoxCrossingSensor2 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor2 . Text = RuntimeConfig . config . OutterGateInSensor If RuntimeConfig . config . OutterGateInSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor2State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor2State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor2State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor2State . BackColor = Configs . NoneNormalSetting End If ' Sensor 3 If Configs . ComboBoxCrossingSensor3 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor3 . Text = RuntimeConfig . config . InnerGateOutSensor If RuntimeConfig . config . InnerGateOutSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor3State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 1 Then Configs . LabelCrossingSensor3State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor3State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor3State . BackColor = Configs . NoneNormalSetting End If ' Sensor 4 If Configs . ComboBoxCrossingSensor4 . SelectedIndex = - 1 Then Configs . ComboBoxCrossingSensor4 . Text = RuntimeConfig . config . InnerGateInSensor If RuntimeConfig . config . InnerGateInSensor = \"System\" Then If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 Then Configs . LabelCrossingSensor4State . BackColor = Configs . OnState ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) Then Configs . LabelCrossingSensor4State . BackColor = Configs . OffState Else Configs . LabelCrossingSensor4State . BackColor = Configs . OffState End If Else Configs . LabelCrossingSensor4State . BackColor = Configs . NoneNormalSetting End If ' Buzzer If Configs . ComboBoxCrossingBuzzer . SelectedIndex = - 1 Then Configs . ComboBoxCrossingBuzzer . Text = RuntimeConfig . config . LevelCrossingWarningBuzzer End Sub ' TimerTick Public Sub TimerTick () UpdateCrossingInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigLevers_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigLevers.vb \u00b6 Source code \u00b6 Module Configlevers ' Update signal setting Public Sub ChangeleverOutput ( UpdateToState As String ) RuntimeConfig . config . LeverLock ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever OutPut \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeleverInput ( UpdateToState As String ) RuntimeConfig . config . LeverState ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever InPut \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeleverAutoRestroke ( UpdateToState As Boolean ) RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever Auto Restroke \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public LeverHasRestrokeSetting () As Boolean = { True , True , True , True , False , False , True , True , True , False , False , False , False , False , True , True , True , True , False , False , True , True , False , False } Public Sub UpdateleverInfo () If Configs . ComboBoxLever . SelectedIndex = - 1 Then Configs . ButtonleverInputSystem . Enabled = False Configs . ButtonleverInputNormal . Enabled = False Configs . ButtonLeversInputReverse . Enabled = False Configs . ButtonLeversInputNoInput . Enabled = False Configs . ButtonleverOutputSystem . Enabled = False Configs . ButtonLeverOutputLock . Enabled = False Configs . ButtonLeverOutputRelease . Enabled = False Else Configs . ButtonleverInputSystem . Enabled = True Configs . ButtonleverInputNormal . Enabled = True Configs . ButtonLeversInputReverse . Enabled = True Configs . ButtonLeversInputNoInput . Enabled = True Configs . ButtonleverOutputSystem . Enabled = True Configs . ButtonLeverOutputLock . Enabled = True Configs . ButtonLeverOutputRelease . Enabled = True End If If Configs . ComboBoxLever . SelectedIndex = - 1 Then Configs . LabelleverInputSetting . Text = \"lever Input Setting : \" Configs . LabelleverOutputSetting . Text = \"lever Output Setting : \" Configs . LabelleverInputFieldState . Text = \"lever Input Field State : \" Configs . LabelleverOutputFieldState . Text = \"lever Output Field State : \" Configs . LabelleverInputLogicState . Text = \"lever Input Logic State : \" Configs . LabelleverOutputLogicState . Text = \"lever Output Logic State : \" Configs . LabelLeverAutoRestrokeSetting . Text = \"lever Auto Restroke Setting : \" Else Configs . LabelLeverInputSetting . Text = \"lever Input Setting : \" & RuntimeConfig . config . LeverState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputSetting . Text = \"lever Output Setting : \" & RuntimeConfig . config . LeverLock ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverInputFieldState . Text = \"lever Input Field State : \" & Levers . LeverFrameState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputFieldState . Text = \"lever Output Field State : \" & Levers . LeverFrameState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverInputLogicState . Text = \"lever Input Logic State : \" & Levers . Lever ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputLogicState . Text = \"lever Output Logic State : \" & Levers . LeverlockState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverAutoRestrokeSetting . Text = \"lever Auto Restroke Setting : \" & RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) End If If Not Configs . ComboBoxLever . SelectedIndex = - 1 Then If LeverHasRestrokeSetting ( Configs . ComboBoxLever . SelectedIndex ) = True Then Configs . ButtonLeverAutoRestroke . Enabled = True If RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) = True Then Configs . ButtonLeverAutoRestroke . Text = \"Enabled\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Configs . WarningSetting Else Configs . ButtonLeverAutoRestroke . Text = \"Disabled\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If Else Configs . ButtonLeverAutoRestroke . Enabled = False Configs . ButtonLeverAutoRestroke . Text = \"N / A\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If Else Configs . ButtonLeverAutoRestroke . Enabled = False Configs . ButtonLeverAutoRestroke . Text = \"N / A\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If If Configs . LabelleverInputSetting . Text = \"lever Input Setting : System\" Or Configs . LabelleverInputSetting . Text = \"lever Input Setting : \" Then Configs . LabelleverInputSetting . BackColor = Color . Transparent Else Configs . LabelleverInputSetting . BackColor = Configs . NoneNormalSetting End If If Configs . LabelleverOutputSetting . Text = \"lever Output Setting : System\" Or Configs . LabelleverOutputSetting . Text = \"lever Output Setting : \" Then Configs . LabelleverOutputSetting . BackColor = Color . Transparent Else Configs . LabelleverOutputSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateleverInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigLevers.vb"},{"location":"mainsystem/Files/ConfigLevers_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigleversvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigLevers.vb"},{"location":"mainsystem/Files/ConfigLevers_8vb/#source-code","text":"Module Configlevers ' Update signal setting Public Sub ChangeleverOutput ( UpdateToState As String ) RuntimeConfig . config . LeverLock ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever OutPut \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeleverInput ( UpdateToState As String ) RuntimeConfig . config . LeverState ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever InPut \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeleverAutoRestroke ( UpdateToState As Boolean ) RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated lever Auto Restroke \" & Configs . ComboBoxLever . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public LeverHasRestrokeSetting () As Boolean = { True , True , True , True , False , False , True , True , True , False , False , False , False , False , True , True , True , True , False , False , True , True , False , False } Public Sub UpdateleverInfo () If Configs . ComboBoxLever . SelectedIndex = - 1 Then Configs . ButtonleverInputSystem . Enabled = False Configs . ButtonleverInputNormal . Enabled = False Configs . ButtonLeversInputReverse . Enabled = False Configs . ButtonLeversInputNoInput . Enabled = False Configs . ButtonleverOutputSystem . Enabled = False Configs . ButtonLeverOutputLock . Enabled = False Configs . ButtonLeverOutputRelease . Enabled = False Else Configs . ButtonleverInputSystem . Enabled = True Configs . ButtonleverInputNormal . Enabled = True Configs . ButtonLeversInputReverse . Enabled = True Configs . ButtonLeversInputNoInput . Enabled = True Configs . ButtonleverOutputSystem . Enabled = True Configs . ButtonLeverOutputLock . Enabled = True Configs . ButtonLeverOutputRelease . Enabled = True End If If Configs . ComboBoxLever . SelectedIndex = - 1 Then Configs . LabelleverInputSetting . Text = \"lever Input Setting : \" Configs . LabelleverOutputSetting . Text = \"lever Output Setting : \" Configs . LabelleverInputFieldState . Text = \"lever Input Field State : \" Configs . LabelleverOutputFieldState . Text = \"lever Output Field State : \" Configs . LabelleverInputLogicState . Text = \"lever Input Logic State : \" Configs . LabelleverOutputLogicState . Text = \"lever Output Logic State : \" Configs . LabelLeverAutoRestrokeSetting . Text = \"lever Auto Restroke Setting : \" Else Configs . LabelLeverInputSetting . Text = \"lever Input Setting : \" & RuntimeConfig . config . LeverState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputSetting . Text = \"lever Output Setting : \" & RuntimeConfig . config . LeverLock ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverInputFieldState . Text = \"lever Input Field State : \" & Levers . LeverFrameState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputFieldState . Text = \"lever Output Field State : \" & Levers . LeverFrameState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverInputLogicState . Text = \"lever Input Logic State : \" & Levers . Lever ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverOutputLogicState . Text = \"lever Output Logic State : \" & Levers . LeverlockState ( Configs . ComboBoxLever . SelectedIndex ) Configs . LabelLeverAutoRestrokeSetting . Text = \"lever Auto Restroke Setting : \" & RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) End If If Not Configs . ComboBoxLever . SelectedIndex = - 1 Then If LeverHasRestrokeSetting ( Configs . ComboBoxLever . SelectedIndex ) = True Then Configs . ButtonLeverAutoRestroke . Enabled = True If RuntimeConfig . config . LeverRestroke ( Configs . ComboBoxLever . SelectedIndex ) = True Then Configs . ButtonLeverAutoRestroke . Text = \"Enabled\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Configs . WarningSetting Else Configs . ButtonLeverAutoRestroke . Text = \"Disabled\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If Else Configs . ButtonLeverAutoRestroke . Enabled = False Configs . ButtonLeverAutoRestroke . Text = \"N / A\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If Else Configs . ButtonLeverAutoRestroke . Enabled = False Configs . ButtonLeverAutoRestroke . Text = \"N / A\" Configs . LabelLeverAutoRestrokeSetting . BackColor = Color . Transparent End If If Configs . LabelleverInputSetting . Text = \"lever Input Setting : System\" Or Configs . LabelleverInputSetting . Text = \"lever Input Setting : \" Then Configs . LabelleverInputSetting . BackColor = Color . Transparent Else Configs . LabelleverInputSetting . BackColor = Configs . NoneNormalSetting End If If Configs . LabelleverOutputSetting . Text = \"lever Output Setting : System\" Or Configs . LabelleverOutputSetting . Text = \"lever Output Setting : \" Then Configs . LabelleverOutputSetting . BackColor = Color . Transparent Else Configs . LabelleverOutputSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateleverInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigPoints_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPoints.vb \u00b6 Source code \u00b6 Module ConfigPoints ' Update signal setting Public Sub ChangePointOutput ( UpdateToState As String ) RuntimeConfig . config . PointOutputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Point OutPut \" & Configs . ComboBoxPoint . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangePointInput ( UpdateToState As String ) RuntimeConfig . config . PointInputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Point InPut \" & Configs . ComboBoxPoint . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public Sub UpdatePointInfo () If Configs . ComboBoxPoint . SelectedIndex = - 1 Then Configs . ButtonPointInputSystem . Enabled = False Configs . ButtonPointInputNormal . Enabled = False Configs . ButtonPointInputReverse . Enabled = False Configs . ButtonPointInputNoInput . Enabled = False Configs . ButtonPointOutputSystem . Enabled = False Configs . ButtonPointOutputNormal . Enabled = False Configs . ButtonPointOutputReverse . Enabled = False Configs . ButtonPointOutputIsolate . Enabled = False Else Configs . ButtonPointInputSystem . Enabled = True Configs . ButtonPointInputNormal . Enabled = True Configs . ButtonPointInputReverse . Enabled = True Configs . ButtonPointInputNoInput . Enabled = True Configs . ButtonPointOutputSystem . Enabled = True Configs . ButtonPointOutputNormal . Enabled = True Configs . ButtonPointOutputReverse . Enabled = True Configs . ButtonPointOutputIsolate . Enabled = True End If If Configs . ComboBoxPoint . SelectedIndex = - 1 Then Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" Configs . LabelPointInputFieldState . Text = \"Point Input Field State : \" Configs . LabelPointOutputFieldState . Text = \"Point Output Field State : \" Configs . LabelPointInputLogicState . Text = \"Point Input Logic State : \" Configs . LabelPointOutputLogicState . Text = \"Point Output Logic State : \" Configs . LabelPointNoReturnTimer . Text = \"Point No Return Timer : \" Configs . LabelPointNotChangingTimer . Text = \"Point Not Changing Timer : \" Else Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" & RuntimeConfig . config . PointInputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" & RuntimeConfig . config . PointOutputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointInputFieldState . Text = \"Point Input Field State : \" & Points . PointFieldStates ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputFieldState . Text = \"Point Output Field State : \" & Points . PointOutputs ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointInputLogicState . Text = \"Point Input Logic State : \" & Points . PointReturns ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputLogicState . Text = \"Point Output Logic State : \" & Points . PointRequestedOutputs ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointNoReturnTimer . Text = \"Point No Return Timer : \" & Points . PointNoReturnCountdown ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointNotChangingTimer . Text = \"Point Not Changing Timer : \" & Points . PointNotChangingCountdown ( Configs . ComboBoxPoint . SelectedIndex ) End If If Configs . LabelPointInputSetting . Text = \"Point Input Setting : System\" Or Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" Then Configs . LabelPointInputSetting . BackColor = Color . Transparent Else Configs . LabelPointInputSetting . BackColor = Configs . NoneNormalSetting End If If Configs . LabelPointOutputSetting . Text = \"Point Output Setting : System\" Or Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" Then Configs . LabelPointOutputSetting . BackColor = Color . Transparent Else Configs . LabelPointOutputSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdatePointInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPoints.vb"},{"location":"mainsystem/Files/ConfigPoints_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigpointsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPoints.vb"},{"location":"mainsystem/Files/ConfigPoints_8vb/#source-code","text":"Module ConfigPoints ' Update signal setting Public Sub ChangePointOutput ( UpdateToState As String ) RuntimeConfig . config . PointOutputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Point OutPut \" & Configs . ComboBoxPoint . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangePointInput ( UpdateToState As String ) RuntimeConfig . config . PointInputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Point InPut \" & Configs . ComboBoxPoint . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public Sub UpdatePointInfo () If Configs . ComboBoxPoint . SelectedIndex = - 1 Then Configs . ButtonPointInputSystem . Enabled = False Configs . ButtonPointInputNormal . Enabled = False Configs . ButtonPointInputReverse . Enabled = False Configs . ButtonPointInputNoInput . Enabled = False Configs . ButtonPointOutputSystem . Enabled = False Configs . ButtonPointOutputNormal . Enabled = False Configs . ButtonPointOutputReverse . Enabled = False Configs . ButtonPointOutputIsolate . Enabled = False Else Configs . ButtonPointInputSystem . Enabled = True Configs . ButtonPointInputNormal . Enabled = True Configs . ButtonPointInputReverse . Enabled = True Configs . ButtonPointInputNoInput . Enabled = True Configs . ButtonPointOutputSystem . Enabled = True Configs . ButtonPointOutputNormal . Enabled = True Configs . ButtonPointOutputReverse . Enabled = True Configs . ButtonPointOutputIsolate . Enabled = True End If If Configs . ComboBoxPoint . SelectedIndex = - 1 Then Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" Configs . LabelPointInputFieldState . Text = \"Point Input Field State : \" Configs . LabelPointOutputFieldState . Text = \"Point Output Field State : \" Configs . LabelPointInputLogicState . Text = \"Point Input Logic State : \" Configs . LabelPointOutputLogicState . Text = \"Point Output Logic State : \" Configs . LabelPointNoReturnTimer . Text = \"Point No Return Timer : \" Configs . LabelPointNotChangingTimer . Text = \"Point Not Changing Timer : \" Else Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" & RuntimeConfig . config . PointInputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" & RuntimeConfig . config . PointOutputOverrides ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointInputFieldState . Text = \"Point Input Field State : \" & Points . PointFieldStates ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputFieldState . Text = \"Point Output Field State : \" & Points . PointOutputs ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointInputLogicState . Text = \"Point Input Logic State : \" & Points . PointReturns ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointOutputLogicState . Text = \"Point Output Logic State : \" & Points . PointRequestedOutputs ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointNoReturnTimer . Text = \"Point No Return Timer : \" & Points . PointNoReturnCountdown ( Configs . ComboBoxPoint . SelectedIndex ) Configs . LabelPointNotChangingTimer . Text = \"Point Not Changing Timer : \" & Points . PointNotChangingCountdown ( Configs . ComboBoxPoint . SelectedIndex ) End If If Configs . LabelPointInputSetting . Text = \"Point Input Setting : System\" Or Configs . LabelPointInputSetting . Text = \"Point Input Setting : \" Then Configs . LabelPointInputSetting . BackColor = Color . Transparent Else Configs . LabelPointInputSetting . BackColor = Configs . NoneNormalSetting End If If Configs . LabelPointOutputSetting . Text = \"Point Output Setting : System\" Or Configs . LabelPointOutputSetting . Text = \"Point Output Setting : \" Then Configs . LabelPointOutputSetting . BackColor = Color . Transparent Else Configs . LabelPointOutputSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdatePointInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigPower_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPower.vb \u00b6 Source code \u00b6 Module ConfigPower ' Update signal setting Public Sub ChangeSystemmPowerState ( UpdateToState As String ) Power . PowerState = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated System Power to \" & UpdateToState ) End Sub Public Sub ChangeSystemmLogicState ( UpdateToState As String ) RuntimeConfig . config . Mode = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated System Logic to \" & UpdateToState ) End Sub ' Update Power Info Public Sub UpdatePowerInfo () If Safety . EStopTriggered = True Then Configs . LabelEstopStatus . Text = \"Status : Triggered!\" Configs . LabelEstopStatus . BackColor = Configs . OffState Else Configs . LabelEstopStatus . Text = \"Status : Normal\" Configs . LabelEstopStatus . BackColor = Color . Transparent End If If Power . FrameDisplayPower = True Then Configs . LabelPowerFramePower . Text = \"Frame Power : On\" Configs . LabelPowerFramePower . BackColor = Configs . OnState Else Configs . LabelPowerFramePower . Text = \"Frame Power : Off\" Configs . LabelPowerFramePower . BackColor = Configs . OffState End If If Power . PointSupplyPower = True Then Configs . LabelPowerPointPower . Text = \"Point Power : On\" Configs . LabelPowerPointPower . BackColor = Configs . OnState Else Configs . LabelPowerPointPower . Text = \"Point Power : Off\" Configs . LabelPowerPointPower . BackColor = Configs . OffState End If If Power . SignalAspectPower = True Then Configs . LabelPowerSignalPower . Text = \"Signal Power : On\" Configs . LabelPowerSignalPower . BackColor = Configs . OnState Else Configs . LabelPowerSignalPower . Text = \"Signal Power : Off\" Configs . LabelPowerSignalPower . BackColor = Configs . OffState End If If Power . MimicDisplayPower = True Then Configs . LabelPowerMimicPower . Text = \"Mimic Power : On\" Configs . LabelPowerMimicPower . BackColor = Configs . OnState Else Configs . LabelPowerMimicPower . Text = \"Mimic Power : Off\" Configs . LabelPowerMimicPower . BackColor = Configs . OffState End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then Configs . LabelPowerAUXContactorState . Text = \"AUX Contactor State : Closed\" Configs . LabelPowerAUXContactorState . BackColor = Configs . OnState Else Configs . LabelPowerAUXContactorState . Text = \"AUX Contactor State : Open\" Configs . LabelPowerAUXContactorState . BackColor = Configs . OffState End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressACMonitor ) = 1 Then Configs . LabelPowerACPowerState . Text = \"AC Power State : On\" Configs . LabelPowerACPowerState . BackColor = Configs . OnState Else Configs . LabelPowerACPowerState . Text = \"AC Power State : Off\" Configs . LabelPowerACPowerState . BackColor = Configs . OffState End If If PowerState = \"System\" Then Configs . LabelPowerSystemState . Text = \"System State : \" & PowerState Configs . LabelPowerSystemState . BackColor = Color . Transparent Else Configs . LabelPowerSystemState . Text = \"System State : \" & PowerState Configs . LabelPowerSystemState . BackColor = Configs . WarningSetting End If Configs . LabelPowerLogicState . Text = RuntimeConfig . config . Mode End Sub ' TimerTick Public Sub TimerTick () UpdatePowerInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPower.vb"},{"location":"mainsystem/Files/ConfigPower_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigpowervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPower.vb"},{"location":"mainsystem/Files/ConfigPower_8vb/#source-code","text":"Module ConfigPower ' Update signal setting Public Sub ChangeSystemmPowerState ( UpdateToState As String ) Power . PowerState = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated System Power to \" & UpdateToState ) End Sub Public Sub ChangeSystemmLogicState ( UpdateToState As String ) RuntimeConfig . config . Mode = UpdateToState AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated System Logic to \" & UpdateToState ) End Sub ' Update Power Info Public Sub UpdatePowerInfo () If Safety . EStopTriggered = True Then Configs . LabelEstopStatus . Text = \"Status : Triggered!\" Configs . LabelEstopStatus . BackColor = Configs . OffState Else Configs . LabelEstopStatus . Text = \"Status : Normal\" Configs . LabelEstopStatus . BackColor = Color . Transparent End If If Power . FrameDisplayPower = True Then Configs . LabelPowerFramePower . Text = \"Frame Power : On\" Configs . LabelPowerFramePower . BackColor = Configs . OnState Else Configs . LabelPowerFramePower . Text = \"Frame Power : Off\" Configs . LabelPowerFramePower . BackColor = Configs . OffState End If If Power . PointSupplyPower = True Then Configs . LabelPowerPointPower . Text = \"Point Power : On\" Configs . LabelPowerPointPower . BackColor = Configs . OnState Else Configs . LabelPowerPointPower . Text = \"Point Power : Off\" Configs . LabelPowerPointPower . BackColor = Configs . OffState End If If Power . SignalAspectPower = True Then Configs . LabelPowerSignalPower . Text = \"Signal Power : On\" Configs . LabelPowerSignalPower . BackColor = Configs . OnState Else Configs . LabelPowerSignalPower . Text = \"Signal Power : Off\" Configs . LabelPowerSignalPower . BackColor = Configs . OffState End If If Power . MimicDisplayPower = True Then Configs . LabelPowerMimicPower . Text = \"Mimic Power : On\" Configs . LabelPowerMimicPower . BackColor = Configs . OnState Else Configs . LabelPowerMimicPower . Text = \"Mimic Power : Off\" Configs . LabelPowerMimicPower . BackColor = Configs . OffState End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then Configs . LabelPowerAUXContactorState . Text = \"AUX Contactor State : Closed\" Configs . LabelPowerAUXContactorState . BackColor = Configs . OnState Else Configs . LabelPowerAUXContactorState . Text = \"AUX Contactor State : Open\" Configs . LabelPowerAUXContactorState . BackColor = Configs . OffState End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressACMonitor ) = 1 Then Configs . LabelPowerACPowerState . Text = \"AC Power State : On\" Configs . LabelPowerACPowerState . BackColor = Configs . OnState Else Configs . LabelPowerACPowerState . Text = \"AC Power State : Off\" Configs . LabelPowerACPowerState . BackColor = Configs . OffState End If If PowerState = \"System\" Then Configs . LabelPowerSystemState . Text = \"System State : \" & PowerState Configs . LabelPowerSystemState . BackColor = Color . Transparent Else Configs . LabelPowerSystemState . Text = \"System State : \" & PowerState Configs . LabelPowerSystemState . BackColor = Configs . WarningSetting End If Configs . LabelPowerLogicState . Text = RuntimeConfig . config . Mode End Sub ' TimerTick Public Sub TimerTick () UpdatePowerInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigSections_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSections.vb \u00b6 Source code \u00b6 Module ConfigSections ' DropDown Section Lists Public SectionLIST () As String = { \"SectionA\" , \"SectionB\" , \"SectionC\" , \"SectionD\" , \"SectionE\" , \"SectionF\" , \"SectionG\" , \"SectionH\" , \"SectionI\" , \"SectionJ\" , \"SectionK\" , \"SectionL\" , \"SectionM\" , \"SectionN\" , \"SectionO\" , \"SectionP\" , \"SectionQ\" , \"SectionDE\" , \"SectionNO\" , \"SectionOP\" , \"SectionQ10\" , \"SectionA11\" , \"SectionF12\" , \"SectionF13\" , \"SectionNO14\" , \"SectionC19\" , \"SectionR\" , \"SectionCD\" } ' Index 0 Public TrackSectionLIST () As String = { \"SectionP5a\" , \"SectionP5b\" , \"SectionP6a\" , \"SectionP6b\" , \"SectionP10\" , \"SectionP11\" , \"SectionP12\" , \"SectionP13\" , \"SectionP14\" , \"SectionP19\" } ' Index 1 ' Update which Section list to display Public Sub ChangeSelectedGroup () Configs . ComboBoxSection . Items . Clear () Configs . ComboBoxSection . ResetText () If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then Configs . ComboBoxSection . Items . AddRange ( SectionLIST ) ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then Configs . ComboBoxSection . Items . AddRange ( TrackSectionLIST ) End If Configs . ComboBoxSection . DroppedDown = True End Sub ' Update Section setting Public Sub ChangeSectionState ( UpdateToState As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToState ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToState End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeSectionSetValue ( UpdateToValue As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" Trigger value to \" & UpdateToValue ) End Sub Public Sub ChangeSectionErrorValue ( UpdateToValue As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" Error value to \" & UpdateToValue ) End Sub ' Fetch stored values for trackbars Public Sub GetSectionValues () Configs . TrackBarSectionSetVoltage . Value = RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) Configs . TrackBarSectionErrorVoltage . Value = RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) End Sub ' Update Section Info and buttons Public Sub UpdateSectionInfo () Configs . LabelSectionSetVoltageTrackBar . Text = \"Set Voltage : \" & Configs . TrackBarSectionSetVoltage . Value Configs . LabelSectionErrorVoltageTrackBar . Text = \"Error Voltage : \" & Configs . TrackBarSectionErrorVoltage . Value If Configs . ComboBoxSection . SelectedIndex = - 1 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" Configs . LabelSectionLogicState . Text = \"Section Logic State : \" Configs . LabelSectionFieldState . Text = \"Section Field State : \" Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" Configs . LabelSectionTimer . Text = \"Section Timer : \" Configs . LabelSectionErrorState . Text = \"Error State : \" Configs . ButtonSectionOccupied . Enabled = False Configs . ButtonSectionSystem . Enabled = False Configs . ButtonSectionUnoccupied . Enabled = False Else If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" & RuntimeConfig . config . TrackSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionLogicState . Text = \"Section Logic State : \" & TrackSectionUnoccupied ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldState . Text = \"Section Field State : \" & TrackSectionField ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" & ActualAnalogValue ( Configs . ComboBoxSection . SelectedIndex + 1 ) & \"V\" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" & RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" & RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionTimer . Text = \"Section Timer : \" & TrackSectionTimer ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionErrorState . Text = \"Error State : \" & TrackSectionError ( Configs . ComboBoxSection . SelectedIndex ) Configs . ButtonSectionOccupied . Enabled = True Configs . ButtonSectionSystem . Enabled = True Configs . ButtonSectionUnoccupied . Enabled = True ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" & RuntimeConfig . config . PointSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionLogicState . Text = \"Section Logic State : \" & PointSectionUnoccupied ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldState . Text = \"Section Field State : \" & PointSectionField ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" & ActualAnalogValue ( AnalogInputPointSections ( Configs . ComboBoxSection . SelectedIndex )) & \"V\" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" & RuntimeConfig . config . PointSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" & RuntimeConfig . config . PointSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionTimer . Text = \"Section Timer : \" & PointSectionTimer ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionErrorState . Text = \"Error State : \" & PointSectionError ( Configs . ComboBoxSection . SelectedIndex ) Configs . ButtonSectionOccupied . Enabled = True Configs . ButtonSectionSystem . Enabled = True Configs . ButtonSectionUnoccupied . Enabled = True End If End If If Configs . LabelSectionSetting . Text = \"Section Setting : Detect\" Or Configs . LabelSectionSetting . Text = \"Section Setting : \" Then Configs . LabelSectionSetting . BackColor = Color . Transparent Else Configs . LabelSectionSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateSectionInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSections.vb"},{"location":"mainsystem/Files/ConfigSections_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigsectionsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSections.vb"},{"location":"mainsystem/Files/ConfigSections_8vb/#source-code","text":"Module ConfigSections ' DropDown Section Lists Public SectionLIST () As String = { \"SectionA\" , \"SectionB\" , \"SectionC\" , \"SectionD\" , \"SectionE\" , \"SectionF\" , \"SectionG\" , \"SectionH\" , \"SectionI\" , \"SectionJ\" , \"SectionK\" , \"SectionL\" , \"SectionM\" , \"SectionN\" , \"SectionO\" , \"SectionP\" , \"SectionQ\" , \"SectionDE\" , \"SectionNO\" , \"SectionOP\" , \"SectionQ10\" , \"SectionA11\" , \"SectionF12\" , \"SectionF13\" , \"SectionNO14\" , \"SectionC19\" , \"SectionR\" , \"SectionCD\" } ' Index 0 Public TrackSectionLIST () As String = { \"SectionP5a\" , \"SectionP5b\" , \"SectionP6a\" , \"SectionP6b\" , \"SectionP10\" , \"SectionP11\" , \"SectionP12\" , \"SectionP13\" , \"SectionP14\" , \"SectionP19\" } ' Index 1 ' Update which Section list to display Public Sub ChangeSelectedGroup () Configs . ComboBoxSection . Items . Clear () Configs . ComboBoxSection . ResetText () If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then Configs . ComboBoxSection . Items . AddRange ( SectionLIST ) ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then Configs . ComboBoxSection . Items . AddRange ( TrackSectionLIST ) End If Configs . ComboBoxSection . DroppedDown = True End Sub ' Update Section setting Public Sub ChangeSectionState ( UpdateToState As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToState ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToState End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" To \" & UpdateToState ) End Sub Public Sub ChangeSectionSetValue ( UpdateToValue As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" Trigger value to \" & UpdateToValue ) End Sub Public Sub ChangeSectionErrorValue ( UpdateToValue As String ) If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then RuntimeConfig . config . PointSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) = UpdateToValue End If UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Section \" & Configs . ComboBoxSection . Text & \" Error value to \" & UpdateToValue ) End Sub ' Fetch stored values for trackbars Public Sub GetSectionValues () Configs . TrackBarSectionSetVoltage . Value = RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) Configs . TrackBarSectionErrorVoltage . Value = RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) End Sub ' Update Section Info and buttons Public Sub UpdateSectionInfo () Configs . LabelSectionSetVoltageTrackBar . Text = \"Set Voltage : \" & Configs . TrackBarSectionSetVoltage . Value Configs . LabelSectionErrorVoltageTrackBar . Text = \"Error Voltage : \" & Configs . TrackBarSectionErrorVoltage . Value If Configs . ComboBoxSection . SelectedIndex = - 1 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" Configs . LabelSectionLogicState . Text = \"Section Logic State : \" Configs . LabelSectionFieldState . Text = \"Section Field State : \" Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" Configs . LabelSectionTimer . Text = \"Section Timer : \" Configs . LabelSectionErrorState . Text = \"Error State : \" Configs . ButtonSectionOccupied . Enabled = False Configs . ButtonSectionSystem . Enabled = False Configs . ButtonSectionUnoccupied . Enabled = False Else If Configs . ComboBoxSectionGroups . SelectedIndex = 0 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" & RuntimeConfig . config . TrackSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionLogicState . Text = \"Section Logic State : \" & TrackSectionUnoccupied ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldState . Text = \"Section Field State : \" & TrackSectionField ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" & ActualAnalogValue ( Configs . ComboBoxSection . SelectedIndex + 1 ) & \"V\" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" & RuntimeConfig . config . TrackSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" & RuntimeConfig . config . TrackSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionTimer . Text = \"Section Timer : \" & TrackSectionTimer ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionErrorState . Text = \"Error State : \" & TrackSectionError ( Configs . ComboBoxSection . SelectedIndex ) Configs . ButtonSectionOccupied . Enabled = True Configs . ButtonSectionSystem . Enabled = True Configs . ButtonSectionUnoccupied . Enabled = True ElseIf Configs . ComboBoxSectionGroups . SelectedIndex = 1 Then Configs . LabelSectionSetting . Text = \"Section Setting : \" & RuntimeConfig . config . PointSectionOverrides ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionLogicState . Text = \"Section Logic State : \" & PointSectionUnoccupied ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldState . Text = \"Section Field State : \" & PointSectionField ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionFieldVoltage . Text = \"Section Field Voltage : \" & ActualAnalogValue ( AnalogInputPointSections ( Configs . ComboBoxSection . SelectedIndex )) & \"V\" Configs . LabelSectionSetVoltage . Text = \"Section Set Voltage : \" & RuntimeConfig . config . PointSectionSetPoint ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionErrorVoltage . Text = \"Section Error Voltage : \" & RuntimeConfig . config . PointSectionSetPointError ( Configs . ComboBoxSection . SelectedIndex ) & \"V\" Configs . LabelSectionTimer . Text = \"Section Timer : \" & PointSectionTimer ( Configs . ComboBoxSection . SelectedIndex ) Configs . LabelSectionErrorState . Text = \"Error State : \" & PointSectionError ( Configs . ComboBoxSection . SelectedIndex ) Configs . ButtonSectionOccupied . Enabled = True Configs . ButtonSectionSystem . Enabled = True Configs . ButtonSectionUnoccupied . Enabled = True End If End If If Configs . LabelSectionSetting . Text = \"Section Setting : Detect\" Or Configs . LabelSectionSetting . Text = \"Section Setting : \" Then Configs . LabelSectionSetting . BackColor = Color . Transparent Else Configs . LabelSectionSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateSectionInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/ConfigSignals_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSignals.vb \u00b6 Source code \u00b6 Module ConfigSignals ' DropDown Signal Lists 0 1 2 3 4 5 6 7 8 9 10 Public EastBoundLIST () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" } ' Index 0 Public WestBoundLIST () As String = { \"AJ3W\" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" } ' Index 1 Public ShuntLIST () As String = { \"S11\" , \"S12\" , \"S14\" , \"S19\" } ' Index 2 ' Update which signal list to display Public Sub ChangeSelectedGroup () Configs . ComboBoxSignal . Items . Clear () Configs . ComboBoxSignal . ResetText () If Configs . ComboBoxSignalGroups . SelectedIndex = 0 Then Configs . ComboBoxSignal . Items . AddRange ( EastBoundLIST ) ElseIf Configs . ComboBoxSignalGroups . SelectedIndex = 1 Then Configs . ComboBoxSignal . Items . AddRange ( WestBoundLIST ) ElseIf Configs . ComboBoxSignalGroups . SelectedIndex = 2 Then Configs . ComboBoxSignal . Items . AddRange ( ShuntLIST ) End If Configs . ComboBoxSignal . DroppedDown = True End Sub ' Update signal setting Public Sub ChangeSignalState ( UpdateToState As String ) UpdateSettings . TCPUpdateSetting ( UserManagment . LoggedInUserName , UpdateSettings . SettingPassword , Configs . ComboBoxSignal . Text , UpdateToState ) AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Signal \" & Configs . ComboBoxSignal . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public Sub UpdateSignalInfo () If Configs . ComboBoxSignal . Text = \"AJ1E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ1E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ1E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ1E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) ElseIf Configs . ComboBoxSignal . Text = \"AJ2E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ2E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ2E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ2E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ3E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ3E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ3E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ4E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ4E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ4E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ4E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ7E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ7E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ7E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ7E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ8E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ8E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ8E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ8E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ9E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ9E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ9E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ16E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ16E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ16E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ17E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ17E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ17E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ17E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ18E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ18E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ18E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ21E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ21E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ21E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ21E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) ElseIf Configs . ComboBoxSignal . Text = \"AJ3W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ3W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ3W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ3W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ3W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ7W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ7W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ7W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ7W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ7W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ8W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ8W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ8W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ8W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ8W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ9W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ9W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ9W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ9W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ9W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ15W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ15W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ15W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ15W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) ElseIf Configs . ComboBoxSignal . Text = \"AJ16W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ16W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ16W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ16W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ16W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ17W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ17W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ17W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ17W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ17W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ18W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ18W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ18W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ18W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ18W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ22W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ22W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ22W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ22W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) ElseIf Configs . ComboBoxSignal . Text = \"S11\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S11 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S11 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S11 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S12\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S12 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S12 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S12 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S14\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S14 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S14 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S14 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S19\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S19 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S19 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S19 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" Else Configs . ButtonSignalSystem . Enabled = False ' System Configs . ButtonSignalReset . Enabled = False ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = False ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" Configs . LabelSignalTimer . Text = \"Signal Timer : \" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" Configs . LabelSPAD . Text = \"Signal SPAD State : \" Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" End If If Configs . LabelSignalSetting . Text = \"Signal Setting : System\" Or Configs . LabelSignalSetting . Text = \"Signal Setting : \" Then Configs . LabelSignalSetting . BackColor = Color . Transparent Else Configs . LabelSignalSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateSignalInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSignals.vb"},{"location":"mainsystem/Files/ConfigSignals_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcodeconfigsignalsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSignals.vb"},{"location":"mainsystem/Files/ConfigSignals_8vb/#source-code","text":"Module ConfigSignals ' DropDown Signal Lists 0 1 2 3 4 5 6 7 8 9 10 Public EastBoundLIST () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" } ' Index 0 Public WestBoundLIST () As String = { \"AJ3W\" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" } ' Index 1 Public ShuntLIST () As String = { \"S11\" , \"S12\" , \"S14\" , \"S19\" } ' Index 2 ' Update which signal list to display Public Sub ChangeSelectedGroup () Configs . ComboBoxSignal . Items . Clear () Configs . ComboBoxSignal . ResetText () If Configs . ComboBoxSignalGroups . SelectedIndex = 0 Then Configs . ComboBoxSignal . Items . AddRange ( EastBoundLIST ) ElseIf Configs . ComboBoxSignalGroups . SelectedIndex = 1 Then Configs . ComboBoxSignal . Items . AddRange ( WestBoundLIST ) ElseIf Configs . ComboBoxSignalGroups . SelectedIndex = 2 Then Configs . ComboBoxSignal . Items . AddRange ( ShuntLIST ) End If Configs . ComboBoxSignal . DroppedDown = True End Sub ' Update signal setting Public Sub ChangeSignalState ( UpdateToState As String ) UpdateSettings . TCPUpdateSetting ( UserManagment . LoggedInUserName , UpdateSettings . SettingPassword , Configs . ComboBoxSignal . Text , UpdateToState ) AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Signal \" & Configs . ComboBoxSignal . Text & \" To \" & UpdateToState ) End Sub ' Update Signal Info and buttons Public Sub UpdateSignalInfo () If Configs . ComboBoxSignal . Text = \"AJ1E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ1E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ1E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ1E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) ElseIf Configs . ComboBoxSignal . Text = \"AJ2E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ2E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ2E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ2E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ3E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ3E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ3E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ4E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ4E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ4E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ4E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ7E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ7E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ7E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ7E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ8E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ8E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ8E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ8E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ9E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ9E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ9E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ16E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ16E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ16E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ17E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ17E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ17E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ17E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ18E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ18E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ18E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ21E\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ21E )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ21E )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ21E ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) ElseIf Configs . ComboBoxSignal . Text = \"AJ3W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ3W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ3W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ3W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ3W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ7W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ7W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ7W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ7W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ7W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ8W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ8W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ8W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ8W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ8W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ9W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ9W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ9W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ9W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ9W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ15W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ15W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ15W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ15W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) ElseIf Configs . ComboBoxSignal . Text = \"AJ16W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ16W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ16W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ16W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ16W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ17W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ17W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ17W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ17W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ17W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ18W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ18W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ18W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ18W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ18W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"AJ22W\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . AJ22W )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . AJ22W )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = True ' Clear Configs . ButtonSignalCaution . Enabled = True ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ22W ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) ElseIf Configs . ComboBoxSignal . Text = \"S11\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S11 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S11 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S11 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S12\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S12 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S12 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S12 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S14\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S14 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S14 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S14 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" ElseIf Configs . ComboBoxSignal . Text = \"S19\" Then Configs . PaintSignalFieldState ( SignalOutputState ( Definitions . SignalNames . S19 )) Configs . PaintSignalLogicState ( SignalSystemState ( Definitions . SignalNames . S19 )) Configs . ButtonSignalSystem . Enabled = True ' System Configs . ButtonSignalReset . Enabled = True ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = True ' Danger Configs . ButtonSignalShunt . Enabled = True ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) Configs . LabelSignalTimer . Text = \"Signal Timer : \" & \"NA\" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" & \"NA\" Configs . LabelSPAD . Text = \"Signal SPAD State : \" & SPADDetection . SignalSPADAlert ( SPADSignalNames . S19 ) Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" & SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" & \"NA\" Else Configs . ButtonSignalSystem . Enabled = False ' System Configs . ButtonSignalReset . Enabled = False ' Reset Configs . ButtonSignalBypass . Enabled = False ' Bypass Configs . ButtonSignalClear . Enabled = False ' Clear Configs . ButtonSignalCaution . Enabled = False ' Caution Configs . ButtonSignalDanger . Enabled = False ' Danger Configs . ButtonSignalShunt . Enabled = False ' Shunt Configs . LabelSignalSetting . Text = \"Signal Setting : \" Configs . LabelSignalTimer . Text = \"Signal Timer : \" Configs . LabelSignalTimeout . Text = \"Signal Timeout : \" Configs . LabelSPAD . Text = \"Signal SPAD State : \" Configs . LabelRouteSafeToClearTimer . Text = \"Route Safe To Clear Timer : \" Configs . LabelAnnouncementDelay . Text = \"Announcement Delay : \" End If If Configs . LabelSignalSetting . Text = \"Signal Setting : System\" Or Configs . LabelSignalSetting . Text = \"Signal Setting : \" Then Configs . LabelSignalSetting . BackColor = Color . Transparent Else Configs . LabelSignalSetting . BackColor = Configs . NoneNormalSetting End If End Sub ' TimerTick Public Sub TimerTick () UpdateSignalInfo () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Configs_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/Configs.vb \u00b6 Source code \u00b6 Public Class Configs Public NoneNormalSetting As Color = Color . LightBlue Public WarningSetting As Color = Color . LightYellow Public OnState As Color = Color . LightGreen Public OffState As Color = Color . Red ' Access and control Private Sub TimerUserManagment_Tick ( sender As Object , e As EventArgs ) Handles TimerUserManagment . Tick LabelLoggedInAs . Text = \"Logged in as : \" & UserManagment . LoggedInUserName & \" (Access level : \" & UserManagment . LoggedInAccessLevel & \")\" If UserManagment . LoggedInAccessLevel > 0 Then ButtonLogin . Text = \"Logout\" Else ButtonLogin . Text = \"Login\" End If ' Power access If UserManagment . LoggedInAccessLevel > 0 Then GroupBoxPowerControls . Enabled = True GroupBoxPowerControls . Text = \"Power Control\" Else GroupBoxPowerControls . Enabled = False GroupBoxPowerControls . Text = \"Power - LOCKED!\" End If If UserManagment . LoggedInAccessLevel > 2 Then GroupBoxEStop . Enabled = True GroupBoxEStop . Text = \"EStop Control\" Else GroupBoxEStop . Enabled = False GroupBoxEStop . Text = \"EStop Locked - LOCKED!\" End If ' Logic access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxDirectionControls . Enabled = True GroupBoxDirectionControls . Text = \"Logic Control\" Else GroupBoxDirectionControls . Enabled = False GroupBoxDirectionControls . Text = \"Logic - LOCKED!\" End If ' Signal access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxSignalControls . Enabled = True GroupBoxSignalControls . Text = \"Signal Settings\" Else GroupBoxSignalControls . Enabled = False GroupBoxSignalControls . Text = \"Signal Settings - LOCKED!\" End If ' Point access If UserManagment . LoggedInAccessLevel > 2 Then GroupBoxPointControls . Enabled = True GroupBoxPointControls . Text = \"Point Settings\" Else GroupBoxPointControls . Enabled = False GroupBoxPointControls . Text = \"Point Settings - LOCKED!\" End If ' Section access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxSectionControls . Enabled = True GroupBoxSectionControls . Text = \"Section Settings\" Else GroupBoxSectionControls . Enabled = False GroupBoxSectionControls . Text = \"Section Settings - LOCKED!\" End If ' lever access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxLeverControls . Enabled = True GroupBoxLeverControls . Text = \"lever Settings\" Else GroupBoxLeverControls . Enabled = False GroupBoxleverControls . Text = \"lever Settings - LOCKED!\" End If End Sub ' LogicTimer Private Sub TimerMainLogic_Tick ( sender As Object , e As EventArgs ) Handles TimerMainLogic . Tick ConfigPower . TimerTick () ConfigSignals . TimerTick () ConfigPoints . TimerTick () ConfigSections . TimerTick () Configlevers . TimerTick () ConfigCrossing . TimerTick () End Sub ' Login / out button Private Sub ButtonLogin_Click ( sender As Object , e As EventArgs ) Handles ButtonLogin . Click If UserManagment . LoggedInAccessLevel > 0 Then UserManagment . Logout () Else LoginForm . Show () End If End Sub ' Save to file button Private Sub ButtonSave_Click ( sender As Object , e As EventArgs ) Handles ButtonSave . Click RuntimeConfig . Save () End Sub ' Close Button Private Sub ButtonClose_Click ( sender As Object , e As EventArgs ) Me . Close () End Sub ' EStop Private Sub ButtonESTOP_Click ( sender As Object , e As EventArgs ) Handles ButtonESTOP . Click Safety . EStopSoftware = True AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Triggered Estop \" ) End Sub ' Power and Logic Private Sub ButtonPowerSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerSystem . Click ConfigPower . ChangeSystemmPowerState ( \"System\" ) End Sub Private Sub ButtonPowerOn_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerOn . Click ConfigPower . ChangeSystemmPowerState ( \"On\" ) End Sub Private Sub ButtonPowerOff_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerOff . Click ConfigPower . ChangeSystemmPowerState ( \"Off\" ) End Sub Private Sub ButtonPowerExternal_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerExternal . Click ChangeSystemmLogicState ( \"External\" ) End Sub Private Sub ButtonPowerManual_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerManual . Click ChangeSystemmLogicState ( \"Manual\" ) End Sub Private Sub ButtonPowerAutomatic_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerAutomatic . Click ChangeSystemmLogicState ( \"Computer\" ) End Sub Private Sub ButtonEStopReset_Click ( sender As Object , e As EventArgs ) Handles ButtonEStopReset . Click Safety . EStopReset = True AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Reset EStop \" ) End Sub ' Signals Private Sub ComboBoxSignalGroups_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSignalGroups . SelectedIndexChanged ConfigSignals . ChangeSelectedGroup () End Sub Private Sub ButtonSignalSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalSystem . Click ConfigSignals . ChangeSignalState ( \"System\" ) End Sub Private Sub ButtonSignalReset_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalReset . Click ConfigSignals . ChangeSignalState ( \"System\" ) End Sub Private Sub ButtonSignalClear_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalClear . Click ConfigSignals . ChangeSignalState ( \"Clear\" ) End Sub Private Sub ButtonSignalCaution_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalCaution . Click ConfigSignals . ChangeSignalState ( \"Caution\" ) End Sub Private Sub ButtonSignalDanger_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalDanger . Click ConfigSignals . ChangeSignalState ( \"Danger\" ) End Sub Private Sub ButtonSignalShunt_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalShunt . Click ConfigSignals . ChangeSignalState ( \"Shunt\" ) End Sub Private Sub ButtonSignalBypass_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalBypass . Click ConfigSignals . ChangeSignalState ( \"Bypass\" ) End Sub Public Sub PaintSignalFieldState ( State As String ) Dim F As System . Drawing . Graphics F = PictureBoxSignalFieldState . CreateGraphics If State = SignalAtDanger Then F . FillEllipse ( Brushes . Red , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtCaution Then F . FillEllipse ( Brushes . Yellow , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtClear Then F . FillEllipse ( Brushes . LightGreen , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtShunt Then F . FillEllipse ( Brushes . White , 4 , 4 , 42 , 42 ) ElseIf State = \"Off\" Then F . FillEllipse ( Brushes . Gray , 4 , 4 , 42 , 42 ) Else F . FillEllipse ( Brushes . Pink , 4 , 4 , 42 , 42 ) End If End Sub Public Sub PaintSignalLogicState ( State As String ) Dim L As System . Drawing . Graphics L = PictureBoxSignalLogicState . CreateGraphics If State = SignalAtDanger Then L . FillEllipse ( Brushes . Red , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtCaution Then L . FillEllipse ( Brushes . Yellow , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtClear Then L . FillEllipse ( Brushes . LightGreen , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtShunt Then L . FillEllipse ( Brushes . White , 4 , 4 , 42 , 42 ) ElseIf State = \"Off\" Then L . FillEllipse ( Brushes . Gray , 4 , 4 , 42 , 42 ) Else L . FillEllipse ( Brushes . Pink , 4 , 4 , 42 , 42 ) End If End Sub ' Points Private Sub ButtonPointInputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputSystem . Click ConfigPoints . ChangePointInput ( \"System\" ) End Sub Private Sub ButtonPointInputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputNormal . Click ConfigPoints . ChangePointInput ( \"Normal\" ) End Sub Private Sub ButtonPointInputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputReverse . Click ConfigPoints . ChangePointInput ( \"Reverse\" ) End Sub Private Sub ButtonPointInputNoInput_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputNoInput . Click ConfigPoints . ChangePointInput ( \"NoInput\" ) End Sub Private Sub ButtonPointOutputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputSystem . Click ConfigPoints . ChangePointOutput ( \"System\" ) End Sub Private Sub ButtonPointOutputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputNormal . Click ConfigPoints . ChangePointOutput ( \"Normal\" ) End Sub Private Sub ButtonPointOutputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputReverse . Click ConfigPoints . ChangePointOutput ( \"Reverse\" ) End Sub Private Sub ButtonPointOutputIsolate_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputIsolate . Click ConfigPoints . ChangePointOutput ( \"Off\" ) End Sub ' Sections Private Sub ComboBoxSectionGroups_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSectionGroups . SelectedIndexChanged ConfigSections . ChangeSelectedGroup () End Sub Private Sub ComboBoxSection_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSection . SelectedIndexChanged ConfigSections . GetSectionValues () End Sub Private Sub TrackBarSectionSetVoltage_Scroll ( sender As Object , e As EventArgs ) Handles TrackBarSectionSetVoltage . Scroll ConfigSections . ChangeSectionSetValue ( TrackBarSectionSetVoltage . Value ) End Sub Private Sub TrackBarSectionErrorVoltage_Scroll ( sender As Object , e As EventArgs ) Handles TrackBarSectionErrorVoltage . Scroll ConfigSections . ChangeSectionErrorValue ( TrackBarSectionErrorVoltage . Value ) End Sub Private Sub ButtonSectionUnoccupied_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionUnoccupied . Click ConfigSections . ChangeSectionState ( \"UnOccupied\" ) End Sub Private Sub ButtonSectionOccupied_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionOccupied . Click ConfigSections . ChangeSectionState ( \"Occupy\" ) End Sub Private Sub ButtonSectionSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionSystem . Click ConfigSections . ChangeSectionState ( \"Detect\" ) End Sub ' levers Private Sub ButtonLeversInputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonLeversInputReverse . Click Configlevers . ChangeleverInput ( \"Reverse\" ) End Sub Private Sub ButtonLeverInputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverInputSystem . Click Configlevers . ChangeleverInput ( \"System\" ) End Sub Private Sub ButtonLeverOutputLock_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputLock . Click Configlevers . ChangeleverOutput ( \"Lock\" ) End Sub Private Sub ButtonLeverInputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverInputNormal . Click Configlevers . ChangeleverInput ( \"Normal\" ) End Sub Private Sub ButtonLeverOutputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputSystem . Click Configlevers . ChangeleverOutput ( \"System\" ) End Sub Private Sub ButtonLeversInputNoInput_Click ( sender As Object , e As EventArgs ) Handles ButtonLeversInputNoInput . Click Configlevers . ChangeleverInput ( \"Unknown\" ) End Sub Private Sub ButtonLeverOutputRelease_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputRelease . Click Configlevers . ChangeleverOutput ( \"Release\" ) End Sub Private Sub ButtonLeverAutoRestroke_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverAutoRestroke . Click If Not ComboBoxLever . SelectedIndex = - 1 Then If LeverHasRestrokeSetting ( ComboBoxLever . SelectedIndex ) = True Then If RuntimeConfig . config . LeverRestroke ( ComboBoxLever . SelectedIndex ) = True Then ChangeleverAutoRestroke ( False ) Else ChangeleverAutoRestroke ( True ) End If End If End If End Sub ' Level Crossing Private Sub ComboBoxCrossingSensor1_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor1 . SelectedIndexChanged RuntimeConfig . config . OutterGateOutSensor = ComboBoxCrossingSensor1 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 1 to \" & ComboBoxCrossingSensor1 . Text ) End Sub Private Sub ComboBoxCrossingSensor2_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor2 . SelectedIndexChanged RuntimeConfig . config . OutterGateInSensor = ComboBoxCrossingSensor2 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 2 to \" & ComboBoxCrossingSensor2 . Text ) End Sub Private Sub ComboBoxCrossingSensor3_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor3 . SelectedIndexChanged RuntimeConfig . config . InnerGateOutSensor = ComboBoxCrossingSensor3 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 3 to \" & ComboBoxCrossingSensor3 . Text ) End Sub Private Sub ComboBoxCrossingSensor4_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor4 . SelectedIndexChanged RuntimeConfig . config . InnerGateInSensor = ComboBoxCrossingSensor4 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 4 to \" & ComboBoxCrossingSensor4 . Text ) End Sub Private Sub ComboBoxCrossingBuzzer_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingBuzzer . SelectedIndexChanged RuntimeConfig . config . LevelCrossingWarningBuzzer = ComboBoxCrossingBuzzer . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Buzzer to \" & ComboBoxCrossingBuzzer . Text ) End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/Configs.vb"},{"location":"mainsystem/Files/Configs_8vb/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/Configs.vb"},{"location":"mainsystem/Files/Configs_8vb/#source-code","text":"Public Class Configs Public NoneNormalSetting As Color = Color . LightBlue Public WarningSetting As Color = Color . LightYellow Public OnState As Color = Color . LightGreen Public OffState As Color = Color . Red ' Access and control Private Sub TimerUserManagment_Tick ( sender As Object , e As EventArgs ) Handles TimerUserManagment . Tick LabelLoggedInAs . Text = \"Logged in as : \" & UserManagment . LoggedInUserName & \" (Access level : \" & UserManagment . LoggedInAccessLevel & \")\" If UserManagment . LoggedInAccessLevel > 0 Then ButtonLogin . Text = \"Logout\" Else ButtonLogin . Text = \"Login\" End If ' Power access If UserManagment . LoggedInAccessLevel > 0 Then GroupBoxPowerControls . Enabled = True GroupBoxPowerControls . Text = \"Power Control\" Else GroupBoxPowerControls . Enabled = False GroupBoxPowerControls . Text = \"Power - LOCKED!\" End If If UserManagment . LoggedInAccessLevel > 2 Then GroupBoxEStop . Enabled = True GroupBoxEStop . Text = \"EStop Control\" Else GroupBoxEStop . Enabled = False GroupBoxEStop . Text = \"EStop Locked - LOCKED!\" End If ' Logic access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxDirectionControls . Enabled = True GroupBoxDirectionControls . Text = \"Logic Control\" Else GroupBoxDirectionControls . Enabled = False GroupBoxDirectionControls . Text = \"Logic - LOCKED!\" End If ' Signal access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxSignalControls . Enabled = True GroupBoxSignalControls . Text = \"Signal Settings\" Else GroupBoxSignalControls . Enabled = False GroupBoxSignalControls . Text = \"Signal Settings - LOCKED!\" End If ' Point access If UserManagment . LoggedInAccessLevel > 2 Then GroupBoxPointControls . Enabled = True GroupBoxPointControls . Text = \"Point Settings\" Else GroupBoxPointControls . Enabled = False GroupBoxPointControls . Text = \"Point Settings - LOCKED!\" End If ' Section access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxSectionControls . Enabled = True GroupBoxSectionControls . Text = \"Section Settings\" Else GroupBoxSectionControls . Enabled = False GroupBoxSectionControls . Text = \"Section Settings - LOCKED!\" End If ' lever access If UserManagment . LoggedInAccessLevel > 1 Then GroupBoxLeverControls . Enabled = True GroupBoxLeverControls . Text = \"lever Settings\" Else GroupBoxLeverControls . Enabled = False GroupBoxleverControls . Text = \"lever Settings - LOCKED!\" End If End Sub ' LogicTimer Private Sub TimerMainLogic_Tick ( sender As Object , e As EventArgs ) Handles TimerMainLogic . Tick ConfigPower . TimerTick () ConfigSignals . TimerTick () ConfigPoints . TimerTick () ConfigSections . TimerTick () Configlevers . TimerTick () ConfigCrossing . TimerTick () End Sub ' Login / out button Private Sub ButtonLogin_Click ( sender As Object , e As EventArgs ) Handles ButtonLogin . Click If UserManagment . LoggedInAccessLevel > 0 Then UserManagment . Logout () Else LoginForm . Show () End If End Sub ' Save to file button Private Sub ButtonSave_Click ( sender As Object , e As EventArgs ) Handles ButtonSave . Click RuntimeConfig . Save () End Sub ' Close Button Private Sub ButtonClose_Click ( sender As Object , e As EventArgs ) Me . Close () End Sub ' EStop Private Sub ButtonESTOP_Click ( sender As Object , e As EventArgs ) Handles ButtonESTOP . Click Safety . EStopSoftware = True AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Triggered Estop \" ) End Sub ' Power and Logic Private Sub ButtonPowerSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerSystem . Click ConfigPower . ChangeSystemmPowerState ( \"System\" ) End Sub Private Sub ButtonPowerOn_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerOn . Click ConfigPower . ChangeSystemmPowerState ( \"On\" ) End Sub Private Sub ButtonPowerOff_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerOff . Click ConfigPower . ChangeSystemmPowerState ( \"Off\" ) End Sub Private Sub ButtonPowerExternal_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerExternal . Click ChangeSystemmLogicState ( \"External\" ) End Sub Private Sub ButtonPowerManual_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerManual . Click ChangeSystemmLogicState ( \"Manual\" ) End Sub Private Sub ButtonPowerAutomatic_Click ( sender As Object , e As EventArgs ) Handles ButtonPowerAutomatic . Click ChangeSystemmLogicState ( \"Computer\" ) End Sub Private Sub ButtonEStopReset_Click ( sender As Object , e As EventArgs ) Handles ButtonEStopReset . Click Safety . EStopReset = True AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Reset EStop \" ) End Sub ' Signals Private Sub ComboBoxSignalGroups_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSignalGroups . SelectedIndexChanged ConfigSignals . ChangeSelectedGroup () End Sub Private Sub ButtonSignalSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalSystem . Click ConfigSignals . ChangeSignalState ( \"System\" ) End Sub Private Sub ButtonSignalReset_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalReset . Click ConfigSignals . ChangeSignalState ( \"System\" ) End Sub Private Sub ButtonSignalClear_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalClear . Click ConfigSignals . ChangeSignalState ( \"Clear\" ) End Sub Private Sub ButtonSignalCaution_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalCaution . Click ConfigSignals . ChangeSignalState ( \"Caution\" ) End Sub Private Sub ButtonSignalDanger_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalDanger . Click ConfigSignals . ChangeSignalState ( \"Danger\" ) End Sub Private Sub ButtonSignalShunt_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalShunt . Click ConfigSignals . ChangeSignalState ( \"Shunt\" ) End Sub Private Sub ButtonSignalBypass_Click ( sender As Object , e As EventArgs ) Handles ButtonSignalBypass . Click ConfigSignals . ChangeSignalState ( \"Bypass\" ) End Sub Public Sub PaintSignalFieldState ( State As String ) Dim F As System . Drawing . Graphics F = PictureBoxSignalFieldState . CreateGraphics If State = SignalAtDanger Then F . FillEllipse ( Brushes . Red , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtCaution Then F . FillEllipse ( Brushes . Yellow , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtClear Then F . FillEllipse ( Brushes . LightGreen , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtShunt Then F . FillEllipse ( Brushes . White , 4 , 4 , 42 , 42 ) ElseIf State = \"Off\" Then F . FillEllipse ( Brushes . Gray , 4 , 4 , 42 , 42 ) Else F . FillEllipse ( Brushes . Pink , 4 , 4 , 42 , 42 ) End If End Sub Public Sub PaintSignalLogicState ( State As String ) Dim L As System . Drawing . Graphics L = PictureBoxSignalLogicState . CreateGraphics If State = SignalAtDanger Then L . FillEllipse ( Brushes . Red , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtCaution Then L . FillEllipse ( Brushes . Yellow , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtClear Then L . FillEllipse ( Brushes . LightGreen , 4 , 4 , 42 , 42 ) ElseIf State = SignalAtShunt Then L . FillEllipse ( Brushes . White , 4 , 4 , 42 , 42 ) ElseIf State = \"Off\" Then L . FillEllipse ( Brushes . Gray , 4 , 4 , 42 , 42 ) Else L . FillEllipse ( Brushes . Pink , 4 , 4 , 42 , 42 ) End If End Sub ' Points Private Sub ButtonPointInputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputSystem . Click ConfigPoints . ChangePointInput ( \"System\" ) End Sub Private Sub ButtonPointInputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputNormal . Click ConfigPoints . ChangePointInput ( \"Normal\" ) End Sub Private Sub ButtonPointInputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputReverse . Click ConfigPoints . ChangePointInput ( \"Reverse\" ) End Sub Private Sub ButtonPointInputNoInput_Click ( sender As Object , e As EventArgs ) Handles ButtonPointInputNoInput . Click ConfigPoints . ChangePointInput ( \"NoInput\" ) End Sub Private Sub ButtonPointOutputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputSystem . Click ConfigPoints . ChangePointOutput ( \"System\" ) End Sub Private Sub ButtonPointOutputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputNormal . Click ConfigPoints . ChangePointOutput ( \"Normal\" ) End Sub Private Sub ButtonPointOutputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputReverse . Click ConfigPoints . ChangePointOutput ( \"Reverse\" ) End Sub Private Sub ButtonPointOutputIsolate_Click ( sender As Object , e As EventArgs ) Handles ButtonPointOutputIsolate . Click ConfigPoints . ChangePointOutput ( \"Off\" ) End Sub ' Sections Private Sub ComboBoxSectionGroups_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSectionGroups . SelectedIndexChanged ConfigSections . ChangeSelectedGroup () End Sub Private Sub ComboBoxSection_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxSection . SelectedIndexChanged ConfigSections . GetSectionValues () End Sub Private Sub TrackBarSectionSetVoltage_Scroll ( sender As Object , e As EventArgs ) Handles TrackBarSectionSetVoltage . Scroll ConfigSections . ChangeSectionSetValue ( TrackBarSectionSetVoltage . Value ) End Sub Private Sub TrackBarSectionErrorVoltage_Scroll ( sender As Object , e As EventArgs ) Handles TrackBarSectionErrorVoltage . Scroll ConfigSections . ChangeSectionErrorValue ( TrackBarSectionErrorVoltage . Value ) End Sub Private Sub ButtonSectionUnoccupied_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionUnoccupied . Click ConfigSections . ChangeSectionState ( \"UnOccupied\" ) End Sub Private Sub ButtonSectionOccupied_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionOccupied . Click ConfigSections . ChangeSectionState ( \"Occupy\" ) End Sub Private Sub ButtonSectionSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonSectionSystem . Click ConfigSections . ChangeSectionState ( \"Detect\" ) End Sub ' levers Private Sub ButtonLeversInputReverse_Click ( sender As Object , e As EventArgs ) Handles ButtonLeversInputReverse . Click Configlevers . ChangeleverInput ( \"Reverse\" ) End Sub Private Sub ButtonLeverInputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverInputSystem . Click Configlevers . ChangeleverInput ( \"System\" ) End Sub Private Sub ButtonLeverOutputLock_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputLock . Click Configlevers . ChangeleverOutput ( \"Lock\" ) End Sub Private Sub ButtonLeverInputNormal_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverInputNormal . Click Configlevers . ChangeleverInput ( \"Normal\" ) End Sub Private Sub ButtonLeverOutputSystem_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputSystem . Click Configlevers . ChangeleverOutput ( \"System\" ) End Sub Private Sub ButtonLeversInputNoInput_Click ( sender As Object , e As EventArgs ) Handles ButtonLeversInputNoInput . Click Configlevers . ChangeleverInput ( \"Unknown\" ) End Sub Private Sub ButtonLeverOutputRelease_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverOutputRelease . Click Configlevers . ChangeleverOutput ( \"Release\" ) End Sub Private Sub ButtonLeverAutoRestroke_Click ( sender As Object , e As EventArgs ) Handles ButtonLeverAutoRestroke . Click If Not ComboBoxLever . SelectedIndex = - 1 Then If LeverHasRestrokeSetting ( ComboBoxLever . SelectedIndex ) = True Then If RuntimeConfig . config . LeverRestroke ( ComboBoxLever . SelectedIndex ) = True Then ChangeleverAutoRestroke ( False ) Else ChangeleverAutoRestroke ( True ) End If End If End If End Sub ' Level Crossing Private Sub ComboBoxCrossingSensor1_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor1 . SelectedIndexChanged RuntimeConfig . config . OutterGateOutSensor = ComboBoxCrossingSensor1 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 1 to \" & ComboBoxCrossingSensor1 . Text ) End Sub Private Sub ComboBoxCrossingSensor2_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor2 . SelectedIndexChanged RuntimeConfig . config . OutterGateInSensor = ComboBoxCrossingSensor2 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 2 to \" & ComboBoxCrossingSensor2 . Text ) End Sub Private Sub ComboBoxCrossingSensor3_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor3 . SelectedIndexChanged RuntimeConfig . config . InnerGateOutSensor = ComboBoxCrossingSensor3 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 3 to \" & ComboBoxCrossingSensor3 . Text ) End Sub Private Sub ComboBoxCrossingSensor4_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingSensor4 . SelectedIndexChanged RuntimeConfig . config . InnerGateInSensor = ComboBoxCrossingSensor4 . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Sensor 4 to \" & ComboBoxCrossingSensor4 . Text ) End Sub Private Sub ComboBoxCrossingBuzzer_SelectedIndexChanged ( sender As Object , e As EventArgs ) Handles ComboBoxCrossingBuzzer . SelectedIndexChanged RuntimeConfig . config . LevelCrossingWarningBuzzer = ComboBoxCrossingBuzzer . Text AlarmsAndNotifications . UpdateSystemLog ( \"SYSTEM SETTINGS LOG - \" & UserManagment . LoggedInUserName & \" Updated Crossing Buzzer to \" & ComboBoxCrossingBuzzer . Text ) End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Definitions_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/Definitions.vb \u00b6 Source code \u00b6 Module Definitions ' Sections Enum TrackSectionNames SectionA = 0 SectionB = 1 SectionC = 2 SectionD = 3 SectionE = 4 SectionF = 5 SectionG = 6 SectionH = 7 SectionI = 8 SectionJ = 9 SectionK = 10 SectionL = 11 SectionM = 12 SectionN = 13 SectionO = 14 SectionP = 15 SectionQ = 16 SectionDE = 17 SectionNO = 18 SectionOP = 19 SectionQ10 = 20 SectionA11 = 21 SectionF12 = 22 SectionF13 = 23 SectionNO14 = 24 SectionC19 = 25 SectionR = 26 SectionCD = 27 End Enum Enum PointSectionNames SectionP5a = 0 SectionP5b = 1 SectionP6a = 2 SectionP6b = 3 SectionP10 = 4 SectionP11 = 5 SectionP12 = 6 SectionP13 = 7 SectionP14 = 8 SectionP19 = 9 End Enum Enum SectionState Unoccupied = 1 Occupied = 0 End Enum ' Points Enum PointNames P5a = 0 P5b = 1 P6a = 2 P6b = 3 P10 = 4 P11 = 5 P12 = 6 P13 = 7 P14 = 8 P19 = 9 End Enum Enum PointState Normal = 1 Reverse = 2 Off = 0 End Enum ' Levers Enum LeverNames Lever1 = 0 Lever2 = 1 Lever3 = 2 Lever4 = 3 Lever5 = 4 Lever6 = 5 Lever7 = 6 Lever8 = 7 Lever9 = 8 Lever10 = 9 Lever11 = 10 Lever12 = 11 Lever13 = 12 Lever14 = 13 Lever15 = 14 Lever16 = 15 Lever17 = 16 Lever18 = 17 Lever19 = 18 Lever20 = 19 Lever21 = 20 Lever22 = 21 Lever23 = 22 Lever24 = 23 End Enum Enum LeverIndicatorNames Lever24Top = 0 Lever23Top = 1 Lever22Top = 2 Lever21Top = 3 Lever20Top = 4 Lever19Top = 5 Lever18Top = 6 Lever17Top = 7 Lever16Top = 8 Lever15Top = 9 Lever14Top = 10 Lever13Top = 11 Lever12Top = 12 Lever11Top = 13 Lever10Top = 14 Lever9Top = 15 Lever8Top = 16 Lever7Top = 17 Lever6Top = 18 Lever5Top = 19 Lever4Top = 20 Lever3Top = 21 Lever2Top = 22 Lever1Top = 23 Lever1Bottom = 24 Lever2Bottom = 25 Lever3Bottom = 26 Lever4Bottom = 27 Lever5Bottom = 28 Lever6Bottom = 29 Lever7Bottom = 30 Lever8Bottom = 31 Lever9Bottom = 32 Lever10Bottom = 33 Lever11Bottom = 34 Lever12Bottom = 35 Lever13Bottom = 36 Lever14Bottom = 37 Lever15Bottom = 38 Lever16Bottom = 39 Lever17Bottom = 40 Lever18Bottom = 41 Lever19Bottom = 42 Lever20Bottom = 43 Lever21Bottom = 44 Lever22Bottom = 45 Lever23Bottom = 46 Lever24Bottom = 47 End Enum Enum LeverState Normal = 1 Reverse = 2 Off = 0 End Enum ' Buttons Enum ButtonNames Button1 = 0 Button2 = 1 Button3 = 2 Button4 = 3 Button5 = 4 Button6 = 5 Button7 = 6 Button8 = 7 Button9 = 8 Button10 = 9 Button11 = 10 Button12 = 11 Button13 = 12 Button14 = 13 Button15 = 14 Button16 = 15 Button17 = 16 Button18 = 17 Button19 = 18 Button20 = 19 Button21 = 20 Button22 = 21 Button23 = 22 Button24 = 23 Button25 = 24 Button26 = 25 Button27 = 26 Button28 = 27 Button29 = 28 Button30 = 29 Button31 = 30 Button32 = 31 Button33 = 32 Button34 = 33 Button35 = 34 Button36 = 35 Button37 = 36 Button38 = 37 Button39 = 38 Button40 = 39 End Enum Enum SignalNames AJ1E = 0 AJ2E = 1 AJ3E = 2 RAJ3E = 3 AJ4E = 4 AJ7E = 5 AJ8E = 6 AJ9E = 7 AJ16E = 8 AJ17E = 9 AJ18E = 10 AJ21E = 11 AJ3W = 12 AJ7W = 13 AJ8W = 14 AJ9W = 15 AJ15W = 16 AJ16W = 17 AJ17W = 18 AJ18W = 19 AJ22W = 20 S11 = 21 S12 = 22 S14 = 23 S19 = 24 End Enum Public ReadOnly PointReturnNormal As String = \"Normal\" Public ReadOnly PointReturnReverse As String = \"Normal\" Public ReadOnly PointReturnNoReturn As String = \"No Return\" ' Signal States Public ReadOnly SignalAtDanger As String = \"Danger\" Public ReadOnly SignalAtCaution As String = \"Caution\" Public ReadOnly SignalAtClear As String = \"Clear\" Public ReadOnly SignalAtShunt As String = \"Shunt\" ' Lever Positionss Public ReadOnly LeverInNormal As String = \"Normal\" Public ReadOnly LeverInReverse As String = \"Reverse\" ' Point Positions In Public ReadOnly PointInNormal As String = \"Normal\" Public ReadOnly PointInReverse As String = \"Reverse\" ' Point Positions Out Public ReadOnly PointToNormal As String = \"Normal\" Public ReadOnly PointToReverse As String = \"Reverse\" Public ReadOnly PointToOFF As String = \"Off\" ' Running Modes Public ReadOnly LogicModeComputer As String = \"Computer\" Public ReadOnly LogicModeManual As String = \"Manual\" ' Track Sections Public ReadOnly SectionIsOccupied As Boolean = False Public ReadOnly SectionIsClear As Boolean = True End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/Definitions.vb"},{"location":"mainsystem/Files/Definitions_8vb/#githubsignallingsystemehmr-signalling-systemconfigsdefinitionsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/Definitions.vb"},{"location":"mainsystem/Files/Definitions_8vb/#source-code","text":"Module Definitions ' Sections Enum TrackSectionNames SectionA = 0 SectionB = 1 SectionC = 2 SectionD = 3 SectionE = 4 SectionF = 5 SectionG = 6 SectionH = 7 SectionI = 8 SectionJ = 9 SectionK = 10 SectionL = 11 SectionM = 12 SectionN = 13 SectionO = 14 SectionP = 15 SectionQ = 16 SectionDE = 17 SectionNO = 18 SectionOP = 19 SectionQ10 = 20 SectionA11 = 21 SectionF12 = 22 SectionF13 = 23 SectionNO14 = 24 SectionC19 = 25 SectionR = 26 SectionCD = 27 End Enum Enum PointSectionNames SectionP5a = 0 SectionP5b = 1 SectionP6a = 2 SectionP6b = 3 SectionP10 = 4 SectionP11 = 5 SectionP12 = 6 SectionP13 = 7 SectionP14 = 8 SectionP19 = 9 End Enum Enum SectionState Unoccupied = 1 Occupied = 0 End Enum ' Points Enum PointNames P5a = 0 P5b = 1 P6a = 2 P6b = 3 P10 = 4 P11 = 5 P12 = 6 P13 = 7 P14 = 8 P19 = 9 End Enum Enum PointState Normal = 1 Reverse = 2 Off = 0 End Enum ' Levers Enum LeverNames Lever1 = 0 Lever2 = 1 Lever3 = 2 Lever4 = 3 Lever5 = 4 Lever6 = 5 Lever7 = 6 Lever8 = 7 Lever9 = 8 Lever10 = 9 Lever11 = 10 Lever12 = 11 Lever13 = 12 Lever14 = 13 Lever15 = 14 Lever16 = 15 Lever17 = 16 Lever18 = 17 Lever19 = 18 Lever20 = 19 Lever21 = 20 Lever22 = 21 Lever23 = 22 Lever24 = 23 End Enum Enum LeverIndicatorNames Lever24Top = 0 Lever23Top = 1 Lever22Top = 2 Lever21Top = 3 Lever20Top = 4 Lever19Top = 5 Lever18Top = 6 Lever17Top = 7 Lever16Top = 8 Lever15Top = 9 Lever14Top = 10 Lever13Top = 11 Lever12Top = 12 Lever11Top = 13 Lever10Top = 14 Lever9Top = 15 Lever8Top = 16 Lever7Top = 17 Lever6Top = 18 Lever5Top = 19 Lever4Top = 20 Lever3Top = 21 Lever2Top = 22 Lever1Top = 23 Lever1Bottom = 24 Lever2Bottom = 25 Lever3Bottom = 26 Lever4Bottom = 27 Lever5Bottom = 28 Lever6Bottom = 29 Lever7Bottom = 30 Lever8Bottom = 31 Lever9Bottom = 32 Lever10Bottom = 33 Lever11Bottom = 34 Lever12Bottom = 35 Lever13Bottom = 36 Lever14Bottom = 37 Lever15Bottom = 38 Lever16Bottom = 39 Lever17Bottom = 40 Lever18Bottom = 41 Lever19Bottom = 42 Lever20Bottom = 43 Lever21Bottom = 44 Lever22Bottom = 45 Lever23Bottom = 46 Lever24Bottom = 47 End Enum Enum LeverState Normal = 1 Reverse = 2 Off = 0 End Enum ' Buttons Enum ButtonNames Button1 = 0 Button2 = 1 Button3 = 2 Button4 = 3 Button5 = 4 Button6 = 5 Button7 = 6 Button8 = 7 Button9 = 8 Button10 = 9 Button11 = 10 Button12 = 11 Button13 = 12 Button14 = 13 Button15 = 14 Button16 = 15 Button17 = 16 Button18 = 17 Button19 = 18 Button20 = 19 Button21 = 20 Button22 = 21 Button23 = 22 Button24 = 23 Button25 = 24 Button26 = 25 Button27 = 26 Button28 = 27 Button29 = 28 Button30 = 29 Button31 = 30 Button32 = 31 Button33 = 32 Button34 = 33 Button35 = 34 Button36 = 35 Button37 = 36 Button38 = 37 Button39 = 38 Button40 = 39 End Enum Enum SignalNames AJ1E = 0 AJ2E = 1 AJ3E = 2 RAJ3E = 3 AJ4E = 4 AJ7E = 5 AJ8E = 6 AJ9E = 7 AJ16E = 8 AJ17E = 9 AJ18E = 10 AJ21E = 11 AJ3W = 12 AJ7W = 13 AJ8W = 14 AJ9W = 15 AJ15W = 16 AJ16W = 17 AJ17W = 18 AJ18W = 19 AJ22W = 20 S11 = 21 S12 = 22 S14 = 23 S19 = 24 End Enum Public ReadOnly PointReturnNormal As String = \"Normal\" Public ReadOnly PointReturnReverse As String = \"Normal\" Public ReadOnly PointReturnNoReturn As String = \"No Return\" ' Signal States Public ReadOnly SignalAtDanger As String = \"Danger\" Public ReadOnly SignalAtCaution As String = \"Caution\" Public ReadOnly SignalAtClear As String = \"Clear\" Public ReadOnly SignalAtShunt As String = \"Shunt\" ' Lever Positionss Public ReadOnly LeverInNormal As String = \"Normal\" Public ReadOnly LeverInReverse As String = \"Reverse\" ' Point Positions In Public ReadOnly PointInNormal As String = \"Normal\" Public ReadOnly PointInReverse As String = \"Reverse\" ' Point Positions Out Public ReadOnly PointToNormal As String = \"Normal\" Public ReadOnly PointToReverse As String = \"Reverse\" Public ReadOnly PointToOFF As String = \"Off\" ' Running Modes Public ReadOnly LogicModeComputer As String = \"Computer\" Public ReadOnly LogicModeManual As String = \"Manual\" ' Track Sections Public ReadOnly SectionIsOccupied As Boolean = False Public ReadOnly SectionIsClear As Boolean = True End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/DigitalDeviceAddress_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/DigitalDeviceAddress.vb \u00b6 Source code \u00b6 Public Class DigitalDeviceAddress ' Input address ' Frame Public Shared ReadOnly InputAddressEStopMonitor As Integer = 158 Public Shared ReadOnly InputAddressACMonitor As Integer = 159 Public Shared ReadOnly InputAddressAUXContactorDetection As Integer = 160 ' Public Shared ReadOnly InputAddressEastBound As Integer = 145 Public Shared ReadOnly InputAddressWestBound As Integer = 146 Public Shared ReadOnly InputAddressMode As Integer = 0 Public Shared ReadOnly InputAddressReleaseLevers As Integer = 0 ' Frame Public Shared ReadOnly InputAddressOuterCrossingGateOutwardsBeamMade As Integer = 49 ' Outer gate outwards facing beam made ( Switch 1 ) Public Shared ReadOnly InputAddressOuterCrossingGateOutwardsBeamBroken As Integer = 50 ' Outer gate outwards facing beam Broken ( Switch 1 ) Public Shared ReadOnly InputAddressOuterCrossingGateInwardsBeamMade As Integer = 51 ' Outer gate outwards facing beam made ( Switch 2 ) Public Shared ReadOnly InputAddressOuterCrossingGateInwardsBeamBroken As Integer = 52 ' Outer gate inwards facing beam made ( Switch 2 ) Public Shared ReadOnly InputAddressInnerCrossingGateOutwardsBeamMade As Integer = 53 ' Inner gate inwards facing beam Broken ( Switch 3 ) Public Shared ReadOnly InputAddressInnerCrossingGateOutwardsBeamBroken As Integer = 54 ' Inner gate outwards facing beam Broken ( Switch 3 ) Public Shared ReadOnly InputAddressInnerCrossingGateInwardsBeamMade As Integer = 55 ' Inner gate outwards facing beam made ( Switch 4 ) Public Shared ReadOnly InputAddressInnerCrossingGateInwardsBeamBroken As Integer = 56 ' Inner gate outwards facing beam Broken ( Switch 4 ) Public Shared ReadOnly InputAddressTunnelEastEndOpen As Integer = 41 ' Tunnel end 1 NO Public Shared ReadOnly InputAddressTunnelEastEndClose As Integer = 42 ' Tunnel end 1 NC Public Shared ReadOnly InputAddressTunnelWestEndOpen As Integer = 43 ' Tunnel end 2 NO Public Shared ReadOnly InputAddressTunnelWestEndClose As Integer = 44 ' Tunnel end 2 NC ' Levers Public Shared ReadOnly InputAddressLeverNormal () As Integer = { 57 , 59 , 61 , 63 , 65 , 67 , 69 , 71 , 73 , 75 , 77 , 79 , 81 , 83 , 85 , 87 , 89 , 91 , 93 , 0 , 95 , 153 , 0 , 0 } ' Lever Normal Public Shared ReadOnly InputAddressLeverReverse () As Integer = { 58 , 60 , 62 , 64 , 66 , 68 , 70 , 72 , 74 , 76 , 78 , 80 , 82 , 84 , 86 , 88 , 90 , 92 , 94 , 0 , 96 , 154 , 0 , 0 } ' Lever Reverse Public Shared ReadOnly OutputAddressLeverLock () As Integer = { 185 , 186 , 187 , 188 , 189 , 190 , 191 , 192 , 177 , 178 , 179 , 181 , 182 , 183 , 184 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 0 , 0 } ' Lever Locks ' Buttons Public Shared ReadOnly InputAddressButton () As Integer = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 } ' Button Inputs Public Shared ReadOnly OutputAddressButtonIndicator () As Integer = { 281 , 282 , 283 , 284 , 285 , 286 , 287 , 288 , 273 , 274 , 275 , 276 , 277 , 278 , 279 , 280 , 265 , 266 , 267 , 268 , 269 , 270 , 271 , 272 , 257 , 258 , 259 , 260 , 261 , 262 , 263 , 264 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 } ' Button Indicators ' Points Public Shared ReadOnly OutputAddressPointsNormal () As Integer = { 249 , 251 , 253 , 255 , 241 , 243 , 245 , 247 , 233 , 235 } ' Point Normal Public Shared ReadOnly OutputAddressPointsReverse () As Integer = { 250 , 252 , 254 , 256 , 242 , 244 , 246 , 248 , 234 , 236 } ' Point Reverse ' Power check inputs Public Shared ReadOnly InputAddressPowerCheckInput () As Integer = { 97 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 124 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 137 , 138 , 139 , 140 , 141 , 142 , 143 , 144 } ' Supply Inputs ' Old Output addresses Public Shared ReadOnly SafetyRelay As Integer = 4 ' Safety Relay Public Shared ReadOnly OutputAddressBell As Integer = 168 ' Bell Relay Public Shared ReadOnly OutputAddressEastBound As Integer = 2 ' Eastbound Relay Public Shared ReadOnly OutputAddressWestBound As Integer = 1 ' Westbound Relay ' Output addresses ------------------------------------------------------------------------------------------------ ' Frame Public Shared ReadOnly OutputAddressEStopReset As Integer = 89 Public Shared ReadOnly OutputAddressEStopTrigger As Integer = 90 Public Shared ReadOnly OutputAddressAirRelay As Integer = 91 Public Shared ReadOnly OutputAddressAUXContactorON As Integer = 92 Public Shared ReadOnly OutputAddressAUXContactorOFF As Integer = 93 ' Crossing Public Shared ReadOnly OutputAddressCrossingWarningBuzzer As Integer = 0 ' Level Crossing warning buzzer ' Signals Public Shared SignalOutputAddressClear ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressCaution ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressDanger ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressRoute1 ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressRoute2 ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressShunt ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressAJ16WLimitOfShunt As Integer = 308 ' Station equipment Outputs Public Shared ReadOnly OutputAddressCallInBuzzer As Integer = 294 ' WB OFF Indicator Public Shared ReadOnly OutputAddressEBOFFIndicator As Integer = 295 ' EB OFF Indicator Public Shared ReadOnly OutputAddressWBOFFIndicator As Integer = 296 ' WB OFF Indicator ' Mimic Display Outputs Public Shared ReadOnly OutputAddressMimicDisplaySectionA As Integer = 121 ' Mimic Display Section A Public Shared ReadOnly OutputAddressMimicDisplaySectionB As Integer = 122 ' Mimic Display Section B Public Shared ReadOnly OutputAddressMimicDisplaySectionC As Integer = 123 ' Mimic Display Section C Public Shared ReadOnly OutputAddressMimicDisplaySectionD As Integer = 124 ' Mimic Display Section D Public Shared ReadOnly OutputAddressMimicDisplaySectionE As Integer = 125 ' Mimic Display Section E Public Shared ReadOnly OutputAddressMimicDisplaySectionF As Integer = 126 ' Mimic Display Section F Public Shared ReadOnly OutputAddressMimicDisplaySectionFF13 As Integer = 102 ' Mimic Display Section F / F13 Public Shared ReadOnly OutputAddressMimicDisplaySectionG As Integer = 127 ' Mimic Display Section G Public Shared ReadOnly OutputAddressMimicDisplaySectionH As Integer = 128 ' Mimic Display Section H Public Shared ReadOnly OutputAddressMimicDisplaySectionI As Integer = 113 ' Mimic Display Section I Public Shared ReadOnly OutputAddressMimicDisplaySectionJ As Integer = 114 ' Mimic Display Section J Public Shared ReadOnly OutputAddressMimicDisplaySectionK As Integer = 115 ' Mimic Display Section K Public Shared ReadOnly OutputAddressMimicDisplaySectionL As Integer = 116 ' Mimic Display Section L Public Shared ReadOnly OutputAddressMimicDisplaySectionM As Integer = 117 ' Mimic Display Section M Public Shared ReadOnly OutputAddressMimicDisplaySectionN As Integer = 118 ' Mimic Display Section N Public Shared ReadOnly OutputAddressMimicDisplaySectionO As Integer = 119 ' Mimic Display Section O Public Shared ReadOnly OutputAddressMimicDisplaySectionP As Integer = 120 ' Mimic Display Section P Public Shared ReadOnly OutputAddressMimicDisplaySectionQ As Integer = 105 ' Mimic Display Section Q Public Shared ReadOnly OutputAddressMimicDisplayPoint5a As Integer = 106 ' Mimic Display Point5a Public Shared ReadOnly OutputAddressMimicDisplayPoint5b As Integer = 107 ' Mimic Display Point5b Public Shared ReadOnly OutputAddressMimicDisplayPoint6a As Integer = 108 ' Mimic Display Point6a Public Shared ReadOnly OutputAddressMimicDisplayPoint6b As Integer = 109 ' Mimic Display Point6b Public Shared ReadOnly OutputAddressMimicDisplayPoint10 As Integer = 110 ' Mimic Display Point10 Public Shared ReadOnly OutputAddressMimicDisplayPoint11 As Integer = 111 ' Mimic Display Point11 Public Shared ReadOnly OutputAddressMimicDisplayPoint12 As Integer = 112 ' Mimic Display Point12 Public Shared ReadOnly OutputAddressMimicDisplayPoint13 As Integer = 97 ' Mimic Display Point13 Public Shared ReadOnly OutputAddressMimicDisplayPoint14 As Integer = 98 ' Mimic Display Point14 Public Shared ReadOnly OutputAddressMimicDisplayPoint19 As Integer = 99 ' Mimic Display Point19 Public Shared ReadOnly OutputAddressMimicDisplayEB As Integer = 100 ' Mimic Display EB Public Shared ReadOnly OutputAddressMimicDisplayWB As Integer = 101 ' Mimic Display WB End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/DigitalDeviceAddress.vb"},{"location":"mainsystem/Files/DigitalDeviceAddress_8vb/#githubsignallingsystemehmr-signalling-systemdevicesdigitaldeviceaddressvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/DigitalDeviceAddress.vb"},{"location":"mainsystem/Files/DigitalDeviceAddress_8vb/#source-code","text":"Public Class DigitalDeviceAddress ' Input address ' Frame Public Shared ReadOnly InputAddressEStopMonitor As Integer = 158 Public Shared ReadOnly InputAddressACMonitor As Integer = 159 Public Shared ReadOnly InputAddressAUXContactorDetection As Integer = 160 ' Public Shared ReadOnly InputAddressEastBound As Integer = 145 Public Shared ReadOnly InputAddressWestBound As Integer = 146 Public Shared ReadOnly InputAddressMode As Integer = 0 Public Shared ReadOnly InputAddressReleaseLevers As Integer = 0 ' Frame Public Shared ReadOnly InputAddressOuterCrossingGateOutwardsBeamMade As Integer = 49 ' Outer gate outwards facing beam made ( Switch 1 ) Public Shared ReadOnly InputAddressOuterCrossingGateOutwardsBeamBroken As Integer = 50 ' Outer gate outwards facing beam Broken ( Switch 1 ) Public Shared ReadOnly InputAddressOuterCrossingGateInwardsBeamMade As Integer = 51 ' Outer gate outwards facing beam made ( Switch 2 ) Public Shared ReadOnly InputAddressOuterCrossingGateInwardsBeamBroken As Integer = 52 ' Outer gate inwards facing beam made ( Switch 2 ) Public Shared ReadOnly InputAddressInnerCrossingGateOutwardsBeamMade As Integer = 53 ' Inner gate inwards facing beam Broken ( Switch 3 ) Public Shared ReadOnly InputAddressInnerCrossingGateOutwardsBeamBroken As Integer = 54 ' Inner gate outwards facing beam Broken ( Switch 3 ) Public Shared ReadOnly InputAddressInnerCrossingGateInwardsBeamMade As Integer = 55 ' Inner gate outwards facing beam made ( Switch 4 ) Public Shared ReadOnly InputAddressInnerCrossingGateInwardsBeamBroken As Integer = 56 ' Inner gate outwards facing beam Broken ( Switch 4 ) Public Shared ReadOnly InputAddressTunnelEastEndOpen As Integer = 41 ' Tunnel end 1 NO Public Shared ReadOnly InputAddressTunnelEastEndClose As Integer = 42 ' Tunnel end 1 NC Public Shared ReadOnly InputAddressTunnelWestEndOpen As Integer = 43 ' Tunnel end 2 NO Public Shared ReadOnly InputAddressTunnelWestEndClose As Integer = 44 ' Tunnel end 2 NC ' Levers Public Shared ReadOnly InputAddressLeverNormal () As Integer = { 57 , 59 , 61 , 63 , 65 , 67 , 69 , 71 , 73 , 75 , 77 , 79 , 81 , 83 , 85 , 87 , 89 , 91 , 93 , 0 , 95 , 153 , 0 , 0 } ' Lever Normal Public Shared ReadOnly InputAddressLeverReverse () As Integer = { 58 , 60 , 62 , 64 , 66 , 68 , 70 , 72 , 74 , 76 , 78 , 80 , 82 , 84 , 86 , 88 , 90 , 92 , 94 , 0 , 96 , 154 , 0 , 0 } ' Lever Reverse Public Shared ReadOnly OutputAddressLeverLock () As Integer = { 185 , 186 , 187 , 188 , 189 , 190 , 191 , 192 , 177 , 178 , 179 , 181 , 182 , 183 , 184 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 0 , 0 } ' Lever Locks ' Buttons Public Shared ReadOnly InputAddressButton () As Integer = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 } ' Button Inputs Public Shared ReadOnly OutputAddressButtonIndicator () As Integer = { 281 , 282 , 283 , 284 , 285 , 286 , 287 , 288 , 273 , 274 , 275 , 276 , 277 , 278 , 279 , 280 , 265 , 266 , 267 , 268 , 269 , 270 , 271 , 272 , 257 , 258 , 259 , 260 , 261 , 262 , 263 , 264 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 } ' Button Indicators ' Points Public Shared ReadOnly OutputAddressPointsNormal () As Integer = { 249 , 251 , 253 , 255 , 241 , 243 , 245 , 247 , 233 , 235 } ' Point Normal Public Shared ReadOnly OutputAddressPointsReverse () As Integer = { 250 , 252 , 254 , 256 , 242 , 244 , 246 , 248 , 234 , 236 } ' Point Reverse ' Power check inputs Public Shared ReadOnly InputAddressPowerCheckInput () As Integer = { 97 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 124 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 137 , 138 , 139 , 140 , 141 , 142 , 143 , 144 } ' Supply Inputs ' Old Output addresses Public Shared ReadOnly SafetyRelay As Integer = 4 ' Safety Relay Public Shared ReadOnly OutputAddressBell As Integer = 168 ' Bell Relay Public Shared ReadOnly OutputAddressEastBound As Integer = 2 ' Eastbound Relay Public Shared ReadOnly OutputAddressWestBound As Integer = 1 ' Westbound Relay ' Output addresses ------------------------------------------------------------------------------------------------ ' Frame Public Shared ReadOnly OutputAddressEStopReset As Integer = 89 Public Shared ReadOnly OutputAddressEStopTrigger As Integer = 90 Public Shared ReadOnly OutputAddressAirRelay As Integer = 91 Public Shared ReadOnly OutputAddressAUXContactorON As Integer = 92 Public Shared ReadOnly OutputAddressAUXContactorOFF As Integer = 93 ' Crossing Public Shared ReadOnly OutputAddressCrossingWarningBuzzer As Integer = 0 ' Level Crossing warning buzzer ' Signals Public Shared SignalOutputAddressClear ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressCaution ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressDanger ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressRoute1 ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressRoute2 ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressShunt ( Signals . SignalCount ) As Integer Public Shared SignalOutputAddressAJ16WLimitOfShunt As Integer = 308 ' Station equipment Outputs Public Shared ReadOnly OutputAddressCallInBuzzer As Integer = 294 ' WB OFF Indicator Public Shared ReadOnly OutputAddressEBOFFIndicator As Integer = 295 ' EB OFF Indicator Public Shared ReadOnly OutputAddressWBOFFIndicator As Integer = 296 ' WB OFF Indicator ' Mimic Display Outputs Public Shared ReadOnly OutputAddressMimicDisplaySectionA As Integer = 121 ' Mimic Display Section A Public Shared ReadOnly OutputAddressMimicDisplaySectionB As Integer = 122 ' Mimic Display Section B Public Shared ReadOnly OutputAddressMimicDisplaySectionC As Integer = 123 ' Mimic Display Section C Public Shared ReadOnly OutputAddressMimicDisplaySectionD As Integer = 124 ' Mimic Display Section D Public Shared ReadOnly OutputAddressMimicDisplaySectionE As Integer = 125 ' Mimic Display Section E Public Shared ReadOnly OutputAddressMimicDisplaySectionF As Integer = 126 ' Mimic Display Section F Public Shared ReadOnly OutputAddressMimicDisplaySectionFF13 As Integer = 102 ' Mimic Display Section F / F13 Public Shared ReadOnly OutputAddressMimicDisplaySectionG As Integer = 127 ' Mimic Display Section G Public Shared ReadOnly OutputAddressMimicDisplaySectionH As Integer = 128 ' Mimic Display Section H Public Shared ReadOnly OutputAddressMimicDisplaySectionI As Integer = 113 ' Mimic Display Section I Public Shared ReadOnly OutputAddressMimicDisplaySectionJ As Integer = 114 ' Mimic Display Section J Public Shared ReadOnly OutputAddressMimicDisplaySectionK As Integer = 115 ' Mimic Display Section K Public Shared ReadOnly OutputAddressMimicDisplaySectionL As Integer = 116 ' Mimic Display Section L Public Shared ReadOnly OutputAddressMimicDisplaySectionM As Integer = 117 ' Mimic Display Section M Public Shared ReadOnly OutputAddressMimicDisplaySectionN As Integer = 118 ' Mimic Display Section N Public Shared ReadOnly OutputAddressMimicDisplaySectionO As Integer = 119 ' Mimic Display Section O Public Shared ReadOnly OutputAddressMimicDisplaySectionP As Integer = 120 ' Mimic Display Section P Public Shared ReadOnly OutputAddressMimicDisplaySectionQ As Integer = 105 ' Mimic Display Section Q Public Shared ReadOnly OutputAddressMimicDisplayPoint5a As Integer = 106 ' Mimic Display Point5a Public Shared ReadOnly OutputAddressMimicDisplayPoint5b As Integer = 107 ' Mimic Display Point5b Public Shared ReadOnly OutputAddressMimicDisplayPoint6a As Integer = 108 ' Mimic Display Point6a Public Shared ReadOnly OutputAddressMimicDisplayPoint6b As Integer = 109 ' Mimic Display Point6b Public Shared ReadOnly OutputAddressMimicDisplayPoint10 As Integer = 110 ' Mimic Display Point10 Public Shared ReadOnly OutputAddressMimicDisplayPoint11 As Integer = 111 ' Mimic Display Point11 Public Shared ReadOnly OutputAddressMimicDisplayPoint12 As Integer = 112 ' Mimic Display Point12 Public Shared ReadOnly OutputAddressMimicDisplayPoint13 As Integer = 97 ' Mimic Display Point13 Public Shared ReadOnly OutputAddressMimicDisplayPoint14 As Integer = 98 ' Mimic Display Point14 Public Shared ReadOnly OutputAddressMimicDisplayPoint19 As Integer = 99 ' Mimic Display Point19 Public Shared ReadOnly OutputAddressMimicDisplayEB As Integer = 100 ' Mimic Display EB Public Shared ReadOnly OutputAddressMimicDisplayWB As Integer = 101 ' Mimic Display WB End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/EastBoundComputer_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundComputer.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Class EastBoundComputer Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean ' Main Line Shared TrainApprochingP1SoundPlayed2 As Boolean ' P11 Shared TrainApprochingP1SoundPlayed3 As Boolean ' P12 Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared TrainEnteringSidingSoundPlayedAJ1 As Boolean Shared TrainEnteringSidingSoundPlayedAJ15 As Boolean Shared TrainEnteringSidingSoundPlayedAJ21 As Boolean Shared P1CombinedClear As Boolean = False ' Sounds Public Shared Sub Sounds () ' Approaching P1 If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = PointInNormal And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False End If ' Approaching P2 If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = PointInReverse And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False End If End Sub ' Computer logic Public Shared Sub Computer () If RuntimeConfig . config . P1Combine = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then P1CombinedClear = True Else P1CombinedClear = False End If Else P1CombinedClear = True End If AJ1ELogic () AJ2ELogic () AJ3ELogic () AJ4ELogic () AJ7ELogic () AJ8ELogic () AJ9ELogic () AJ16ELogic () AJ17ELogic () AJ18ELogic () AJ21ELogic () AJ3WLogic () AJ7WLogic () AJ8WLogic () AJ9WLogic () AJ15WLogic () AJ16WLogic () AJ17WLogic () AJ18WLogic () AJ22WLogic () S11Logic () S12Logic () S14Logic () S19Logic () End Sub ' Main Signals ' EB Signals Public Shared Sub AJ1ELogic () If Initializations . AJ1Initiated = True Then ' Timer start for station If ( TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied ) And Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button1 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button2 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Then ' HeadShunt Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EHeadShunt = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button4 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button5 ) = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EEngineShed = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button6 ) = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EFoxHole = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EInner = True And BlockSafeAJ1EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And Points . PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ18E = SignalBackLockTime AJ18EInnerRequest = True End If End If If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button1 ) = True Buttons . ButtonFlash ( ButtonNames . Button17 ) = True Buttons . ButtonFlash ( ButtonNames . Button23 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Outer Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EOuter = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button2 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EOuterRequest = True End If End If If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button2 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Head Shunt Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EHeadShunt = True And BlockSafeAJ1EtoSiding () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button3 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtShunt BackLockAJ1EtoSiding = SignalBackLockTime End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button3 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Extension Route 4 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EExtention = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button4 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EExtentionRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button4 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' EngineShed Route 5 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EEngineShed = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button5 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EEngineShedRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button5 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' FoxHole Route 6 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EFoxHole = True And BlockSafeAJ1EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button6 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ18E = SignalBackLockTime AJ18EFoxHoleRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button6 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Occupied Then AJ1EReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = 0 Then AJ1EReset = True ' Reset everything relating to signal If AJ1EReset = True Then TrainEnteringSidingSoundPlayedAJ1 = False TrainDepartingP1SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF AJ1EReset = False End If End If End Sub Public Shared Sub AJ2ELogic () If Initializations . AJ2Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled Then If AJ2EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = AJ2EDelayValue AJ2EOuter = True AJ2EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then ' Out error Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = SectionErrorTimerCountdown AJ2EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = 0 And AJ2EOuter = True And BlockSafeAJ2EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P11 ) = PointInReverse Or SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger ) And TunnelSafe = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P10 ) = PointInNormal And Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear BackLockAJ2EtoAJ16E = SignalBackLockTime If AJ16EEngineShed = True Then AJ16EReset = True AJ16EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Occupied Then AJ2EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = 0 Then AJ2EReset = True ' Reset everything relating to signal If AJ2EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled AJ2EInner = False AJ2EFoxHole = False AJ2EOuter = False AJ2EEngineShed = False AJ2EExtention = False Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue AJ2EReset = False End If End If End Sub Public Shared Sub AJ3ELogic () If Initializations . AJ3Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If AJ3EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = AJ3EDelayValue AJ3EOuter = True AJ3EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = SectionErrorTimerCountdown AJ3EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = 0 And AJ3EOuter = True And BlockSafeAJ3EtoAJ4E () Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then AJ3EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = 0 Then AJ3EReset = True ' Reset everything relating to signal If AJ3EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3EOuter = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue AJ3EReset = False End If SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ4ELogic () If Initializations . AJ4Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True Then ' platform 1 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 2 AJ4EPlatform1 = True Buttons . ButtonFlash ( ButtonNames . Button26 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then ' platform 2 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 2 AJ4EPlatform2 = True Buttons . ButtonFlash ( ButtonNames . Button27 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Auto Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = SectionErrorTimerCountdown AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = AJ4EDelayValue AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Error Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = SectionErrorTimerCountdown AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue End If End If ' platform 1 Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 0 And AJ4EPlatform1 = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And P1CombinedClear = True And BlockSafeAJ4EtoAJ7E () = True And BackLockS12Out = 0 Then If Points . PointReturns ( PointNames . P13 ) = PointInNormal And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear BackLockAJ4EtoAJ7E = SignalBackLockTime AJ7EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger End If ' platform 2 Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 0 And AJ4EPlatform2 = True And BlockSafeAJ4EtoAJ21E () = True Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear BackLockAJ4EtoAJ21E = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Occupied Then AJ4EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = 0 Then AJ4EReset = True ' Reset everything relating to signal If AJ4EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled AJ4EPlatform1 = False AJ4EPlatform2 = False Buttons . ButtonRequest ( ButtonNames . Button26 ) = False Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button26 ) = False Buttons . ButtonFlash ( ButtonNames . Button27 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue AJ4EReset = False End If End If End Sub Public Shared Sub AJ7ELogic () If Initializations . AJ7Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If AJ7EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = AJ7EDelayValue AJ7EOuter = True AJ7EOuterRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = SectionErrorTimerCountdown AJ7EOuter = True End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = 0 And AJ7EOuter = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BlockSafeAJ7EtoAJ1E () Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtClear Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then AJ7EReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = 0 Then AJ7EReset = True ' Reset everything relating to signal If AJ7EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7EOuter = False AJ7EOuterRequest = False AJ7EReset = False End If End If End Sub Public Shared Sub AJ8ELogic () If Initializations . AJ8Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If AJ8EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = AJ8EDelayValue AJ8EOuter = True AJ8EOuterRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Occupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = SectionErrorTimerCountdown AJ8EOuter = True End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = 0 And TunnelSafe = True And AJ8EOuter = True And AJ15WOuter = False And BlockSafeAJ8EtoAJ3E () = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtClear AJ3EOuterRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then AJ8EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = 0 Then AJ8EReset = True ' Reset everything relating to signal If AJ8EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8EOuter = False AJ8EReset = False End If End If End Sub Public Shared Sub AJ9ELogic () If Initializations . AJ9Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If AJ9EInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = AJ9EDelayValue AJ9EInner = True AJ9EInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue ElseIf AJ9EFoxHoleRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsOccupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9EFoxHole = True AJ9EFoxHoleRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9EInner = True And BlockSafeAJ9EtoAJ17E () = True And BackLockS14Out = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtClear BackLockAJ9EtoAJ17E = SignalBackLockTime AJ17EInnerRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger End If ' foxhole Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9EFoxHole = True And BlockSafeAJ9EtoSiding () = True And BackLockS14Out = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = 0 Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtShunt BackLockAJ9EtoSiding = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Occupied Then AJ9EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = 0 Then AJ9EReset = True ' Reset everything relating to signal If AJ9EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled AJ9EInner = False AJ9EFoxHole = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue AJ9EReset = False End If SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ16ELogic () If Initializations . AJ16Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If AJ16EOuterRequest = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EOuter = True AJ16EOuterRequest = False AJ16EExtentionRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf AJ16EExtentionRequest = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EExtention = True AJ16EExtentionRequest = False AJ16EOuterRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf AJ16EEngineShedRequest = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EEngineShed = True AJ16EEngineShedRequest = False AJ16EExtentionRequest = False AJ16EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = SectionErrorTimerCountdown AJ16EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EOuter = True And BlockSafeAJ16EtoAJ8E () = True And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger And TunnelSafe = True And BackLockS19Out = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtClear BackLockAJ16EtoAJ8E = SignalBackLockTime AJ8EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger End If ' Extension Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ' EngineShed Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EEngineShed = True And BlockSafeAJ16EtoSiding () = True And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger And BackLockS19Out = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt BackLockAJ16EtoSiding = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then AJ16EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = 0 Then AJ16EReset = True ' Reset everything relating to signal If AJ16EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16EOuter = False AJ16EExtention = False AJ16EEngineShed = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF AJ16EOuterRequest = False AJ16EExtentionRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue AJ16EReset = False End If End If End Sub Public Shared Sub AJ17ELogic () If Initializations . AJ17Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If AJ17EInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = AJ17EDelayValue AJ17EInner = True AJ17EInnerRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = SectionErrorTimerCountdown AJ17EInner = True End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = 0 And AJ17EInner = True And BlockSafeAJ17EtoAJ2E () = True And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear AJ2EOuterRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then AJ17EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = 0 Then AJ17EReset = True ' Reset everything relating to signal If AJ17EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17EInner = False AJ17EReset = False End If End If End Sub Public Shared Sub AJ18ELogic () If Initializations . AJ18Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If AJ18EInnerRequest = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18EDelayValue AJ18EInner = True AJ18EInnerRequest = False ElseIf AJ18EFoxHoleRequest = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18EDelayValue AJ18EFoxHole = True AJ18EFoxHoleRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = SectionErrorTimerCountdown AJ18EInner = True End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18EInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear AJ9EInnerRequest = True ' Outer FoxHole 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18EFoxHole = True And BlockSafeAJ18EtoAJ9E () And SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear AJ9EFoxHoleRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then AJ18EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = 0 Then AJ18EReset = True ' Reset everything relating to signal If AJ18EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18EInner = False AJ18EFoxHole = False AJ18EReset = False End If End If End Sub Public Shared Sub AJ21ELogic () If Initializations . AJ21Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button10 ) = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button11 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button12 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button13 ) = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EEngineShed = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button14 ) = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EFoxHole = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EInner = True And BlockSafeAJ21EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P5a ) = PointInNormal Or Points . PointReturns ( PointNames . P11 ) = PointInReverse ) And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button10 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ18E = SignalBackLockTime AJ18EInnerRequest = True End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button10 ) = True End If ' Outer Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EOuter = True And AJ1EInner = False And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button11 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EOuterRequest = True End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button11 ) = True End If ' Extension Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EExtention = True And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button12 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EExtentionRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button12 ) = True End If ' EngineShed Route 4 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EEngineShed = True And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button13 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EEngineShedRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button13 ) = True End If ' FoxHole Route 5 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EFoxHole = True And BlockSafeAJ21EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P5a ) = PointInNormal ) And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button14 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ18E = SignalBackLockTime AJ18EFoxHoleRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button14 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button10 ) = False Buttons . ButtonFlash ( ButtonNames . Button11 ) = False Buttons . ButtonFlash ( ButtonNames . Button12 ) = False Buttons . ButtonFlash ( ButtonNames . Button13 ) = False Buttons . ButtonFlash ( ButtonNames . Button14 ) = False SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Occupied Then AJ21EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = 0 Then AJ21EReset = True ' Reset everything relating to signal If AJ21EReset = True Then TrainEnteringSidingSoundPlayedAJ21 = False TrainDepartingP2SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ21EInner = False AJ21EOuter = False AJ21EExtention = False AJ21EEngineShed = False AJ21EFoxHole = False AJ21EInnerRequest = False AJ21EOuterRequest = False AJ21EExtentionRequest = False AJ21EEngineShedRequest = False AJ21EFoxHoleRequest = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue AJ16EEngineShedRequest = False AJ16EOuterRequest = False AJ21EReset = False End If End If End Sub ' WB Signals Public Shared Sub AJ3WLogic () If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ7WLogic () If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ8WLogic () If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ9WLogic () If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ15WLogic () If Initializations . AJ15Initiated = True Then ' Timer start If ( TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied ) And Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Then ' Tunnel Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Then ' TurnTable Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WTurnTable = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue End If End If ' Tunnel If Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear BackLockAJ15WtoSiding = SignalBackLockTime Buttons . ButtonFlash ( ButtonNames . Button7 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button7 ) = True End If ' TurnTable ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WTurnTable = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P13 ) = PointInReverse ) Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt BackLockAJ15WtoAJ3W = SignalBackLockTime Buttons . ButtonFlash ( ButtonNames . Button9 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button9 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Occupied Then AJ15WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = 0 Then AJ15WReset = True ' Reset everything relating to signal If AJ15WReset = True Then TrainEnteringSidingSoundPlayedAJ15 = False Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WTurnTable = False AJ15WOuter = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False AJ15WReset = False End If End If End Sub Public Shared Sub AJ16WLogic () If Initializations . AJ16Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ17WLogic () If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ18WLogic () If Initializations . AJ18Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ22WLogic () If Initializations . AJ21Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger End If End Sub ' Shunt Signals Public Shared Sub S11Logic () If Initializations . S11Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button21 ) = True And AllowDeparting Then ' Outer S11Out = True End If ' HeadShunt If S11Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoSiding = 0 Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button21 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtShunt BackLockS11Out = SignalBackLockTime End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button21 ) = True SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button21 ) = False SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Then S11Reset = True End If ' Reset everything relating to signal If S11Reset = True Then S11Out = False Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button21 ) = False TrainApprochingP1SoundPlayed2 = False SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue S11Reset = False End If End If End Sub Public Shared Sub S12Logic () If Initializations . S12Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button20 ) = True And AllowDeparting Then ' Outer S12Out = True End If ' TurnTable If S12Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P13 ) = PointInReverse ) And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And ( PointReturns ( PointNames . P13 ) = PointInReverse Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True ) And BackLockAJ4EtoAJ7E = 0 And BackLockAJ15WtoSiding = 0 Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button20 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtShunt BackLockS12Out = SignalBackLockTime End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button20 ) = True SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button20 ) = False SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Then S12Reset = True End If ' Reset everything relating to signal If S12Reset = True Then S12Out = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button20 ) = False TrainApprochingP1SoundPlayed3 = False SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue S12Reset = False End If End If End Sub Public Shared Sub S14Logic () If Initializations . S14Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button22 ) = True And AllowDeparting Then ' Outer S14Out = True End If ' TurnTable If S14Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN = Clear ) And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And BackLockAJ9EtoAJ17E = 0 And BackLockAJ9EtoSiding = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtShunt BackLockS14Out = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button22 ) = True SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button22 ) = False SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Occupied Then S14Reset = True End If End If ' Reset everything relating to signal If S14Reset = True Then S14Out = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button22 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue S14Reset = False End If End If End Sub Public Shared Sub S19Logic () If Initializations . S19Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button19 ) = True And AllowDeparting Then ' Outer S19Out = True End If ' Engine shed If S19Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And BackLockAJ16EtoAJ8E = 0 And BackLockAJ16EtoSiding = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtShunt BackLockS19Out = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button19 ) = True SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button19 ) = False SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Occupied Then S19Reset = True End If End If ' Reset everything relating to signal If S19Reset = True Then S19Out = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button19 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue S19Reset = False End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundComputer.vb"},{"location":"mainsystem/Files/EastBoundComputer_8vb/#githubsignallingsystemehmr-signalling-systemlogiceastboundcomputervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundComputer.vb"},{"location":"mainsystem/Files/EastBoundComputer_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Class EastBoundComputer Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean ' Main Line Shared TrainApprochingP1SoundPlayed2 As Boolean ' P11 Shared TrainApprochingP1SoundPlayed3 As Boolean ' P12 Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared TrainEnteringSidingSoundPlayedAJ1 As Boolean Shared TrainEnteringSidingSoundPlayedAJ15 As Boolean Shared TrainEnteringSidingSoundPlayedAJ21 As Boolean Shared P1CombinedClear As Boolean = False ' Sounds Public Shared Sub Sounds () ' Approaching P1 If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = PointInNormal And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False End If ' Approaching P2 If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = PointInReverse And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False End If End Sub ' Computer logic Public Shared Sub Computer () If RuntimeConfig . config . P1Combine = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then P1CombinedClear = True Else P1CombinedClear = False End If Else P1CombinedClear = True End If AJ1ELogic () AJ2ELogic () AJ3ELogic () AJ4ELogic () AJ7ELogic () AJ8ELogic () AJ9ELogic () AJ16ELogic () AJ17ELogic () AJ18ELogic () AJ21ELogic () AJ3WLogic () AJ7WLogic () AJ8WLogic () AJ9WLogic () AJ15WLogic () AJ16WLogic () AJ17WLogic () AJ18WLogic () AJ22WLogic () S11Logic () S12Logic () S14Logic () S19Logic () End Sub ' Main Signals ' EB Signals Public Shared Sub AJ1ELogic () If Initializations . AJ1Initiated = True Then ' Timer start for station If ( TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied ) And Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button1 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button2 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Then ' HeadShunt Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EHeadShunt = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button4 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button5 ) = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EEngineShed = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button6 ) = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EFoxHole = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EInner = True And BlockSafeAJ1EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And Points . PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ18E = SignalBackLockTime AJ18EInnerRequest = True End If End If If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button1 ) = True Buttons . ButtonFlash ( ButtonNames . Button17 ) = True Buttons . ButtonFlash ( ButtonNames . Button23 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Outer Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EOuter = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button2 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EOuterRequest = True End If End If If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button2 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Head Shunt Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EHeadShunt = True And BlockSafeAJ1EtoSiding () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button3 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtShunt BackLockAJ1EtoSiding = SignalBackLockTime End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button3 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' Extension Route 4 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EExtention = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button4 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EExtentionRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button4 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' EngineShed Route 5 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EEngineShed = True And BlockSafeAJ1EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P6a ) = PointInNormal Or ( SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger )) And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button5 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ16E = SignalBackLockTime AJ16EEngineShedRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button5 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If ' FoxHole Route 6 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EFoxHole = True And BlockSafeAJ1EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 And BackLockS11Out = 0 Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button6 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear BackLockAJ1EtoAJ18E = SignalBackLockTime AJ18EFoxHoleRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Buttons . ButtonFlash ( ButtonNames . Button6 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Occupied Then AJ1EReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = 0 Then AJ1EReset = True ' Reset everything relating to signal If AJ1EReset = True Then TrainEnteringSidingSoundPlayedAJ1 = False TrainDepartingP1SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF AJ1EReset = False End If End If End Sub Public Shared Sub AJ2ELogic () If Initializations . AJ2Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled Then If AJ2EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = AJ2EDelayValue AJ2EOuter = True AJ2EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then ' Out error Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = SectionErrorTimerCountdown AJ2EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = 0 And AJ2EOuter = True And BlockSafeAJ2EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And ( Points . PointReturns ( PointNames . P11 ) = PointInReverse Or SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger ) And TunnelSafe = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P10 ) = PointInNormal And Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear BackLockAJ2EtoAJ16E = SignalBackLockTime If AJ16EEngineShed = True Then AJ16EReset = True AJ16EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Occupied Then AJ2EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ) = 0 Then AJ2EReset = True ' Reset everything relating to signal If AJ2EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled AJ2EInner = False AJ2EFoxHole = False AJ2EOuter = False AJ2EEngineShed = False AJ2EExtention = False Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ) = SafeToClearValue AJ2EReset = False End If End If End Sub Public Shared Sub AJ3ELogic () If Initializations . AJ3Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If AJ3EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = AJ3EDelayValue AJ3EOuter = True AJ3EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = SectionErrorTimerCountdown AJ3EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = 0 And AJ3EOuter = True And BlockSafeAJ3EtoAJ4E () Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then AJ3EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = 0 Then AJ3EReset = True ' Reset everything relating to signal If AJ3EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3EOuter = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ) = SafeToClearValue AJ3EReset = False End If SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ4ELogic () If Initializations . AJ4Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True Then ' platform 1 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 2 AJ4EPlatform1 = True Buttons . ButtonFlash ( ButtonNames . Button26 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then ' platform 2 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 2 AJ4EPlatform2 = True Buttons . ButtonFlash ( ButtonNames . Button27 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Auto Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = SectionErrorTimerCountdown AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = AJ4EDelayValue AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Error Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = SectionErrorTimerCountdown AJ4EPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue End If End If ' platform 1 Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 0 And AJ4EPlatform1 = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And P1CombinedClear = True And BlockSafeAJ4EtoAJ7E () = True And BackLockS12Out = 0 Then If Points . PointReturns ( PointNames . P13 ) = PointInNormal And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear BackLockAJ4EtoAJ7E = SignalBackLockTime AJ7EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger End If ' platform 2 Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = 0 And AJ4EPlatform2 = True And BlockSafeAJ4EtoAJ21E () = True Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear BackLockAJ4EtoAJ21E = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Occupied Then AJ4EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ) = 0 Then AJ4EReset = True ' Reset everything relating to signal If AJ4EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled AJ4EPlatform1 = False AJ4EPlatform2 = False Buttons . ButtonRequest ( ButtonNames . Button26 ) = False Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button26 ) = False Buttons . ButtonFlash ( ButtonNames . Button27 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ) = SafeToClearValue AJ4EReset = False End If End If End Sub Public Shared Sub AJ7ELogic () If Initializations . AJ7Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If AJ7EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = AJ7EDelayValue AJ7EOuter = True AJ7EOuterRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = SectionErrorTimerCountdown AJ7EOuter = True End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = 0 And AJ7EOuter = True And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And BlockSafeAJ7EtoAJ1E () Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtClear Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then AJ7EReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = 0 Then AJ7EReset = True ' Reset everything relating to signal If AJ7EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7EOuter = False AJ7EOuterRequest = False AJ7EReset = False End If End If End Sub Public Shared Sub AJ8ELogic () If Initializations . AJ8Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If AJ8EOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = AJ8EDelayValue AJ8EOuter = True AJ8EOuterRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Occupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = SectionErrorTimerCountdown AJ8EOuter = True End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = 0 And TunnelSafe = True And AJ8EOuter = True And AJ15WOuter = False And BlockSafeAJ8EtoAJ3E () = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtClear AJ3EOuterRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then AJ8EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = 0 Then AJ8EReset = True ' Reset everything relating to signal If AJ8EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8EOuter = False AJ8EReset = False End If End If End Sub Public Shared Sub AJ9ELogic () If Initializations . AJ9Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If AJ9EInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = AJ9EDelayValue AJ9EInner = True AJ9EInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue ElseIf AJ9EFoxHoleRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsOccupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9EFoxHole = True AJ9EFoxHoleRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9EInner = True And BlockSafeAJ9EtoAJ17E () = True And BackLockS14Out = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtClear BackLockAJ9EtoAJ17E = SignalBackLockTime AJ17EInnerRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger End If ' foxhole Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9EFoxHole = True And BlockSafeAJ9EtoSiding () = True And BackLockS14Out = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = 0 Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtShunt BackLockAJ9EtoSiding = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Occupied Then AJ9EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = 0 Then AJ9EReset = True ' Reset everything relating to signal If AJ9EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled AJ9EInner = False AJ9EFoxHole = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ) = SafeToClearValue AJ9EReset = False End If SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ16ELogic () If Initializations . AJ16Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If AJ16EOuterRequest = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EOuter = True AJ16EOuterRequest = False AJ16EExtentionRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf AJ16EExtentionRequest = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EExtention = True AJ16EExtentionRequest = False AJ16EOuterRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf AJ16EEngineShedRequest = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut If PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16EDelayValue Else Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ18EDelayValue End If AJ16EEngineShed = True AJ16EEngineShedRequest = False AJ16EExtentionRequest = False AJ16EOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = SectionErrorTimerCountdown AJ16EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EOuter = True And BlockSafeAJ16EtoAJ8E () = True And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger And TunnelSafe = True And BackLockS19Out = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtClear BackLockAJ16EtoAJ8E = SignalBackLockTime AJ8EOuterRequest = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger End If ' Extension Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ' EngineShed Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16EEngineShed = True And BlockSafeAJ16EtoSiding () = True And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger And BackLockS19Out = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt BackLockAJ16EtoSiding = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then AJ16EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = 0 Then AJ16EReset = True ' Reset everything relating to signal If AJ16EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16EOuter = False AJ16EExtention = False AJ16EEngineShed = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF AJ16EOuterRequest = False AJ16EExtentionRequest = False AJ16EEngineShedRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ) = SafeToClearValue AJ16EReset = False End If End If End Sub Public Shared Sub AJ17ELogic () If Initializations . AJ17Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If AJ17EInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = AJ17EDelayValue AJ17EInner = True AJ17EInnerRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = SectionErrorTimerCountdown AJ17EInner = True End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = 0 And AJ17EInner = True And BlockSafeAJ17EtoAJ2E () = True And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear AJ2EOuterRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then AJ17EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = 0 Then AJ17EReset = True ' Reset everything relating to signal If AJ17EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17EInner = False AJ17EReset = False End If End If End Sub Public Shared Sub AJ18ELogic () If Initializations . AJ18Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If AJ18EInnerRequest = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18EDelayValue AJ18EInner = True AJ18EInnerRequest = False ElseIf AJ18EFoxHoleRequest = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18EDelayValue AJ18EFoxHole = True AJ18EFoxHoleRequest = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = SectionErrorTimerCountdown AJ18EInner = True End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18EInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear AJ9EInnerRequest = True ' Outer FoxHole 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18EFoxHole = True And BlockSafeAJ18EtoAJ9E () And SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear AJ9EFoxHoleRequest = True Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then AJ18EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = 0 Then AJ18EReset = True ' Reset everything relating to signal If AJ18EReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18EInner = False AJ18EFoxHole = False AJ18EReset = False End If End If End Sub Public Shared Sub AJ21ELogic () If Initializations . AJ21Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button10 ) = True Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button11 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button12 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button13 ) = True Then ' EngineShed Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EEngineShed = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button14 ) = True Then ' FoxHole Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = AJ21EDelayValue AJ21EFoxHole = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EInner = True And BlockSafeAJ21EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P5a ) = PointInNormal Or Points . PointReturns ( PointNames . P11 ) = PointInReverse ) And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button10 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ18E = SignalBackLockTime AJ18EInnerRequest = True End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button10 ) = True End If ' Outer Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EOuter = True And AJ1EInner = False And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button11 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EOuterRequest = True End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button11 ) = True End If ' Extension Route 3 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EExtention = True And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button12 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EExtentionRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button12 ) = True End If ' EngineShed Route 4 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EEngineShed = True And BlockSafeAJ21EtoAJ16E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button13 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ16E = SignalBackLockTime AJ16EEngineShedRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button13 ) = True End If ' FoxHole Route 5 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = 0 And AJ21EFoxHole = True And BlockSafeAJ21EtoAJ18E () = True And SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P5a ) = PointInNormal ) And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button14 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear BackLockAJ21EtoAJ18E = SignalBackLockTime AJ18EFoxHoleRequest = True End If End If If TrainEnteringSidingSoundPlayedAJ21 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ21 = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button14 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button10 ) = False Buttons . ButtonFlash ( ButtonNames . Button11 ) = False Buttons . ButtonFlash ( ButtonNames . Button12 ) = False Buttons . ButtonFlash ( ButtonNames . Button13 ) = False Buttons . ButtonFlash ( ButtonNames . Button14 ) = False SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Occupied Then AJ21EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ) = 0 Then AJ21EReset = True ' Reset everything relating to signal If AJ21EReset = True Then TrainEnteringSidingSoundPlayedAJ21 = False TrainDepartingP2SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ21EInner = False AJ21EOuter = False AJ21EExtention = False AJ21EEngineShed = False AJ21EFoxHole = False AJ21EInnerRequest = False AJ21EOuterRequest = False AJ21EExtentionRequest = False AJ21EEngineShedRequest = False AJ21EFoxHoleRequest = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ) = SafeToClearValue AJ16EEngineShedRequest = False AJ16EOuterRequest = False AJ21EReset = False End If End If End Sub ' WB Signals Public Shared Sub AJ3WLogic () If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ7WLogic () If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ8WLogic () If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ9WLogic () If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ15WLogic () If Initializations . AJ15Initiated = True Then ' Timer start If ( TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied ) And Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Then ' Tunnel Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Then ' TurnTable Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WTurnTable = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue End If End If ' Tunnel If Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear BackLockAJ15WtoSiding = SignalBackLockTime Buttons . ButtonFlash ( ButtonNames . Button7 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button7 ) = True End If ' TurnTable ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WTurnTable = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And ( SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P13 ) = PointInReverse ) Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt BackLockAJ15WtoAJ3W = SignalBackLockTime Buttons . ButtonFlash ( ButtonNames . Button9 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button9 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Occupied Then AJ15WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = 0 Then AJ15WReset = True ' Reset everything relating to signal If AJ15WReset = True Then TrainEnteringSidingSoundPlayedAJ15 = False Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WTurnTable = False AJ15WOuter = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False AJ15WReset = False End If End If End Sub Public Shared Sub AJ16WLogic () If Initializations . AJ16Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ17WLogic () If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ18WLogic () If Initializations . AJ18Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ22WLogic () If Initializations . AJ21Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger End If End Sub ' Shunt Signals Public Shared Sub S11Logic () If Initializations . S11Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button21 ) = True And AllowDeparting Then ' Outer S11Out = True End If ' HeadShunt If S11Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoSiding = 0 Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button21 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtShunt BackLockS11Out = SignalBackLockTime End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button21 ) = True SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button21 ) = False SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Then S11Reset = True End If ' Reset everything relating to signal If S11Reset = True Then S11Out = False Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button21 ) = False TrainApprochingP1SoundPlayed2 = False SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue S11Reset = False End If End If End Sub Public Shared Sub S12Logic () If Initializations . S12Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button20 ) = True And AllowDeparting Then ' Outer S12Out = True End If ' TurnTable If S12Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Or Points . PointReturns ( PointNames . P13 ) = PointInReverse ) And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And ( PointReturns ( PointNames . P13 ) = PointInReverse Or PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True ) And BackLockAJ4EtoAJ7E = 0 And BackLockAJ15WtoSiding = 0 Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button20 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtShunt BackLockS12Out = SignalBackLockTime End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button20 ) = True SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button20 ) = False SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Then S12Reset = True End If ' Reset everything relating to signal If S12Reset = True Then S12Out = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button20 ) = False TrainApprochingP1SoundPlayed3 = False SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue S12Reset = False End If End If End Sub Public Shared Sub S14Logic () If Initializations . S14Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button22 ) = True And AllowDeparting Then ' Outer S14Out = True End If ' TurnTable If S14Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN = Clear ) And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And BackLockAJ9EtoAJ17E = 0 And BackLockAJ9EtoSiding = 0 Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtShunt BackLockS14Out = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button22 ) = True SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button22 ) = False SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Occupied Then S14Reset = True End If End If ' Reset everything relating to signal If S14Reset = True Then S14Out = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button22 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue S14Reset = False End If End If End Sub Public Shared Sub S19Logic () If Initializations . S19Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button19 ) = True And AllowDeparting Then ' Outer S19Out = True End If ' Engine shed If S19Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And BackLockAJ16EtoAJ8E = 0 And BackLockAJ16EtoSiding = 0 Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtShunt BackLockS19Out = SignalBackLockTime End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button19 ) = True SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button19 ) = False SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Occupied Then S19Reset = True End If End If ' Reset everything relating to signal If S19Reset = True Then S19Out = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button19 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue S19Reset = False End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/EastBoundManual_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundManual.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Class EastBoundManual Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared AJ1AllowDispatch As Boolean Public Shared Sub Manual () ' Sounds ' Approching P1 If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approching P1 from Turntable ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approching P2 ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False End If ' Lever 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then If RequireButtonInputToClearSignal = True Then If Buttons . ButtonRequest ( ButtonNames . Button1 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button2 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button4 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button5 ) = True _ Or Buttons . ButtonRequest ( ButtonNames . Button6 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button21 ) = True Then AJ1AllowDispatch = True Else AJ1AllowDispatch = False End If Else AJ1AllowDispatch = True End If End If If Initializations . AJ1Initiated = True Then If Lever ( LeverNames . Lever1 ) = \"Normal\" Then TrainDepartingP1SoundPlayed = False If Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" _ And Lever ( LeverNames . Lever6 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False ElseIf Lever ( LeverNames . Lever2 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And Lever ( LeverNames . Lever11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False Else LeverLock ( LeverNames . Lever1 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" LeverRestroke ( LeverNames . Lever1 ) = True ElseIf Lever ( LeverNames . Lever1 ) = \"Reverse\" Then ' Route AJ1 to AJ16 If Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And AJ1AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever1 ) = False Then If LeverRestroke ( LeverNames . Lever1 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" LeverRestroke ( LeverNames . Lever1 ) = False If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" TrainDepartingP1SoundPlayed = False End If ' Route AJ1 to AJ18 ElseIf Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And AJ1AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever1 ) = False Then If LeverRestroke ( LeverNames . Lever1 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If LeverRestroke ( LeverNames . Lever1 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" TrainDepartingP1SoundPlayed = False End If ' Route AJ1 to Headshunt ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And Lever ( LeverNames . Lever11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And AJ1AllowDispatch = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button21 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If End If ' Lever 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ2Initiated = True Then If Lever ( LeverNames . Lever2 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False ElseIf Lever ( LeverNames . Lever1 ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False Else LeverLock ( LeverNames . Lever2 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" LeverRestroke ( LeverNames . Lever2 ) = True ElseIf Lever ( LeverNames . Lever2 ) = \"Reverse\" Then ' Route AJ2 to AJ16 If Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever2 ) = False Then If LeverRestroke ( LeverNames . Lever2 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear LeverRestroke ( LeverNames . Lever2 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If ' Route AJ2 to AJ18 ElseIf Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever2 ) = False Then If LeverRestroke ( LeverNames . Lever2 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear LeverRestroke ( LeverNames . Lever2 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If End If ' Lever 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ3Initiated = True Then If Lever ( LeverNames . Lever3 ) = \"Normal\" Then LeverLock ( LeverNames . Lever3 ) = False SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" LeverRestroke ( LeverNames . Lever3 ) = True ElseIf Lever ( LeverNames . Lever3 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever3 ) = False ' Route AJ3 to AJ4 If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever3 ) = False Then If LeverRestroke ( LeverNames . Lever3 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear LeverRestroke ( LeverNames . Lever3 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever3 ) = True SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If End If ' Lever 4 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ4Initiated = True Then If Lever ( LeverNames . Lever4 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever4 ) = False ElseIf Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear _ Then LeverLock ( LeverNames . Lever4 ) = False Else LeverLock ( LeverNames . Lever4 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" LeverRestroke ( LeverNames . Lever4 ) = True ElseIf Lever ( LeverNames . Lever4 ) = \"Reverse\" Then ' Route AJ4 to AJ21 If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever4 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever4 ) = False Then If LeverRestroke ( LeverNames . Lever4 ) = True Then If Buttons . ButtonRequest ( ButtonNames . Button2 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If LeverRestroke ( LeverNames . Lever4 ) = False End If Else If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If End If Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button27 ) = False End If ' Route AJ4 to AJ7 ElseIf Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever4 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever4 ) = False Then If LeverRestroke ( LeverNames . Lever4 ) = True Then If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If LeverRestroke ( LeverNames . Lever4 ) = False End If Else If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If End If Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button26 ) = False End If Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If End If ' Lever 5 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point5Initiated = True Then If Lever ( LeverNames . Lever5 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" _ And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever5 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever5 ) = True Points . PointRequestedOutputs ( PointNames . P5a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"OFF\" End If End If ' Lever 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point6Initiated = True Then If Lever ( LeverNames . Lever6 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever6 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever6 ) = True Points . PointRequestedOutputs ( PointNames . P6a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"OFF\" End If End If ' Lever 7 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ7Initiated = True Then If Lever ( LeverNames . Lever7 ) = \"Normal\" And SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then LeverLock ( LeverNames . Lever7 ) = False SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" LeverRestroke ( LeverNames . Lever7 ) = True ElseIf Lever ( LeverNames . Lever7 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever7 ) = False ' Route AJ7 to AJ1 If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever7 ) = False Then If LeverRestroke ( LeverNames . Lever7 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" LeverRestroke ( LeverNames . Lever7 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever7 ) = True SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If End If ' Lever 8 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ8Initiated = True Then If Lever ( LeverNames . Lever8 ) = \"Normal\" Then If Lever ( LeverNames . Lever22 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" Or Points . PointReturns ( PointNames . P12 ) = \"Normal\" And TunnelSafe = True And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever8 ) = False Else LeverLock ( LeverNames . Lever8 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" LeverRestroke ( LeverNames . Lever8 ) = True ElseIf Lever ( LeverNames . Lever8 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever8 ) = False ' Route AJ8 to If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever8 ) = False Then If LeverRestroke ( LeverNames . Lever8 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" LeverRestroke ( LeverNames . Lever8 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever8 ) = True SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If End If ' Lever 9 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ9Initiated = True Then If Lever ( LeverNames . Lever9 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear Then LeverLock ( LeverNames . Lever9 ) = False SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" LeverRestroke ( LeverNames . Lever9 ) = True ElseIf Lever ( LeverNames . Lever9 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever9 ) = False ' Route AJ9 to AJ17 If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever9 ) = False Then If LeverRestroke ( LeverNames . Lever9 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" LeverRestroke ( LeverNames . Lever9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" End If ' Route AJ9 to FoxHole ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And Lever ( LeverNames . Lever14 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button22 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever9 ) = True SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If End If ' Lever 10 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point10Initiated = True Then If Lever ( LeverNames . Lever10 ) = \"Normal\" Then If Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever10 ) = \"Reverse\" Then If Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever10 ) = True Points . PointRequestedOutputs ( PointNames . P10 ) = \"OFF\" End If End If ' Lever 11 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point11Initiated = True Then If Lever ( LeverNames . Lever11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever1 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever1 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever11 ) = True Points . PointRequestedOutputs ( PointNames . P11 ) = \"OFF\" End If End If ' Lever 12 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point12Initiated = True Then If Lever ( LeverNames . Lever12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever12 ) = True Points . PointRequestedOutputs ( PointNames . P12 ) = \"OFF\" End If End If ' Lever 13 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point13Initiated = True Then If Lever ( LeverNames . Lever13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever22 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever22 ) = \"Normal\" And Lever ( LeverNames . Lever4 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever13 ) = True Points . PointRequestedOutputs ( PointNames . P13 ) = \"OFF\" End If End If ' Lever 14 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point14Initiated = True Then If Lever ( LeverNames . Lever14 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And Lever ( LeverNames . Lever9 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever14 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And Lever ( LeverNames . Lever9 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever14 ) = True Points . PointRequestedOutputs ( PointNames . P14 ) = \"OFF\" End If End If ' Lever 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ15Initiated = True Then If Lever ( LeverNames . Lever15 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Normal\" _ And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear _ Then LeverLock ( LeverNames . Lever15 ) = False ElseIf Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And Lever ( LeverNames . Lever12 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" LeverRestroke ( LeverNames . Lever15 ) = True ElseIf Lever ( LeverNames . Lever15 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If If Lever ( LeverNames . Lever8 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear _ And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear _ Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever15 ) = False Then If LeverRestroke ( LeverNames . Lever15 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" LeverRestroke ( LeverNames . Lever15 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If End If ' Lever 16 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ16Initiated = True Then If Lever ( LeverNames . Lever16 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And (( Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" And TunnelSafe = True ) Or ( Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And Lever ( LeverNames . Lever19 ) = \"Reverse\" )) Then LeverLock ( LeverNames . Lever16 ) = False Else LeverLock ( LeverNames . Lever16 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" LeverRestroke ( LeverNames . Lever16 ) = True ElseIf Lever ( LeverNames . Lever16 ) = \"Reverse\" Then ' Route AJ16 to AJ8 If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" And TunnelSafe = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then LeverLock ( LeverNames . Lever16 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" End If ' Route AJ16 to EngineShed ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And Lever ( LeverNames . Lever19 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear Then LeverLock ( LeverNames . Lever16 ) = False SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button19 ) = False Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If End If ' Lever 17 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ17Initiated = True Then If Lever ( LeverNames . Lever17 ) = \"Normal\" And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever17 ) = False SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" LeverRestroke ( LeverNames . Lever17 ) = True ElseIf Lever ( LeverNames . Lever17 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever17 ) = False ' Route AJ17 to AJ2 If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever17 ) = False Then If LeverRestroke ( LeverNames . Lever17 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear LeverRestroke ( LeverNames . Lever17 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever17 ) = True SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If End If ' Lever 18 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ18Initiated = True Then If Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever18 ) = False SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" LeverRestroke ( LeverNames . Lever18 ) = True ElseIf Lever ( LeverNames . Lever18 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever18 ) = False ' Route AJ18 to AJ9 If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever18 ) = True SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If End If ' Lever 19 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point19Initiated = True Then If Lever ( LeverNames . Lever19 ) = LeverInNormal Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And Lever ( LeverNames . Lever16 ) = LeverInNormal And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal ElseIf Lever ( LeverNames . Lever19 ) = LeverInReverse Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And Lever ( LeverNames . Lever16 ) = LeverInNormal And TunnelSafe = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Else LeverLock ( LeverNames . Lever19 ) = True Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF End If End If ' Lever 20 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever20 ) = True ' Lever 21 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ21Initiated = True Then If Lever ( LeverNames . Lever21 ) = \"Normal\" Then TrainDepartingP2SoundPlayed = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And Lever ( LeverNames . Lever2 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever21 ) = False ElseIf Lever ( LeverNames . Lever1 ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever2 ) = \"Normal\" _ And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever21 ) = False Else LeverLock ( LeverNames . Lever21 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" LeverRestroke ( LeverNames . Lever21 ) = True ElseIf Lever ( LeverNames . Lever21 ) = \"Reverse\" Then ' Route AJ21 to AJ18 If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever21 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever21 ) = False Then If LeverRestroke ( LeverNames . Lever21 ) = True Then If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear LeverRestroke ( LeverNames . Lever21 ) = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If ' Route AJ21 to AJ16 ElseIf Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And ( Lever ( LeverNames . Lever1 ) = \"Normal\" _ And Points . PointReturns ( PointNames . P11 ) = \"Normal\" ) And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear Then LeverLock ( LeverNames . Lever21 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever21 ) = False Then If LeverRestroke ( LeverNames . Lever21 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If LeverRestroke ( LeverNames . Lever21 ) = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If End If ' Lever 22 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ22Initiated = True Then If Lever ( LeverNames . Lever22 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" And Lever ( LeverNames . Lever4 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" _ And Lever ( LeverNames . Lever13 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf Lever ( LeverNames . Lever22 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And Lever ( LeverNames . Lever4 ) = \"Normal\" _ And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" LeverLock ( LeverNames . Lever22 ) = True End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundManual.vb"},{"location":"mainsystem/Files/EastBoundManual_8vb/#githubsignallingsystemehmr-signalling-systemlogiceastboundmanualvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/EastBoundManual.vb"},{"location":"mainsystem/Files/EastBoundManual_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Class EastBoundManual Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared AJ1AllowDispatch As Boolean Public Shared Sub Manual () ' Sounds ' Approching P1 If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approching P1 from Turntable ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approching P2 ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False End If ' Lever 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then If RequireButtonInputToClearSignal = True Then If Buttons . ButtonRequest ( ButtonNames . Button1 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button2 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button4 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button5 ) = True _ Or Buttons . ButtonRequest ( ButtonNames . Button6 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button21 ) = True Then AJ1AllowDispatch = True Else AJ1AllowDispatch = False End If Else AJ1AllowDispatch = True End If End If If Initializations . AJ1Initiated = True Then If Lever ( LeverNames . Lever1 ) = \"Normal\" Then TrainDepartingP1SoundPlayed = False If Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" _ And Lever ( LeverNames . Lever6 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False ElseIf Lever ( LeverNames . Lever2 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And Lever ( LeverNames . Lever11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False Else LeverLock ( LeverNames . Lever1 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" LeverRestroke ( LeverNames . Lever1 ) = True ElseIf Lever ( LeverNames . Lever1 ) = \"Reverse\" Then ' Route AJ1 to AJ16 If Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And AJ1AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever1 ) = False Then If LeverRestroke ( LeverNames . Lever1 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" LeverRestroke ( LeverNames . Lever1 ) = False If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" TrainDepartingP1SoundPlayed = False End If ' Route AJ1 to AJ18 ElseIf Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And AJ1AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever1 ) = False Then If LeverRestroke ( LeverNames . Lever1 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If LeverRestroke ( LeverNames . Lever1 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtClear SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True Buttons . ButtonRequest ( ButtonNames . Button1 ) = False Buttons . ButtonRequest ( ButtonNames . Button2 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonRequest ( ButtonNames . Button4 ) = False Buttons . ButtonRequest ( ButtonNames . Button5 ) = False Buttons . ButtonRequest ( ButtonNames . Button6 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" TrainDepartingP1SoundPlayed = False End If ' Route AJ1 to Headshunt ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And Lever ( LeverNames . Lever11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever1 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And AJ1AllowDispatch = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button21 ) = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If End If ' Lever 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ2Initiated = True Then If Lever ( LeverNames . Lever2 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False ElseIf Lever ( LeverNames . Lever1 ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False Else LeverLock ( LeverNames . Lever2 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" LeverRestroke ( LeverNames . Lever2 ) = True ElseIf Lever ( LeverNames . Lever2 ) = \"Reverse\" Then ' Route AJ2 to AJ16 If Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever2 ) = False Then If LeverRestroke ( LeverNames . Lever2 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear LeverRestroke ( LeverNames . Lever2 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If ' Route AJ2 to AJ18 ElseIf Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear _ Then LeverLock ( LeverNames . Lever2 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever2 ) = False Then If LeverRestroke ( LeverNames . Lever2 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear LeverRestroke ( LeverNames . Lever2 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If End If ' Lever 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ3Initiated = True Then If Lever ( LeverNames . Lever3 ) = \"Normal\" Then LeverLock ( LeverNames . Lever3 ) = False SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" LeverRestroke ( LeverNames . Lever3 ) = True ElseIf Lever ( LeverNames . Lever3 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever3 ) = False ' Route AJ3 to AJ4 If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever3 ) = False Then If LeverRestroke ( LeverNames . Lever3 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear LeverRestroke ( LeverNames . Lever3 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever3 ) = True SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If End If ' Lever 4 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ4Initiated = True Then If Lever ( LeverNames . Lever4 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever4 ) = False ElseIf Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear _ Then LeverLock ( LeverNames . Lever4 ) = False Else LeverLock ( LeverNames . Lever4 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" LeverRestroke ( LeverNames . Lever4 ) = True ElseIf Lever ( LeverNames . Lever4 ) = \"Reverse\" Then ' Route AJ4 to AJ21 If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever4 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever4 ) = False Then If LeverRestroke ( LeverNames . Lever4 ) = True Then If Buttons . ButtonRequest ( ButtonNames . Button2 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If LeverRestroke ( LeverNames . Lever4 ) = False End If Else If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If End If Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button27 ) = False End If ' Route AJ4 to AJ7 ElseIf Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever4 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever4 ) = False Then If LeverRestroke ( LeverNames . Lever4 ) = True Then If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If LeverRestroke ( LeverNames . Lever4 ) = False End If Else If Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then Errors . NewError ( \"AJ4E - No route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True Then Errors . NewError ( \"AJ4E - Different route selected by platform staff\" ) ElseIf Buttons . ButtonRequest ( ButtonNames . Button25 ) = True And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtClear Errors . RemoveError ( \"AJ4E - Different route selected by platform staff\" ) Errors . RemoveError ( \"AJ4E - No route selected by platform staff\" ) End If End If Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button26 ) = False End If Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If End If ' Lever 5 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point5Initiated = True Then If Lever ( LeverNames . Lever5 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" _ And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever5 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever5 ) = True Points . PointRequestedOutputs ( PointNames . P5a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"OFF\" End If End If ' Lever 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point6Initiated = True Then If Lever ( LeverNames . Lever6 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever6 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever1 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever6 ) = True Points . PointRequestedOutputs ( PointNames . P6a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"OFF\" End If End If ' Lever 7 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ7Initiated = True Then If Lever ( LeverNames . Lever7 ) = \"Normal\" And SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then LeverLock ( LeverNames . Lever7 ) = False SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" LeverRestroke ( LeverNames . Lever7 ) = True ElseIf Lever ( LeverNames . Lever7 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever7 ) = False ' Route AJ7 to AJ1 If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever7 ) = False Then If LeverRestroke ( LeverNames . Lever7 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" LeverRestroke ( LeverNames . Lever7 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever7 ) = True SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If End If ' Lever 8 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ8Initiated = True Then If Lever ( LeverNames . Lever8 ) = \"Normal\" Then If Lever ( LeverNames . Lever22 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" Or Points . PointReturns ( PointNames . P12 ) = \"Normal\" And TunnelSafe = True And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever8 ) = False Else LeverLock ( LeverNames . Lever8 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" LeverRestroke ( LeverNames . Lever8 ) = True ElseIf Lever ( LeverNames . Lever8 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever8 ) = False ' Route AJ8 to If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever8 ) = False Then If LeverRestroke ( LeverNames . Lever8 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" LeverRestroke ( LeverNames . Lever8 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever8 ) = True SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If End If ' Lever 9 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ9Initiated = True Then If Lever ( LeverNames . Lever9 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear Then LeverLock ( LeverNames . Lever9 ) = False SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" LeverRestroke ( LeverNames . Lever9 ) = True ElseIf Lever ( LeverNames . Lever9 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever9 ) = False ' Route AJ9 to AJ17 If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever9 ) = False Then If LeverRestroke ( LeverNames . Lever9 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" LeverRestroke ( LeverNames . Lever9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" End If ' Route AJ9 to FoxHole ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And Lever ( LeverNames . Lever14 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button22 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever9 ) = True SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If End If ' Lever 10 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point10Initiated = True Then If Lever ( LeverNames . Lever10 ) = \"Normal\" Then If Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever10 ) = \"Reverse\" Then If Lever ( LeverNames . Lever2 ) = \"Normal\" And Lever ( LeverNames . Lever21 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever10 ) = True Points . PointRequestedOutputs ( PointNames . P10 ) = \"OFF\" End If End If ' Lever 11 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point11Initiated = True Then If Lever ( LeverNames . Lever11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever1 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever1 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever11 ) = True Points . PointRequestedOutputs ( PointNames . P11 ) = \"OFF\" End If End If ' Lever 12 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point12Initiated = True Then If Lever ( LeverNames . Lever12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever12 ) = True Points . PointRequestedOutputs ( PointNames . P12 ) = \"OFF\" End If End If ' Lever 13 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point13Initiated = True Then If Lever ( LeverNames . Lever13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever4 ) = \"Normal\" And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever22 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" And Lever ( LeverNames . Lever22 ) = \"Normal\" And Lever ( LeverNames . Lever4 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever13 ) = True Points . PointRequestedOutputs ( PointNames . P13 ) = \"OFF\" End If End If ' Lever 14 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point14Initiated = True Then If Lever ( LeverNames . Lever14 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And Lever ( LeverNames . Lever9 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever14 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And Lever ( LeverNames . Lever9 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = Clear Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever14 ) = True Points . PointRequestedOutputs ( PointNames . P14 ) = \"OFF\" End If End If ' Lever 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ15Initiated = True Then If Lever ( LeverNames . Lever15 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Normal\" _ And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear _ Then LeverLock ( LeverNames . Lever15 ) = False ElseIf Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And Lever ( LeverNames . Lever12 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" LeverRestroke ( LeverNames . Lever15 ) = True ElseIf Lever ( LeverNames . Lever15 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If If Lever ( LeverNames . Lever8 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear _ And Lever ( LeverNames . Lever13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear _ Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever15 ) = False Then If LeverRestroke ( LeverNames . Lever15 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" LeverRestroke ( LeverNames . Lever15 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If End If ' Lever 16 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ16Initiated = True Then If Lever ( LeverNames . Lever16 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And (( Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" And TunnelSafe = True ) Or ( Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And Lever ( LeverNames . Lever19 ) = \"Reverse\" )) Then LeverLock ( LeverNames . Lever16 ) = False Else LeverLock ( LeverNames . Lever16 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" LeverRestroke ( LeverNames . Lever16 ) = True ElseIf Lever ( LeverNames . Lever16 ) = \"Reverse\" Then ' Route AJ16 to AJ8 If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" And TunnelSafe = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then LeverLock ( LeverNames . Lever16 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" End If ' Route AJ16 to EngineShed ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And Lever ( LeverNames . Lever19 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear Then LeverLock ( LeverNames . Lever16 ) = False SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button19 ) = False Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If End If ' Lever 17 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ17Initiated = True Then If Lever ( LeverNames . Lever17 ) = \"Normal\" And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever17 ) = False SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" LeverRestroke ( LeverNames . Lever17 ) = True ElseIf Lever ( LeverNames . Lever17 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever17 ) = False ' Route AJ17 to AJ2 If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever17 ) = False Then If LeverRestroke ( LeverNames . Lever17 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear LeverRestroke ( LeverNames . Lever17 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever17 ) = True SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If End If ' Lever 18 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ18Initiated = True Then If Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever18 ) = False SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" LeverRestroke ( LeverNames . Lever18 ) = True ElseIf Lever ( LeverNames . Lever18 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever18 ) = False ' Route AJ18 to AJ9 If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtClear End If Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever18 ) = True SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If End If ' Lever 19 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point19Initiated = True Then If Lever ( LeverNames . Lever19 ) = LeverInNormal Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And Lever ( LeverNames . Lever16 ) = LeverInNormal And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal ElseIf Lever ( LeverNames . Lever19 ) = LeverInReverse Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And Lever ( LeverNames . Lever16 ) = LeverInNormal And TunnelSafe = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = Clear Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Else LeverLock ( LeverNames . Lever19 ) = True Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF End If End If ' Lever 20 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever20 ) = True ' Lever 21 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ21Initiated = True Then If Lever ( LeverNames . Lever21 ) = \"Normal\" Then TrainDepartingP2SoundPlayed = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And Lever ( LeverNames . Lever2 ) = \"Normal\" And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear Then LeverLock ( LeverNames . Lever21 ) = False ElseIf Lever ( LeverNames . Lever1 ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever2 ) = \"Normal\" _ And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever21 ) = False Else LeverLock ( LeverNames . Lever21 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" LeverRestroke ( LeverNames . Lever21 ) = True ElseIf Lever ( LeverNames . Lever21 ) = \"Reverse\" Then ' Route AJ21 to AJ18 If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = Clear _ And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear _ Then LeverLock ( LeverNames . Lever21 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever21 ) = False Then If LeverRestroke ( LeverNames . Lever21 ) = True Then If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear LeverRestroke ( LeverNames . Lever21 ) = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If ' Route AJ21 to AJ16 ElseIf Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And ( Lever ( LeverNames . Lever1 ) = \"Normal\" _ And Points . PointReturns ( PointNames . P11 ) = \"Normal\" ) And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = Clear Then LeverLock ( LeverNames . Lever21 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever21 ) = False Then If LeverRestroke ( LeverNames . Lever21 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If LeverRestroke ( LeverNames . Lever21 ) = False Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtClear Buttons . ButtonRequest ( ButtonNames . Button10 ) = False Buttons . ButtonRequest ( ButtonNames . Button11 ) = False Buttons . ButtonRequest ( ButtonNames . Button12 ) = False Buttons . ButtonRequest ( ButtonNames . Button13 ) = False Buttons . ButtonRequest ( ButtonNames . Button14 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If End If ' Lever 22 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ22Initiated = True Then If Lever ( LeverNames . Lever22 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" And Lever ( LeverNames . Lever4 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" _ And Lever ( LeverNames . Lever13 ) = \"Reverse\" And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf Lever ( LeverNames . Lever22 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And Lever ( LeverNames . Lever4 ) = \"Normal\" _ And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" LeverLock ( LeverNames . Lever22 ) = True End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Errors_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/Errors.vb \u00b6 Source code \u00b6 Imports Microsoft . AspNetCore . Hosting Module Errors Public CurrentErrorList As New List ( Of String ) Public DisplayCurrentError As String = \"\" Public CurrentDisplayCount As Integer = 0 Public AllowSoftwareToStartBeforeLoggingFaults As Integer = 10 Public CurrentRequestList As New List ( Of String ) Public DisplayCurrentRequest As String = \"\" Public CurrentDisplayCountRequest As Integer = 0 Public Sub DisplayErrorLogic () If AllowSoftwareToStartBeforeLoggingFaults = 0 Then If CurrentErrorList . Count = 0 Then DisplayCurrentError = \"\" Else CurrentDisplayCount = CurrentDisplayCount + 1 If CurrentDisplayCount > CurrentErrorList . Count Then CurrentDisplayCount = 0 Else If CurrentErrorList . Count > 1 Then DisplayCurrentError = ( \"(Error \" & CurrentDisplayCount & \" of \" & CurrentErrorList . Count & \") \" & Left ( CurrentErrorList ( CurrentDisplayCount - 1 ), 48 )) Else DisplayCurrentError = ( Left ( CurrentErrorList ( CurrentDisplayCount - 1 ), 48 )) End If End If End If Else DisplayCurrentError = ( \"Initializing... \" ) If Not AllowSoftwareToStartBeforeLoggingFaults = 0 Then AllowSoftwareToStartBeforeLoggingFaults = AllowSoftwareToStartBeforeLoggingFaults - 1 End If End Sub Public Sub NewError ( AddNewError As String ) If AllowSoftwareToStartBeforeLoggingFaults = 0 Then AddNewError = AddNewError If CurrentErrorList . Contains ( AddNewError ) = False Then CurrentErrorList . Add ( AddNewError ) TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , AddNewError ) UpdateSystemLog ( AddNewError ) End If End If End Sub Public Sub RemoveError ( RemoveOldError As String ) CurrentErrorList . Remove ( RemoveOldError ) End Sub Public Sub DisplayRequestLogic () If AllowSoftwareToStartBeforeLoggingFaults = 0 Then If CurrentRequestList . Count = 0 Then DisplayCurrentRequest = \"\" Else CurrentDisplayCountRequest = CurrentDisplayCountRequest + 1 If CurrentDisplayCountRequest > CurrentRequestList . Count Then CurrentDisplayCountRequest = 0 Else If CurrentRequestList . Count > 1 Then DisplayCurrentRequest = ( \"(Request \" & CurrentDisplayCountRequest & \" of \" & CurrentRequestList . Count & \") \" & Left ( CurrentRequestList ( CurrentDisplayCountRequest - 1 ), 48 )) Else DisplayCurrentRequest = ( Left ( CurrentRequestList ( CurrentDisplayCountRequest - 1 ), 48 )) End If End If End If End If End Sub Public Sub NewRequest ( AddNewRequest As String ) If AllowSoftwareToStartBeforeLoggingFaults = 0 Then AddNewRequest = AddNewRequest If CurrentRequestList . Contains ( AddNewRequest ) = False Then CurrentRequestList . Add ( AddNewRequest ) End If End If End Sub Public Sub RemoveRequest ( RemoveOldRequest As String ) CurrentRequestList . Remove ( RemoveOldRequest ) End Sub Public Sub checkRequests () If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button1 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Inner\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Inner\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button2 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Outer\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Outer\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button3 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> HeadShunt\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> HeadShunt\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button4 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button5 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> EngineShed\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> EngineShed\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button6 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> FoxHole\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> FoxHole\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button7 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Tunnel\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Tunnel\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button8 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button9 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Turntable\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Turntable\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button10 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Inner\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Inner\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button11 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Outer\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Outer\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button12 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button13 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> EngineShed\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> EngineShed\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button14 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> FoxHole\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> FoxHole\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button15 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Tunnel\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Tunnel\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button16 )) = 1 Then Errors . NewRequest ( \"Request - Westend P2 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Westend P2 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button17 )) = 1 Then ' Errors . NewRequest ( \"Request - Westend P1 -> Centre platform\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Centre platform\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button18 )) = 1 Then ' Errors . NewRequest ( \"Request - Westend P2 -> Centre platform\" ) Else Errors . RemoveRequest ( \"Request - Westend P2 -> Centre platform\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button19 )) = 1 Then Errors . NewRequest ( \"Request - Engine Shed -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - Engine Shed -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button20 )) = 1 Then Errors . NewRequest ( \"Request - TurnTable -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - TurnTable -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button21 )) = 1 Then Errors . NewRequest ( \"Request - HeadShunt -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - HeadShunt -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button22 )) = 1 Then Errors . NewRequest ( \"Request - Foxhole -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - Foxhole -> Main Line\" ) End If If EastBound = True Then JsonValueCallInAJ18WText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then Errors . NewRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Else Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) End If ElseIf WestBound = True Then JsonValueCallInAJ4EText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then Errors . NewRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Else Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) End If End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Errors.vb"},{"location":"mainsystem/Files/Errors_8vb/#githubsignallingsystemehmr-signalling-systemlogicerrorsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Errors.vb"},{"location":"mainsystem/Files/Errors_8vb/#source-code","text":"Imports Microsoft . AspNetCore . Hosting Module Errors Public CurrentErrorList As New List ( Of String ) Public DisplayCurrentError As String = \"\" Public CurrentDisplayCount As Integer = 0 Public AllowSoftwareToStartBeforeLoggingFaults As Integer = 10 Public CurrentRequestList As New List ( Of String ) Public DisplayCurrentRequest As String = \"\" Public CurrentDisplayCountRequest As Integer = 0 Public Sub DisplayErrorLogic () If AllowSoftwareToStartBeforeLoggingFaults = 0 Then If CurrentErrorList . Count = 0 Then DisplayCurrentError = \"\" Else CurrentDisplayCount = CurrentDisplayCount + 1 If CurrentDisplayCount > CurrentErrorList . Count Then CurrentDisplayCount = 0 Else If CurrentErrorList . Count > 1 Then DisplayCurrentError = ( \"(Error \" & CurrentDisplayCount & \" of \" & CurrentErrorList . Count & \") \" & Left ( CurrentErrorList ( CurrentDisplayCount - 1 ), 48 )) Else DisplayCurrentError = ( Left ( CurrentErrorList ( CurrentDisplayCount - 1 ), 48 )) End If End If End If Else DisplayCurrentError = ( \"Initializing... \" ) If Not AllowSoftwareToStartBeforeLoggingFaults = 0 Then AllowSoftwareToStartBeforeLoggingFaults = AllowSoftwareToStartBeforeLoggingFaults - 1 End If End Sub Public Sub NewError ( AddNewError As String ) If AllowSoftwareToStartBeforeLoggingFaults = 0 Then AddNewError = AddNewError If CurrentErrorList . Contains ( AddNewError ) = False Then CurrentErrorList . Add ( AddNewError ) TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , AddNewError ) UpdateSystemLog ( AddNewError ) End If End If End Sub Public Sub RemoveError ( RemoveOldError As String ) CurrentErrorList . Remove ( RemoveOldError ) End Sub Public Sub DisplayRequestLogic () If AllowSoftwareToStartBeforeLoggingFaults = 0 Then If CurrentRequestList . Count = 0 Then DisplayCurrentRequest = \"\" Else CurrentDisplayCountRequest = CurrentDisplayCountRequest + 1 If CurrentDisplayCountRequest > CurrentRequestList . Count Then CurrentDisplayCountRequest = 0 Else If CurrentRequestList . Count > 1 Then DisplayCurrentRequest = ( \"(Request \" & CurrentDisplayCountRequest & \" of \" & CurrentRequestList . Count & \") \" & Left ( CurrentRequestList ( CurrentDisplayCountRequest - 1 ), 48 )) Else DisplayCurrentRequest = ( Left ( CurrentRequestList ( CurrentDisplayCountRequest - 1 ), 48 )) End If End If End If End If End Sub Public Sub NewRequest ( AddNewRequest As String ) If AllowSoftwareToStartBeforeLoggingFaults = 0 Then AddNewRequest = AddNewRequest If CurrentRequestList . Contains ( AddNewRequest ) = False Then CurrentRequestList . Add ( AddNewRequest ) End If End If End Sub Public Sub RemoveRequest ( RemoveOldRequest As String ) CurrentRequestList . Remove ( RemoveOldRequest ) End Sub Public Sub checkRequests () If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button1 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Inner\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Inner\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button2 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Outer\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Outer\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button3 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> HeadShunt\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> HeadShunt\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button4 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button5 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> EngineShed\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> EngineShed\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button6 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P1 -> FoxHole\" ) Else Errors . RemoveRequest ( \"Request - Eastend P1 -> FoxHole\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button7 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Tunnel\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Tunnel\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button8 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button9 )) = 1 Then Errors . NewRequest ( \"Request - Westend P1 -> Turntable\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Turntable\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button10 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Inner\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Inner\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button11 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Outer\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Outer\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button12 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button13 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> EngineShed\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> EngineShed\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button14 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> FoxHole\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> FoxHole\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button15 )) = 1 Then Errors . NewRequest ( \"Request - Eastend P2 -> Tunnel\" ) Else Errors . RemoveRequest ( \"Request - Eastend P2 -> Tunnel\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button16 )) = 1 Then Errors . NewRequest ( \"Request - Westend P2 -> Extention\" ) Else Errors . RemoveRequest ( \"Request - Westend P2 -> Extention\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button17 )) = 1 Then ' Errors . NewRequest ( \"Request - Westend P1 -> Centre platform\" ) Else Errors . RemoveRequest ( \"Request - Westend P1 -> Centre platform\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button18 )) = 1 Then ' Errors . NewRequest ( \"Request - Westend P2 -> Centre platform\" ) Else Errors . RemoveRequest ( \"Request - Westend P2 -> Centre platform\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button19 )) = 1 Then Errors . NewRequest ( \"Request - Engine Shed -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - Engine Shed -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button20 )) = 1 Then Errors . NewRequest ( \"Request - TurnTable -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - TurnTable -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button21 )) = 1 Then Errors . NewRequest ( \"Request - HeadShunt -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - HeadShunt -> Main Line\" ) End If If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button22 )) = 1 Then Errors . NewRequest ( \"Request - Foxhole -> Main Line\" ) Else Errors . RemoveRequest ( \"Request - Foxhole -> Main Line\" ) End If If EastBound = True Then JsonValueCallInAJ18WText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then Errors . NewRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Else Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) End If ElseIf WestBound = True Then JsonValueCallInAJ4EText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then Errors . NewRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P2\" ) ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then Errors . NewRequest ( \"Request call in P2\" ) Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Else Errors . RemoveRequest ( \"Waiting for selection to be made\" ) Errors . RemoveRequest ( \"Request call in P1\" ) Errors . RemoveRequest ( \"Request call in P2\" ) End If End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/FrameIndicatorLights_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/FrameIndicatorLights.vb \u00b6 Source code \u00b6 Module FrameIndicatorLights Public RGBMode As Boolean = False Public RGBBrightness As Integer = 255 Public RGBFlash As Boolean = False ' Colours Public RGBOFF As String = \"OFF\" Public RGBRed As String = \"RED\" Public RGBGreen As String = \"GREEN\" Public RGBBlue As String = \"BLUE\" Public RGBWarmWhite As String = \"WARMWHITE\" Public RGBCoolWhite As String = \"COOLWHITE\" Public RGBAllWhite As String = \"ALLWHITE\" Public RGBYellow As String = \"YELLOW\" Public RGBMagenta As String = \"MAGENTA\" Public RGBCyan As String = \"CYAN\" ' Flash Public Sub Flash () RGBFlash = Not RGBFlash End Sub ' Logic Public Sub FrameIndicatorLights () ' Lever 1 - ( AJ1E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever1Top , SignalOutputState ( Definitions . SignalNames . AJ1E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"System\" And AJ1Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever1Bottom , RGBOFF , True ) ' Lever 2 - ( AJ2E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever2Top , SignalOutputState ( Definitions . SignalNames . AJ2E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"System\" And AJ2Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever2Bottom , RGBOFF , True ) ' Lever 3 - ( AJ3E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , SignalOutputState ( Definitions . SignalNames . AJ3E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And AJ3Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , SignalOutputState ( Definitions . SignalNames . AJ3W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"System\" And AJ3Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Bottom , RGBOFF , True ) ' Lever 4 - ( AJ4E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever4Top , SignalOutputState ( Definitions . SignalNames . AJ4E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"System\" And AJ4Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever4Bottom , RGBOFF , True ) ' Levers 5 - ( P5a / b ) If Points . PointReturns ( PointNames . P5a ) = PointInNormal And Points . PointReturns ( PointNames . P5b ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) End If If Points . PointReturns ( PointNames . P5a ) = PointInReverse And Points . PointReturns ( PointNames . P5b ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) End If ' Lever 6 - ( P6a / b ) If Points . PointReturns ( PointNames . P6a ) = PointInNormal And Points . PointReturns ( PointNames . P6b ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) End If If Points . PointReturns ( PointNames . P6a ) = PointInReverse And Points . PointReturns ( PointNames . P6b ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) End If ' Lever 7 - ( AJ7E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , SignalOutputState ( Definitions . SignalNames . AJ7E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"System\" And AJ7Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , SignalOutputState ( Definitions . SignalNames . AJ7W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"System\" And AJ7Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Bottom , RGBOFF , True ) ' Lever 8 - ( AJ8E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , SignalOutputState ( Definitions . SignalNames . AJ8E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"System\" And AJ8Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , SignalOutputState ( Definitions . SignalNames . AJ8W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"System\" And AJ8Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Bottom , RGBOFF , True ) ' Lever 9 - ( AJ9E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , SignalOutputState ( Definitions . SignalNames . AJ9E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"System\" And AJ9Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , SignalOutputState ( Definitions . SignalNames . AJ9W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"System\" And AJ9Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Bottom , RGBOFF , True ) ' Lever 10 - ( P10 ) If Points . PointReturns ( PointNames . P10 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) End If ' Lever 11 - ( P11 ) If Points . PointReturns ( PointNames . P11 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) End If ' Lever 12 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever12Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever12Bottom , RGBOFF , True ) ' Lever 13 - ( P12 ) If Points . PointReturns ( PointNames . P12 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) End If ' Lever 14 - ( P13 ) If Points . PointReturns ( PointNames . P13 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) End If ' Lever 15 - ( P14 ) If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) End If ' Lever 16 - ( AJ15W ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever16Top , SignalOutputState ( Definitions . SignalNames . AJ15W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"System\" And AJ15Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever16Bottom , RGBOFF , True ) ' Lever 17 - ( AJ16E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , SignalOutputState ( Definitions . SignalNames . AJ16E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"System\" And AJ16Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , SignalOutputState ( Definitions . SignalNames . AJ16W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"System\" And AJ16Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Bottom , RGBOFF , True ) ' Lever 18 - ( AJ17E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , SignalOutputState ( Definitions . SignalNames . AJ17E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"System\" And AJ17Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , SignalOutputState ( Definitions . SignalNames . AJ17W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"System\" And AJ17Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Bottom , RGBOFF , True ) ' Lever 19 - ( AJ18E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , SignalOutputState ( Definitions . SignalNames . AJ18E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"System\" And AJ18Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , SignalOutputState ( Definitions . SignalNames . AJ18W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"System\" And AJ18Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Bottom , RGBOFF , True ) ' Lever 20 - ( P19 ) If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) End If ' Levers 21 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever21Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever21Bottom , RGBOFF , True ) ' Levers 22 - ( AJ21E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever22Top , SignalOutputState ( Definitions . SignalNames . AJ21E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"System\" And AJ21Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever22Bottom , RGBOFF , True ) ' Lever 23 - ( AJ22W ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever23Top , SignalOutputState ( Definitions . SignalNames . AJ22W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"System\" And AJ22Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever23Bottom , RGBOFF , True ) ' Levers 24 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever24Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever24Bottom , RGBOFF , True ) End Sub Public Sub UpdateRGBIndicator ( Indicator As Integer , RGBColour As String , overridden As Boolean ) If FrameDisplayPower = True Then If overridden = False And RGBFlash = True Then ' Flash Blue or Off depending on if display is set to RGB or Normal If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If Else If RGBColour = RGBRed Or RGBColour = \"Danger\" Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) ElseIf RGBColour = RGBGreen Or RGBColour = \"Clear\" Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBBlue Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBWarmWhite Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 1 * RGBBrightness ) ElseIf RGBColour = RGBCoolWhite Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) ElseIf RGBColour = RGBAllWhite Or RGBColour = \"Shunt\" Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 1 * RGBBrightness ) ElseIf RGBColour = RGBYellow Or RGBColour = \"Caution\" Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBMagenta Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBCyan Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBOFF Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If End If Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/FrameIndicatorLights.vb"},{"location":"mainsystem/Files/FrameIndicatorLights_8vb/#githubsignallingsystemehmr-signalling-systemdevicesframeindicatorlightsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/FrameIndicatorLights.vb"},{"location":"mainsystem/Files/FrameIndicatorLights_8vb/#source-code","text":"Module FrameIndicatorLights Public RGBMode As Boolean = False Public RGBBrightness As Integer = 255 Public RGBFlash As Boolean = False ' Colours Public RGBOFF As String = \"OFF\" Public RGBRed As String = \"RED\" Public RGBGreen As String = \"GREEN\" Public RGBBlue As String = \"BLUE\" Public RGBWarmWhite As String = \"WARMWHITE\" Public RGBCoolWhite As String = \"COOLWHITE\" Public RGBAllWhite As String = \"ALLWHITE\" Public RGBYellow As String = \"YELLOW\" Public RGBMagenta As String = \"MAGENTA\" Public RGBCyan As String = \"CYAN\" ' Flash Public Sub Flash () RGBFlash = Not RGBFlash End Sub ' Logic Public Sub FrameIndicatorLights () ' Lever 1 - ( AJ1E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever1Top , SignalOutputState ( Definitions . SignalNames . AJ1E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"System\" And AJ1Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever1Bottom , RGBOFF , True ) ' Lever 2 - ( AJ2E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever2Top , SignalOutputState ( Definitions . SignalNames . AJ2E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"System\" And AJ2Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever2Bottom , RGBOFF , True ) ' Lever 3 - ( AJ3E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , SignalOutputState ( Definitions . SignalNames . AJ3E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And AJ3Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , SignalOutputState ( Definitions . SignalNames . AJ3W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"System\" And AJ3Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever3Bottom , RGBOFF , True ) ' Lever 4 - ( AJ4E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever4Top , SignalOutputState ( Definitions . SignalNames . AJ4E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"System\" And AJ4Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever4Bottom , RGBOFF , True ) ' Levers 5 - ( P5a / b ) If Points . PointReturns ( PointNames . P5a ) = PointInNormal And Points . PointReturns ( PointNames . P5b ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) End If If Points . PointReturns ( PointNames . P5a ) = PointInReverse And Points . PointReturns ( PointNames . P5b ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever5Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True )) End If ' Lever 6 - ( P6a / b ) If Points . PointReturns ( PointNames . P6a ) = PointInNormal And Points . PointReturns ( PointNames . P6b ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) End If If Points . PointReturns ( PointNames . P6a ) = PointInReverse And Points . PointReturns ( PointNames . P6b ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever6Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True )) End If ' Lever 7 - ( AJ7E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , SignalOutputState ( Definitions . SignalNames . AJ7E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"System\" And AJ7Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , SignalOutputState ( Definitions . SignalNames . AJ7W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"System\" And AJ7Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever7Bottom , RGBOFF , True ) ' Lever 8 - ( AJ8E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , SignalOutputState ( Definitions . SignalNames . AJ8E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"System\" And AJ8Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , SignalOutputState ( Definitions . SignalNames . AJ8W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"System\" And AJ8Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever8Bottom , RGBOFF , True ) ' Lever 9 - ( AJ9E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , SignalOutputState ( Definitions . SignalNames . AJ9E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"System\" And AJ9Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , SignalOutputState ( Definitions . SignalNames . AJ9W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"System\" And AJ9Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever9Bottom , RGBOFF , True ) ' Lever 10 - ( P10 ) If Points . PointReturns ( PointNames . P10 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever10Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" )) End If ' Lever 11 - ( P11 ) If Points . PointReturns ( PointNames . P11 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever11Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" )) End If ' Lever 12 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever12Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever12Bottom , RGBOFF , True ) ' Lever 13 - ( P12 ) If Points . PointReturns ( PointNames . P12 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever13Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" )) End If ' Lever 14 - ( P13 ) If Points . PointReturns ( PointNames . P13 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever14Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" )) End If ' Lever 15 - ( P14 ) If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever15Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" )) End If ' Lever 16 - ( AJ15W ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever16Top , SignalOutputState ( Definitions . SignalNames . AJ15W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"System\" And AJ15Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever16Bottom , RGBOFF , True ) ' Lever 17 - ( AJ16E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , SignalOutputState ( Definitions . SignalNames . AJ16E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"System\" And AJ16Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , SignalOutputState ( Definitions . SignalNames . AJ16W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"System\" And AJ16Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever17Bottom , RGBOFF , True ) ' Lever 18 - ( AJ17E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , SignalOutputState ( Definitions . SignalNames . AJ17E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"System\" And AJ17Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , SignalOutputState ( Definitions . SignalNames . AJ17W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"System\" And AJ17Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever18Bottom , RGBOFF , True ) ' Lever 19 - ( AJ18E / W ) If EastBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , SignalOutputState ( Definitions . SignalNames . AJ18E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"System\" And AJ18Initiated = True )) ElseIf WestBound Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , SignalOutputState ( Definitions . SignalNames . AJ18W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"System\" And AJ18Initiated = True )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Top , RGBMagenta , False ) End If UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever19Bottom , RGBOFF , True ) ' Lever 20 - ( P19 ) If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Top , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Top , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) End If If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Bottom , RGBAllWhite , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) Else UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever20Bottom , RGBOFF , ( RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" )) End If ' Levers 21 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever21Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever21Bottom , RGBOFF , True ) ' Levers 22 - ( AJ21E ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever22Top , SignalOutputState ( Definitions . SignalNames . AJ21E ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"System\" And AJ21Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever22Bottom , RGBOFF , True ) ' Lever 23 - ( AJ22W ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever23Top , SignalOutputState ( Definitions . SignalNames . AJ22W ), ( RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"System\" And AJ22Initiated = True )) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever23Bottom , RGBOFF , True ) ' Levers 24 - ( NOT USED ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever24Top , RGBOFF , True ) UpdateRGBIndicator ( Definitions . LeverIndicatorNames . Lever24Bottom , RGBOFF , True ) End Sub Public Sub UpdateRGBIndicator ( Indicator As Integer , RGBColour As String , overridden As Boolean ) If FrameDisplayPower = True Then If overridden = False And RGBFlash = True Then ' Flash Blue or Off depending on if display is set to RGB or Normal If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If Else If RGBColour = RGBRed Or RGBColour = \"Danger\" Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) ElseIf RGBColour = RGBGreen Or RGBColour = \"Clear\" Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBBlue Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBWarmWhite Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 1 * RGBBrightness ) ElseIf RGBColour = RGBCoolWhite Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) ElseIf RGBColour = RGBAllWhite Or RGBColour = \"Shunt\" Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 1 * RGBBrightness ) ElseIf RGBColour = RGBYellow Or RGBColour = \"Caution\" Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBMagenta Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBCyan Then If RGBMode = True Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 1 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If ElseIf RGBColour = RGBOFF Then SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If End If Else SerialPixelLeds . pixelRed ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelGreen ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelBlue ( Indicator ) = ( 0 * RGBBrightness ) SerialPixelLeds . pixelWhite ( Indicator ) = ( 0 * RGBBrightness ) End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Fuses_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Fuses.vb \u00b6 Source code \u00b6 Module Fuses Public AirRelayOn As Boolean Private FuseTripCount As Integer () = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Private ReadOnly boardcount As Integer = 12 Private ReadOnly FuseTripAlertCountValue = 6 Public Sub FuseLogic () Dim board As Integer = 1 Dim chip As Integer = 1 For i As Integer = 0 To boardcount - 1 ' rules For any board that has its power switched on and off under normal operation If board = 5 Then If AirRelayOn = True And Power . PointSupplyPower = True And Safety . EStopTriggered = False Then Else FuseTripCount ( i ) = 0 End If End If ' Logic for all boards If DataReadInputsArray ( DigitalDeviceAddress . InputAddressPowerCheckInput ( i )) = 0 And FuseTripCount ( i ) = FuseTripAlertCountValue Then Errors . NewError ( Messages . OutPutCardsSupplyLost ( board , chip )) ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressPowerCheckInput ( i )) = 1 Then Errors . RemoveError ( Messages . OutPutCardsSupplyLost ( board , chip )) If FuseTripCount ( i ) = FuseTripAlertCountValue Then Errors . NewError ( Messages . OutPutCardsSupplyRestored ( board , chip )) Else Errors . RemoveError ( Messages . OutPutCardsSupplyRestored ( board , chip )) End If FuseTripCount ( i ) = 0 Else FuseTripCount ( i ) += 1 End If ' move to next board If chip = 4 Then chip = 1 board += 1 Else chip += 1 End If Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Fuses.vb"},{"location":"mainsystem/Files/Fuses_8vb/#githubsignallingsystemehmr-signalling-systemdevicesfusesvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Fuses.vb"},{"location":"mainsystem/Files/Fuses_8vb/#source-code","text":"Module Fuses Public AirRelayOn As Boolean Private FuseTripCount As Integer () = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Private ReadOnly boardcount As Integer = 12 Private ReadOnly FuseTripAlertCountValue = 6 Public Sub FuseLogic () Dim board As Integer = 1 Dim chip As Integer = 1 For i As Integer = 0 To boardcount - 1 ' rules For any board that has its power switched on and off under normal operation If board = 5 Then If AirRelayOn = True And Power . PointSupplyPower = True And Safety . EStopTriggered = False Then Else FuseTripCount ( i ) = 0 End If End If ' Logic for all boards If DataReadInputsArray ( DigitalDeviceAddress . InputAddressPowerCheckInput ( i )) = 0 And FuseTripCount ( i ) = FuseTripAlertCountValue Then Errors . NewError ( Messages . OutPutCardsSupplyLost ( board , chip )) ElseIf DataReadInputsArray ( DigitalDeviceAddress . InputAddressPowerCheckInput ( i )) = 1 Then Errors . RemoveError ( Messages . OutPutCardsSupplyLost ( board , chip )) If FuseTripCount ( i ) = FuseTripAlertCountValue Then Errors . NewError ( Messages . OutPutCardsSupplyRestored ( board , chip )) Else Errors . RemoveError ( Messages . OutPutCardsSupplyRestored ( board , chip )) End If FuseTripCount ( i ) = 0 Else FuseTripCount ( i ) += 1 End If ' move to next board If chip = 4 Then chip = 1 board += 1 Else chip += 1 End If Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/GlobalConfig_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/GlobalConfig.vb \u00b6 Source code \u00b6 Imports YamlDotNet . Serialization Imports YamlDotNet . Serialization . NamingConventions Imports System . IO Module GlobalConfig Public config As GlobalConfigObj Sub loadConfig () Dim deserializer As New Deserializer () Using reader As New StreamReader ( \"C:\\SignallingSystem\\Signalling.yml\" ) config = deserializer . Deserialize ( Of GlobalConfigObj )( reader ) End Using Console . WriteLine ( config . MediaPath ) End Sub End Module Class GlobalConfigObj Public serial As SerialConfig Public jsonoutput As OutputConfig Public telegram As TelegramErrorHandler Public MediaPath As String Public LogPath As String Public RuntimePath As String End Class Class SerialConfig Public port As String Public baudrate As String End Class Class OutputConfig Public enable As Boolean Public path As String Public filename As String End Class Class TelegramErrorHandler Public enable As Boolean Public token As String Public chatidoperational As String Public chatidsoftwarefaults As String Public chatidspads As String End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/GlobalConfig.vb"},{"location":"mainsystem/Files/GlobalConfig_8vb/#githubsignallingsystemehmr-signalling-systemconfigsglobalconfigvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/GlobalConfig.vb"},{"location":"mainsystem/Files/GlobalConfig_8vb/#source-code","text":"Imports YamlDotNet . Serialization Imports YamlDotNet . Serialization . NamingConventions Imports System . IO Module GlobalConfig Public config As GlobalConfigObj Sub loadConfig () Dim deserializer As New Deserializer () Using reader As New StreamReader ( \"C:\\SignallingSystem\\Signalling.yml\" ) config = deserializer . Deserialize ( Of GlobalConfigObj )( reader ) End Using Console . WriteLine ( config . MediaPath ) End Sub End Module Class GlobalConfigObj Public serial As SerialConfig Public jsonoutput As OutputConfig Public telegram As TelegramErrorHandler Public MediaPath As String Public LogPath As String Public RuntimePath As String End Class Class SerialConfig Public port As String Public baudrate As String End Class Class OutputConfig Public enable As Boolean Public path As String Public filename As String End Class Class TelegramErrorHandler Public enable As Boolean Public token As String Public chatidoperational As String Public chatidsoftwarefaults As String Public chatidspads As String End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/IISHandler1_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/WebConfig/IISHandler1.vb \u00b6 Source code \u00b6 Imports System . Web Public Class IISHandler1 Implements IHttpHandler ''' < summary > ''' You will need to configure this handler in the Web . config file of your ''' web and register it with IIS before being able to use it . For more information ''' see the following link : https : //go.microsoft.com/?linkid=8101007 ''' </ summary > # Region \"IHttpHandler Members\" Public ReadOnly Property IsReusable () As Boolean Implements IHttpHandler . IsReusable Get ' Return false in case your Managed Handler cannot be reused for another request . ' Usually this would be false in case you have some state information preserved per request . Return True End Get End Property Public Sub ProcessRequest ( ByVal context As HttpContext ) Implements IHttpHandler . ProcessRequest ' Write your handler implementation here . End Sub # End Region End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/WebConfig/IISHandler1.vb"},{"location":"mainsystem/Files/IISHandler1_8vb/#githubsignallingsystemehmr-signalling-systemwebconfigiishandler1vb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/WebConfig/IISHandler1.vb"},{"location":"mainsystem/Files/IISHandler1_8vb/#source-code","text":"Imports System . Web Public Class IISHandler1 Implements IHttpHandler ''' < summary > ''' You will need to configure this handler in the Web . config file of your ''' web and register it with IIS before being able to use it . For more information ''' see the following link : https : //go.microsoft.com/?linkid=8101007 ''' </ summary > # Region \"IHttpHandler Members\" Public ReadOnly Property IsReusable () As Boolean Implements IHttpHandler . IsReusable Get ' Return false in case your Managed Handler cannot be reused for another request . ' Usually this would be false in case you have some state information preserved per request . Return True End Get End Property Public Sub ProcessRequest ( ByVal context As HttpContext ) Implements IHttpHandler . ProcessRequest ' Write your handler implementation here . End Sub # End Region End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/IOMonitor_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Misc/IOMonitor.vb \u00b6 Source code \u00b6 Public Class IOMonitor Private Sub Timer1_Tick ( sender As Object , e As EventArgs ) Handles Timer1 . Tick InputCard01 () InputCard02 () InputCard03 () InputCard04 () InputCard05 () InputCard06 () AnalogInputs () LeverDisplayStat () End Sub ' Input Card 01 Private Sub InputCard01 () ' Chip 1 CBDigInputCard01Chip01Input01 . Checked = DataReadInputsArray ( 1 ) CBDigInputCard01Chip01Input02 . Checked = DataReadInputsArray ( 2 ) CBDigInputCard01Chip01Input03 . Checked = DataReadInputsArray ( 3 ) CBDigInputCard01Chip01Input04 . Checked = DataReadInputsArray ( 4 ) CBDigInputCard01Chip01Input05 . Checked = DataReadInputsArray ( 5 ) CBDigInputCard01Chip01Input06 . Checked = DataReadInputsArray ( 6 ) CBDigInputCard01Chip01Input07 . Checked = DataReadInputsArray ( 7 ) CBDigInputCard01Chip01Input08 . Checked = DataReadInputsArray ( 8 ) ' Chip 2 CBDigInputCard01Chip02Input01 . Checked = DataReadInputsArray ( 9 ) CBDigInputCard01Chip02Input02 . Checked = DataReadInputsArray ( 10 ) CBDigInputCard01Chip02Input03 . Checked = DataReadInputsArray ( 11 ) CBDigInputCard01Chip02Input04 . Checked = DataReadInputsArray ( 12 ) CBDigInputCard01Chip02Input05 . Checked = DataReadInputsArray ( 13 ) CBDigInputCard01Chip02Input06 . Checked = DataReadInputsArray ( 14 ) CBDigInputCard01Chip02Input07 . Checked = DataReadInputsArray ( 15 ) CBDigInputCard01Chip02Input08 . Checked = DataReadInputsArray ( 16 ) ' Chip 3 CBDigInputCard01Chip03Input01 . Checked = DataReadInputsArray ( 17 ) CBDigInputCard01Chip03Input02 . Checked = DataReadInputsArray ( 18 ) CBDigInputCard01Chip03Input03 . Checked = DataReadInputsArray ( 19 ) CBDigInputCard01Chip03Input04 . Checked = DataReadInputsArray ( 20 ) CBDigInputCard01Chip03Input05 . Checked = DataReadInputsArray ( 21 ) CBDigInputCard01Chip03Input06 . Checked = DataReadInputsArray ( 22 ) CBDigInputCard01Chip03Input07 . Checked = DataReadInputsArray ( 23 ) CBDigInputCard01Chip03Input08 . Checked = DataReadInputsArray ( 24 ) ' Chip 4 CBDigInputCard01Chip04Input01 . Checked = DataReadInputsArray ( 25 ) CBDigInputCard01Chip04Input02 . Checked = DataReadInputsArray ( 26 ) CBDigInputCard01Chip04Input03 . Checked = DataReadInputsArray ( 27 ) CBDigInputCard01Chip04Input04 . Checked = DataReadInputsArray ( 28 ) CBDigInputCard01Chip04Input05 . Checked = DataReadInputsArray ( 29 ) CBDigInputCard01Chip04Input06 . Checked = DataReadInputsArray ( 30 ) CBDigInputCard01Chip04Input07 . Checked = DataReadInputsArray ( 31 ) CBDigInputCard01Chip04Input08 . Checked = DataReadInputsArray ( 32 ) End Sub ' Input Card 02 Private Sub InputCard02 () ' Chip 1 CBDigInputCard02Chip01Input01 . Checked = DataReadInputsArray ( 33 ) CBDigInputCard02Chip01Input02 . Checked = DataReadInputsArray ( 34 ) CBDigInputCard02Chip01Input03 . Checked = DataReadInputsArray ( 35 ) CBDigInputCard02Chip01Input04 . Checked = DataReadInputsArray ( 36 ) CBDigInputCard02Chip01Input05 . Checked = DataReadInputsArray ( 37 ) CBDigInputCard02Chip01Input06 . Checked = DataReadInputsArray ( 38 ) CBDigInputCard02Chip01Input07 . Checked = DataReadInputsArray ( 39 ) CBDigInputCard02Chip01Input08 . Checked = DataReadInputsArray ( 40 ) ' Chip 2 CBDigInputCard02Chip02Input01 . Checked = DataReadInputsArray ( 41 ) CBDigInputCard02Chip02Input02 . Checked = DataReadInputsArray ( 42 ) CBDigInputCard02Chip02Input03 . Checked = DataReadInputsArray ( 43 ) CBDigInputCard02Chip02Input04 . Checked = DataReadInputsArray ( 44 ) CBDigInputCard02Chip02Input05 . Checked = DataReadInputsArray ( 45 ) CBDigInputCard02Chip02Input06 . Checked = DataReadInputsArray ( 46 ) CBDigInputCard02Chip02Input07 . Checked = DataReadInputsArray ( 47 ) CBDigInputCard02Chip02Input08 . Checked = DataReadInputsArray ( 48 ) ' Chip 3 CBDigInputCard02Chip03Input01 . Checked = DataReadInputsArray ( 49 ) CBDigInputCard02Chip03Input02 . Checked = DataReadInputsArray ( 50 ) CBDigInputCard02Chip03Input03 . Checked = DataReadInputsArray ( 51 ) CBDigInputCard02Chip03Input04 . Checked = DataReadInputsArray ( 52 ) CBDigInputCard02Chip03Input05 . Checked = DataReadInputsArray ( 53 ) CBDigInputCard02Chip03Input06 . Checked = DataReadInputsArray ( 54 ) CBDigInputCard02Chip03Input07 . Checked = DataReadInputsArray ( 55 ) CBDigInputCard02Chip03Input08 . Checked = DataReadInputsArray ( 56 ) ' Chip 4 CBDigInputCard02Chip04Input01 . Checked = DataReadInputsArray ( 57 ) CBDigInputCard02Chip04Input02 . Checked = DataReadInputsArray ( 58 ) CBDigInputCard02Chip04Input03 . Checked = DataReadInputsArray ( 59 ) CBDigInputCard02Chip04Input04 . Checked = DataReadInputsArray ( 60 ) CBDigInputCard02Chip04Input05 . Checked = DataReadInputsArray ( 61 ) CBDigInputCard02Chip04Input06 . Checked = DataReadInputsArray ( 62 ) CBDigInputCard02Chip04Input07 . Checked = DataReadInputsArray ( 63 ) CBDigInputCard02Chip04Input08 . Checked = DataReadInputsArray ( 64 ) End Sub ' Input Card 03 Private Sub InputCard03 () ' Chip 1 CBDigInputCard03Chip01Input01 . Checked = DataReadInputsArray ( 65 ) CBDigInputCard03Chip01Input02 . Checked = DataReadInputsArray ( 66 ) CBDigInputCard03Chip01Input03 . Checked = DataReadInputsArray ( 67 ) CBDigInputCard03Chip01Input04 . Checked = DataReadInputsArray ( 68 ) CBDigInputCard03Chip01Input05 . Checked = DataReadInputsArray ( 69 ) CBDigInputCard03Chip01Input06 . Checked = DataReadInputsArray ( 70 ) CBDigInputCard03Chip01Input07 . Checked = DataReadInputsArray ( 71 ) CBDigInputCard03Chip01Input08 . Checked = DataReadInputsArray ( 72 ) ' Chip 2 CBDigInputCard03Chip02Input01 . Checked = DataReadInputsArray ( 73 ) CBDigInputCard03Chip02Input02 . Checked = DataReadInputsArray ( 74 ) CBDigInputCard03Chip02Input03 . Checked = DataReadInputsArray ( 75 ) CBDigInputCard03Chip02Input04 . Checked = DataReadInputsArray ( 76 ) CBDigInputCard03Chip02Input05 . Checked = DataReadInputsArray ( 77 ) CBDigInputCard03Chip02Input06 . Checked = DataReadInputsArray ( 78 ) CBDigInputCard03Chip02Input07 . Checked = DataReadInputsArray ( 79 ) CBDigInputCard03Chip02Input08 . Checked = DataReadInputsArray ( 80 ) ' Chip 3 CBDigInputCard03Chip03Input01 . Checked = DataReadInputsArray ( 81 ) CBDigInputCard03Chip03Input02 . Checked = DataReadInputsArray ( 82 ) CBDigInputCard03Chip03Input03 . Checked = DataReadInputsArray ( 83 ) CBDigInputCard03Chip03Input04 . Checked = DataReadInputsArray ( 84 ) CBDigInputCard03Chip03Input05 . Checked = DataReadInputsArray ( 85 ) CBDigInputCard03Chip03Input06 . Checked = DataReadInputsArray ( 86 ) CBDigInputCard03Chip03Input07 . Checked = DataReadInputsArray ( 87 ) CBDigInputCard03Chip03Input08 . Checked = DataReadInputsArray ( 88 ) ' Chip 4 CBDigInputCard03Chip04Input01 . Checked = DataReadInputsArray ( 89 ) CBDigInputCard03Chip04Input02 . Checked = DataReadInputsArray ( 90 ) CBDigInputCard03Chip04Input03 . Checked = DataReadInputsArray ( 91 ) CBDigInputCard03Chip04Input04 . Checked = DataReadInputsArray ( 92 ) CBDigInputCard03Chip04Input05 . Checked = DataReadInputsArray ( 93 ) CBDigInputCard03Chip04Input06 . Checked = DataReadInputsArray ( 94 ) CBDigInputCard03Chip04Input07 . Checked = DataReadInputsArray ( 95 ) CBDigInputCard03Chip04Input08 . Checked = DataReadInputsArray ( 96 ) End Sub ' Input Card 04 Private Sub InputCard04 () ' Chip 1 CBDigInputCard04Chip01Input01 . Checked = DataReadInputsArray ( 97 ) CBDigInputCard04Chip01Input02 . Checked = DataReadInputsArray ( 98 ) CBDigInputCard04Chip01Input03 . Checked = DataReadInputsArray ( 99 ) CBDigInputCard04Chip01Input04 . Checked = DataReadInputsArray ( 100 ) CBDigInputCard04Chip01Input05 . Checked = DataReadInputsArray ( 101 ) CBDigInputCard04Chip01Input06 . Checked = DataReadInputsArray ( 102 ) CBDigInputCard04Chip01Input07 . Checked = DataReadInputsArray ( 103 ) CBDigInputCard04Chip01Input08 . Checked = DataReadInputsArray ( 104 ) ' Chip 2 CBDigInputCard04Chip02Input01 . Checked = DataReadInputsArray ( 105 ) CBDigInputCard04Chip02Input02 . Checked = DataReadInputsArray ( 106 ) CBDigInputCard04Chip02Input03 . Checked = DataReadInputsArray ( 107 ) CBDigInputCard04Chip02Input04 . Checked = DataReadInputsArray ( 108 ) CBDigInputCard04Chip02Input05 . Checked = DataReadInputsArray ( 109 ) CBDigInputCard04Chip02Input06 . Checked = DataReadInputsArray ( 110 ) CBDigInputCard04Chip02Input07 . Checked = DataReadInputsArray ( 111 ) CBDigInputCard04Chip02Input08 . Checked = DataReadInputsArray ( 112 ) ' Chip 3 CBDigInputCard04Chip03Input01 . Checked = DataReadInputsArray ( 113 ) CBDigInputCard04Chip03Input02 . Checked = DataReadInputsArray ( 114 ) CBDigInputCard04Chip03Input03 . Checked = DataReadInputsArray ( 115 ) CBDigInputCard04Chip03Input04 . Checked = DataReadInputsArray ( 116 ) CBDigInputCard04Chip03Input05 . Checked = DataReadInputsArray ( 117 ) CBDigInputCard04Chip03Input06 . Checked = DataReadInputsArray ( 118 ) CBDigInputCard04Chip03Input07 . Checked = DataReadInputsArray ( 119 ) CBDigInputCard04Chip03Input08 . Checked = DataReadInputsArray ( 120 ) ' Chip 4 CBDigInputCard04Chip04Input01 . Checked = DataReadInputsArray ( 121 ) CBDigInputCard04Chip04Input02 . Checked = DataReadInputsArray ( 122 ) CBDigInputCard04Chip04Input03 . Checked = DataReadInputsArray ( 123 ) CBDigInputCard04Chip04Input04 . Checked = DataReadInputsArray ( 124 ) CBDigInputCard04Chip04Input05 . Checked = DataReadInputsArray ( 125 ) CBDigInputCard04Chip04Input06 . Checked = DataReadInputsArray ( 126 ) CBDigInputCard04Chip04Input07 . Checked = DataReadInputsArray ( 127 ) CBDigInputCard04Chip04Input08 . Checked = DataReadInputsArray ( 128 ) End Sub ' Input Card 05 Private Sub InputCard05 () ' Chip 1 CBDigInputCard05Chip01Input01 . Checked = DataReadInputsArray ( 129 ) CBDigInputCard05Chip01Input02 . Checked = DataReadInputsArray ( 130 ) CBDigInputCard05Chip01Input03 . Checked = DataReadInputsArray ( 131 ) CBDigInputCard05Chip01Input04 . Checked = DataReadInputsArray ( 132 ) CBDigInputCard05Chip01Input05 . Checked = DataReadInputsArray ( 133 ) CBDigInputCard05Chip01Input06 . Checked = DataReadInputsArray ( 134 ) CBDigInputCard05Chip01Input07 . Checked = DataReadInputsArray ( 135 ) CBDigInputCard05Chip01Input08 . Checked = DataReadInputsArray ( 136 ) ' Chip 2 CBDigInputCard05Chip02Input01 . Checked = DataReadInputsArray ( 137 ) CBDigInputCard05Chip02Input02 . Checked = DataReadInputsArray ( 138 ) CBDigInputCard05Chip02Input03 . Checked = DataReadInputsArray ( 139 ) CBDigInputCard05Chip02Input04 . Checked = DataReadInputsArray ( 140 ) CBDigInputCard05Chip02Input05 . Checked = DataReadInputsArray ( 141 ) CBDigInputCard05Chip02Input06 . Checked = DataReadInputsArray ( 142 ) CBDigInputCard05Chip02Input07 . Checked = DataReadInputsArray ( 143 ) CBDigInputCard05Chip02Input08 . Checked = DataReadInputsArray ( 144 ) ' Chip 3 CBDigInputCard05Chip03Input01 . Checked = DataReadInputsArray ( 145 ) CBDigInputCard05Chip03Input02 . Checked = DataReadInputsArray ( 146 ) CBDigInputCard05Chip03Input03 . Checked = DataReadInputsArray ( 147 ) CBDigInputCard05Chip03Input04 . Checked = DataReadInputsArray ( 148 ) CBDigInputCard05Chip03Input05 . Checked = DataReadInputsArray ( 149 ) CBDigInputCard05Chip03Input06 . Checked = DataReadInputsArray ( 150 ) CBDigInputCard05Chip03Input07 . Checked = DataReadInputsArray ( 151 ) CBDigInputCard05Chip03Input08 . Checked = DataReadInputsArray ( 152 ) ' Chip 4 CBDigInputCard05Chip04Input01 . Checked = DataReadInputsArray ( 153 ) CBDigInputCard05Chip04Input02 . Checked = DataReadInputsArray ( 154 ) CBDigInputCard05Chip04Input03 . Checked = DataReadInputsArray ( 155 ) CBDigInputCard05Chip04Input04 . Checked = DataReadInputsArray ( 156 ) CBDigInputCard05Chip04Input05 . Checked = DataReadInputsArray ( 157 ) CBDigInputCard05Chip04Input06 . Checked = DataReadInputsArray ( 158 ) CBDigInputCard05Chip04Input07 . Checked = DataReadInputsArray ( 159 ) CBDigInputCard05Chip04Input08 . Checked = DataReadInputsArray ( 160 ) End Sub ' Input Card 06 Private Sub InputCard06 () ' Chip 1 CBDigInputCard06Chip01Input01 . Checked = DataReadInputsArray ( 161 ) CBDigInputCard06Chip01Input02 . Checked = DataReadInputsArray ( 162 ) CBDigInputCard06Chip01Input03 . Checked = DataReadInputsArray ( 163 ) CBDigInputCard06Chip01Input04 . Checked = DataReadInputsArray ( 164 ) CBDigInputCard06Chip01Input05 . Checked = DataReadInputsArray ( 165 ) CBDigInputCard06Chip01Input06 . Checked = DataReadInputsArray ( 166 ) CBDigInputCard06Chip01Input07 . Checked = DataReadInputsArray ( 167 ) CBDigInputCard06Chip01Input08 . Checked = DataReadInputsArray ( 168 ) ' Chip 2 CBDigInputCard06Chip02Input01 . Checked = DataReadInputsArray ( 169 ) CBDigInputCard06Chip02Input02 . Checked = DataReadInputsArray ( 170 ) CBDigInputCard06Chip02Input03 . Checked = DataReadInputsArray ( 171 ) CBDigInputCard06Chip02Input04 . Checked = DataReadInputsArray ( 172 ) CBDigInputCard06Chip02Input05 . Checked = DataReadInputsArray ( 173 ) CBDigInputCard06Chip02Input06 . Checked = DataReadInputsArray ( 174 ) CBDigInputCard06Chip02Input07 . Checked = DataReadInputsArray ( 175 ) CBDigInputCard06Chip02Input08 . Checked = DataReadInputsArray ( 176 ) ' Chip 3 CBDigInputCard06Chip03Input01 . Checked = DataReadInputsArray ( 177 ) CBDigInputCard06Chip03Input02 . Checked = DataReadInputsArray ( 178 ) CBDigInputCard06Chip03Input03 . Checked = DataReadInputsArray ( 179 ) CBDigInputCard06Chip03Input04 . Checked = DataReadInputsArray ( 180 ) CBDigInputCard06Chip03Input05 . Checked = DataReadInputsArray ( 181 ) CBDigInputCard06Chip03Input06 . Checked = DataReadInputsArray ( 182 ) CBDigInputCard06Chip03Input07 . Checked = DataReadInputsArray ( 183 ) CBDigInputCard06Chip03Input08 . Checked = DataReadInputsArray ( 184 ) ' Chip 4 CBDigInputCard06Chip04Input01 . Checked = DataReadInputsArray ( 185 ) CBDigInputCard06Chip04Input02 . Checked = DataReadInputsArray ( 186 ) CBDigInputCard06Chip04Input03 . Checked = DataReadInputsArray ( 187 ) CBDigInputCard06Chip04Input04 . Checked = DataReadInputsArray ( 188 ) CBDigInputCard06Chip04Input05 . Checked = DataReadInputsArray ( 189 ) CBDigInputCard06Chip04Input06 . Checked = DataReadInputsArray ( 190 ) CBDigInputCard06Chip04Input07 . Checked = DataReadInputsArray ( 191 ) CBDigInputCard06Chip04Input08 . Checked = DataReadInputsArray ( 192 ) End Sub ' Analog Inputs Private Sub AnalogInputs () AnalogValue1 . Text = ( \"Input 01 - Section 'A' : \" & AnalogIOManager . ActualAnalogValue ( 1 ). ToString & \"V\" ) AnalogValue2 . Text = ( \"Input 02 - Section 'B' : \" & AnalogIOManager . ActualAnalogValue ( 2 ). ToString & \"V\" ) AnalogValue3 . Text = ( \"Input 03 - Section 'C' : \" & AnalogIOManager . ActualAnalogValue ( 3 ). ToString & \"V\" ) AnalogValue4 . Text = ( \"Input 04 - Section 'D' : \" & AnalogIOManager . ActualAnalogValue ( 4 ). ToString & \"V\" ) AnalogValue5 . Text = ( \"Input 05 - Section 'E' : \" & AnalogIOManager . ActualAnalogValue ( 5 ). ToString & \"V\" ) AnalogValue6 . Text = ( \"Input 06 - Section 'F' : \" & AnalogIOManager . ActualAnalogValue ( 6 ). ToString & \"V\" ) AnalogValue7 . Text = ( \"Input 07 - Section 'G' : \" & AnalogIOManager . ActualAnalogValue ( 7 ). ToString & \"V\" ) AnalogValue8 . Text = ( \"Input 08 - Section 'H' : \" & AnalogIOManager . ActualAnalogValue ( 8 ). ToString & \"V\" ) AnalogValue9 . Text = ( \"Input 09 - Section 'I' : \" & AnalogIOManager . ActualAnalogValue ( 9 ). ToString & \"V\" ) AnalogValue10 . Text = ( \"Input 10 - Section 'J' : \" & AnalogIOManager . ActualAnalogValue ( 10 ). ToString & \"V\" ) AnalogValue11 . Text = ( \"Input 11 - Section 'K' : \" & AnalogIOManager . ActualAnalogValue ( 11 ). ToString & \"V\" ) AnalogValue12 . Text = ( \"Input 12 - Section 'L' : \" & AnalogIOManager . ActualAnalogValue ( 12 ). ToString & \"V\" ) AnalogValue13 . Text = ( \"Input 13 - Section 'M' : \" & AnalogIOManager . ActualAnalogValue ( 13 ). ToString & \"V\" ) AnalogValue14 . Text = ( \"Input 14 - Section 'N' : \" & AnalogIOManager . ActualAnalogValue ( 14 ). ToString & \"V\" ) AnalogValue15 . Text = ( \"Input 15 - Section 'O' : \" & AnalogIOManager . ActualAnalogValue ( 15 ). ToString & \"V\" ) AnalogValue16 . Text = ( \"Input 16 - Section 'P' : \" & AnalogIOManager . ActualAnalogValue ( 16 ). ToString & \"V\" ) AnalogValue17 . Text = ( \"Input 17 - Section 'Q' : \" & AnalogIOManager . ActualAnalogValue ( 17 ). ToString & \"V\" ) AnalogValue18 . Text = ( \"Input 18 - Section 'DE' : \" & AnalogIOManager . ActualAnalogValue ( 18 ). ToString & \"V\" ) AnalogValue19 . Text = ( \"Input 19 - Section 'NO' : \" & AnalogIOManager . ActualAnalogValue ( 19 ). ToString & \"V\" ) AnalogValue20 . Text = ( \"Input 20 - Section 'OP' : \" & AnalogIOManager . ActualAnalogValue ( 20 ). ToString & \"V\" ) AnalogValue21 . Text = ( \"Input 21 - Section 'Q10' : \" & AnalogIOManager . ActualAnalogValue ( 21 ). ToString & \"V\" ) AnalogValue22 . Text = ( \"Input 22 - Section 'A11' : \" & AnalogIOManager . ActualAnalogValue ( 22 ). ToString & \"V\" ) AnalogValue23 . Text = ( \"Input 23 - Section 'F12' : \" & AnalogIOManager . ActualAnalogValue ( 23 ). ToString & \"V\" ) AnalogValue24 . Text = ( \"Input 24 - Section 'F13' : \" & AnalogIOManager . ActualAnalogValue ( 24 ). ToString & \"V\" ) AnalogValue25 . Text = ( \"Input 25 - Section 'NO14' : \" & AnalogIOManager . ActualAnalogValue ( 25 ). ToString & \"V\" ) AnalogValue26 . Text = ( \"Input 26 - Section 'C19' : \" & AnalogIOManager . ActualAnalogValue ( 26 ). ToString & \"V\" ) AnalogValue27 . Text = ( \"Input 27 - Section 'CD' : \" & AnalogIOManager . ActualAnalogValue ( 27 ). ToString & \"V\" ) AnalogValue28 . Text = ( \"Input 28 - Section 'R' : \" & AnalogIOManager . ActualAnalogValue ( 28 ). ToString & \"V\" ) AnalogValue29 . Text = ( \"Input 29 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 29 ). ToString & \"V\" ) AnalogValue30 . Text = ( \"Input 30 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 30 ). ToString & \"V\" ) AnalogValue31 . Text = ( \"Input 31 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 31 ). ToString & \"V\" ) AnalogValue32 . Text = ( \"Input 32 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 32 ). ToString & \"V\" ) AnalogValue33 . Text = ( \"Input 33 - P5a Normal : \" & AnalogIOManager . ActualAnalogValue ( 33 ). ToString & \"V\" ) AnalogValue34 . Text = ( \"Input 34 - P5a Reverse : \" & AnalogIOManager . ActualAnalogValue ( 34 ). ToString & \"V\" ) AnalogValue35 . Text = ( \"Input 35 - P5b Normal : \" & AnalogIOManager . ActualAnalogValue ( 35 ). ToString & \"V\" ) AnalogValue36 . Text = ( \"Input 36 - P5b Reverse : \" & AnalogIOManager . ActualAnalogValue ( 36 ). ToString & \"V\" ) AnalogValue37 . Text = ( \"Input 37 - P6a Normal : \" & AnalogIOManager . ActualAnalogValue ( 37 ). ToString & \"V\" ) AnalogValue38 . Text = ( \"Input 38 - P6a Reverse : \" & AnalogIOManager . ActualAnalogValue ( 38 ). ToString & \"V\" ) AnalogValue39 . Text = ( \"Input 39 - P6b Normal : \" & AnalogIOManager . ActualAnalogValue ( 39 ). ToString & \"V\" ) AnalogValue40 . Text = ( \"Input 40 - P6b Reverse : \" & AnalogIOManager . ActualAnalogValue ( 40 ). ToString & \"V\" ) AnalogValue41 . Text = ( \"Input 41 - P10 Normal : \" & AnalogIOManager . ActualAnalogValue ( 41 ). ToString & \"V\" ) AnalogValue42 . Text = ( \"Input 42 - P10 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 42 ). ToString & \"V\" ) AnalogValue43 . Text = ( \"Input 43 - P11 Normal : \" & AnalogIOManager . ActualAnalogValue ( 43 ). ToString & \"V\" ) AnalogValue44 . Text = ( \"Input 44 - P11 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 44 ). ToString & \"V\" ) AnalogValue45 . Text = ( \"Input 45 - P12 Normal : \" & AnalogIOManager . ActualAnalogValue ( 45 ). ToString & \"V\" ) AnalogValue46 . Text = ( \"Input 46 - P12 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 46 ). ToString & \"V\" ) AnalogValue47 . Text = ( \"Input 47 - P13 Normal : \" & AnalogIOManager . ActualAnalogValue ( 47 ). ToString & \"V\" ) AnalogValue48 . Text = ( \"Input 48 - P13 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 48 ). ToString & \"V\" ) AnalogValue49 . Text = ( \"Input 49 - P14 Normal : \" & AnalogIOManager . ActualAnalogValue ( 49 ). ToString & \"V\" ) AnalogValue50 . Text = ( \"Input 50 - P14 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 50 ). ToString & \"V\" ) AnalogValue51 . Text = ( \"Input 51 - P19 Normal : \" & AnalogIOManager . ActualAnalogValue ( 51 ). ToString & \"V\" ) AnalogValue52 . Text = ( \"Input 52 - P19 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 52 ). ToString & \"V\" ) AnalogValue53 . Text = ( \"Input 53 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 53 ). ToString & \"V\" ) AnalogValue54 . Text = ( \"Input 54 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 54 ). ToString & \"V\" ) AnalogValue55 . Text = ( \"Input 55 - Section 'P5a' : \" & AnalogIOManager . ActualAnalogValue ( 55 ). ToString & \"V\" ) AnalogValue56 . Text = ( \"Input 56 - Section 'P5b' : \" & AnalogIOManager . ActualAnalogValue ( 56 ). ToString & \"V\" ) AnalogValue57 . Text = ( \"Input 57 - Section 'P6a' : \" & AnalogIOManager . ActualAnalogValue ( 57 ). ToString & \"V\" ) AnalogValue58 . Text = ( \"Input 58 - Section 'P6b' : \" & AnalogIOManager . ActualAnalogValue ( 58 ). ToString & \"V\" ) AnalogValue59 . Text = ( \"Input 59 - Section 'P10' : \" & AnalogIOManager . ActualAnalogValue ( 59 ). ToString & \"V\" ) AnalogValue60 . Text = ( \"Input 60 - Section 'P11' : \" & AnalogIOManager . ActualAnalogValue ( 60 ). ToString & \"V\" ) AnalogValue61 . Text = ( \"Input 61 - Section 'P12' : \" & AnalogIOManager . ActualAnalogValue ( 61 ). ToString & \"V\" ) AnalogValue62 . Text = ( \"Input 62 - Section 'P13' : \" & AnalogIOManager . ActualAnalogValue ( 62 ). ToString & \"V\" ) AnalogValue63 . Text = ( \"Input 63 - Section 'P14' : \" & AnalogIOManager . ActualAnalogValue ( 63 ). ToString & \"V\" ) AnalogValue64 . Text = ( \"Input 64 - Section 'P19' : \" & AnalogIOManager . ActualAnalogValue ( 64 ). ToString & \"V\" ) End Sub ' Lever Display Private Sub LeverDisplayStat () ' Lever 1 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever1Top ) > 0 Then PBLever1Top . BackColor = Color . White Else PBLever1Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever1Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever1Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever1Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever1Bottom ) > 0 Then PBLever1bottom . BackColor = Color . White Else PBLever1bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever1Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever1Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever1Bottom ))) ' Lever 2 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever2Top ) > 0 Then PBLever2Top . BackColor = Color . White Else PBLever2Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever2Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever2Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever2Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever2Bottom ) > 0 Then PBLever2bottom . BackColor = Color . White Else PBLever2bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever2Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever2Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever2Bottom ))) ' Lever 3 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever3Top ) > 0 Then PBLever3Top . BackColor = Color . White Else PBLever3Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever3Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever3Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever3Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever3Bottom ) > 0 Then PBLever3bottom . BackColor = Color . White Else PBLever3bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever3Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever3Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever3Bottom ))) ' Lever 4 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever4Top ) > 0 Then PBLever4Top . BackColor = Color . White Else PBLever4Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever4Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever4Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever4Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever4Bottom ) > 0 Then PBLever4bottom . BackColor = Color . White Else PBLever4bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever4Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever4Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever4Bottom ))) ' Lever 5 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever5Top ) > 0 Then PBLever5Top . BackColor = Color . White Else PBLever5Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever5Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever5Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever5Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever5Bottom ) > 0 Then PBLever5bottom . BackColor = Color . White Else PBLever5bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever5Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever5Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever5Bottom ))) ' Lever 6 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever6Top ) > 0 Then PBLever6Top . BackColor = Color . White Else PBLever6Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever6Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever6Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever6Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever6Bottom ) > 0 Then PBLever6bottom . BackColor = Color . White Else PBLever6bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever6Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever6Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever6Bottom ))) ' Lever 7 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever7Top ) > 0 Then PBLever7Top . BackColor = Color . White Else PBLever7Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever7Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever7Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever7Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever7Bottom ) > 0 Then PBLever7bottom . BackColor = Color . White Else PBLever7bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever7Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever7Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever7Bottom ))) ' Lever 8 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever8Top ) > 0 Then PBLever8Top . BackColor = Color . White Else PBLever8Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever8Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever8Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever8Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever8Bottom ) > 0 Then PBLever8bottom . BackColor = Color . White Else PBLever8bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever8Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever8Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever8Bottom ))) ' Lever 9 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever9Top ) > 0 Then PBLever9Top . BackColor = Color . White Else PBLever9Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever9Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever9Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever9Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever9Bottom ) > 0 Then PBLever9bottom . BackColor = Color . White Else PBLever9bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever9Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever9Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever9Bottom ))) ' Lever 10 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever10Top ) > 0 Then PBLever10Top . BackColor = Color . White Else PBLever10Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever10Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever10Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever10Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever10Bottom ) > 0 Then PBLever10bottom . BackColor = Color . White Else PBLever10bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever10Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever10Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever10Bottom ))) ' Lever 11 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever11Top ) > 0 Then PBLever11Top . BackColor = Color . White Else PBLever11Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever11Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever11Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever11Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever11Bottom ) > 0 Then PBLever11bottom . BackColor = Color . White Else PBLever11bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever11Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever11Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever11Bottom ))) ' Lever 12 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever12Top ) > 0 Then PBLever12Top . BackColor = Color . White Else PBLever12Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever12Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever12Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever12Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever12Bottom ) > 0 Then PBLever12bottom . BackColor = Color . White Else PBLever12bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever12Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever12Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever12Bottom ))) ' Lever 13 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever13Top ) > 0 Then PBLever13Top . BackColor = Color . White Else PBLever13Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever13Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever13Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever13Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever13Bottom ) > 0 Then PBLever13bottom . BackColor = Color . White Else PBLever13bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever13Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever13Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever13Bottom ))) ' Lever 14 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever14Top ) > 0 Then PBLever14Top . BackColor = Color . White Else PBLever14Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever14Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever14Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever14Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever14Bottom ) > 0 Then PBLever14bottom . BackColor = Color . White Else PBLever14bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever14Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever14Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever14Bottom ))) ' Lever 15 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever15Top ) > 0 Then PBLever15Top . BackColor = Color . White Else PBLever15Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever15Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever15Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever15Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever15Bottom ) > 0 Then PBLever15bottom . BackColor = Color . White Else PBLever15bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever15Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever15Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever15Bottom ))) ' Lever 16 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever16Top ) > 0 Then PBLever16Top . BackColor = Color . White Else PBLever16Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever16Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever16Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever16Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever16Bottom ) > 0 Then PBLever16bottom . BackColor = Color . White Else PBLever16bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever16Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever16Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever16Bottom ))) ' Lever 17 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever17Top ) > 0 Then PBLever17Top . BackColor = Color . White Else PBLever17Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever17Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever17Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever17Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever17Bottom ) > 0 Then PBLever17bottom . BackColor = Color . White Else PBLever17bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever17Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever17Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever17Bottom ))) ' Lever 18 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever18Top ) > 0 Then PBLever18Top . BackColor = Color . White Else PBLever18Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever18Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever18Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever18Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever18Bottom ) > 0 Then PBLever18bottom . BackColor = Color . White Else PBLever18bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever18Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever18Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever18Bottom ))) ' Lever 19 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever19Top ) > 0 Then PBLever19Top . BackColor = Color . White Else PBLever19Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever19Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever19Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever19Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever19Bottom ) > 0 Then PBLever19bottom . BackColor = Color . White Else PBLever19bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever19Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever19Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever19Bottom ))) ' Lever 20 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever20Top ) > 0 Then PBLever20Top . BackColor = Color . White Else PBLever20Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever20Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever20Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever20Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever20Bottom ) > 0 Then PBLever20bottom . BackColor = Color . White Else PBLever20bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever20Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever20Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever20Bottom ))) ' Lever 21 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever21Top ) > 0 Then PBLever21Top . BackColor = Color . White Else PBLever21Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever21Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever21Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever21Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever21Bottom ) > 0 Then PBLever21bottom . BackColor = Color . White Else PBLever21bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever21Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever21Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever21Bottom ))) ' Lever 22 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever22Top ) > 0 Then PBLever22Top . BackColor = Color . White Else PBLever22Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever22Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever22Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever22Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever22Bottom ) > 0 Then PBLever22bottom . BackColor = Color . White Else PBLever22bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever22Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever22Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever22Bottom ))) ' Lever 23 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever23Top ) > 0 Then PBLever23Top . BackColor = Color . White Else PBLever23Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever23Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever23Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever23Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever23Bottom ) > 0 Then PBLever23bottom . BackColor = Color . White Else PBLever23bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever23Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever23Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever23Bottom ))) ' Lever 24 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever24Top ) > 0 Then PBLever24Top . BackColor = Color . White Else PBLever24Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever24Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever24Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever24Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever24Bottom ) > 0 Then PBLever24bottom . BackColor = Color . White Else PBLever24bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever24Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever24Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever24Bottom ))) End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc/IOMonitor.vb"},{"location":"mainsystem/Files/IOMonitor_8vb/#githubsignallingsystemehmr-signalling-systemmisciomonitorvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc/IOMonitor.vb"},{"location":"mainsystem/Files/IOMonitor_8vb/#source-code","text":"Public Class IOMonitor Private Sub Timer1_Tick ( sender As Object , e As EventArgs ) Handles Timer1 . Tick InputCard01 () InputCard02 () InputCard03 () InputCard04 () InputCard05 () InputCard06 () AnalogInputs () LeverDisplayStat () End Sub ' Input Card 01 Private Sub InputCard01 () ' Chip 1 CBDigInputCard01Chip01Input01 . Checked = DataReadInputsArray ( 1 ) CBDigInputCard01Chip01Input02 . Checked = DataReadInputsArray ( 2 ) CBDigInputCard01Chip01Input03 . Checked = DataReadInputsArray ( 3 ) CBDigInputCard01Chip01Input04 . Checked = DataReadInputsArray ( 4 ) CBDigInputCard01Chip01Input05 . Checked = DataReadInputsArray ( 5 ) CBDigInputCard01Chip01Input06 . Checked = DataReadInputsArray ( 6 ) CBDigInputCard01Chip01Input07 . Checked = DataReadInputsArray ( 7 ) CBDigInputCard01Chip01Input08 . Checked = DataReadInputsArray ( 8 ) ' Chip 2 CBDigInputCard01Chip02Input01 . Checked = DataReadInputsArray ( 9 ) CBDigInputCard01Chip02Input02 . Checked = DataReadInputsArray ( 10 ) CBDigInputCard01Chip02Input03 . Checked = DataReadInputsArray ( 11 ) CBDigInputCard01Chip02Input04 . Checked = DataReadInputsArray ( 12 ) CBDigInputCard01Chip02Input05 . Checked = DataReadInputsArray ( 13 ) CBDigInputCard01Chip02Input06 . Checked = DataReadInputsArray ( 14 ) CBDigInputCard01Chip02Input07 . Checked = DataReadInputsArray ( 15 ) CBDigInputCard01Chip02Input08 . Checked = DataReadInputsArray ( 16 ) ' Chip 3 CBDigInputCard01Chip03Input01 . Checked = DataReadInputsArray ( 17 ) CBDigInputCard01Chip03Input02 . Checked = DataReadInputsArray ( 18 ) CBDigInputCard01Chip03Input03 . Checked = DataReadInputsArray ( 19 ) CBDigInputCard01Chip03Input04 . Checked = DataReadInputsArray ( 20 ) CBDigInputCard01Chip03Input05 . Checked = DataReadInputsArray ( 21 ) CBDigInputCard01Chip03Input06 . Checked = DataReadInputsArray ( 22 ) CBDigInputCard01Chip03Input07 . Checked = DataReadInputsArray ( 23 ) CBDigInputCard01Chip03Input08 . Checked = DataReadInputsArray ( 24 ) ' Chip 4 CBDigInputCard01Chip04Input01 . Checked = DataReadInputsArray ( 25 ) CBDigInputCard01Chip04Input02 . Checked = DataReadInputsArray ( 26 ) CBDigInputCard01Chip04Input03 . Checked = DataReadInputsArray ( 27 ) CBDigInputCard01Chip04Input04 . Checked = DataReadInputsArray ( 28 ) CBDigInputCard01Chip04Input05 . Checked = DataReadInputsArray ( 29 ) CBDigInputCard01Chip04Input06 . Checked = DataReadInputsArray ( 30 ) CBDigInputCard01Chip04Input07 . Checked = DataReadInputsArray ( 31 ) CBDigInputCard01Chip04Input08 . Checked = DataReadInputsArray ( 32 ) End Sub ' Input Card 02 Private Sub InputCard02 () ' Chip 1 CBDigInputCard02Chip01Input01 . Checked = DataReadInputsArray ( 33 ) CBDigInputCard02Chip01Input02 . Checked = DataReadInputsArray ( 34 ) CBDigInputCard02Chip01Input03 . Checked = DataReadInputsArray ( 35 ) CBDigInputCard02Chip01Input04 . Checked = DataReadInputsArray ( 36 ) CBDigInputCard02Chip01Input05 . Checked = DataReadInputsArray ( 37 ) CBDigInputCard02Chip01Input06 . Checked = DataReadInputsArray ( 38 ) CBDigInputCard02Chip01Input07 . Checked = DataReadInputsArray ( 39 ) CBDigInputCard02Chip01Input08 . Checked = DataReadInputsArray ( 40 ) ' Chip 2 CBDigInputCard02Chip02Input01 . Checked = DataReadInputsArray ( 41 ) CBDigInputCard02Chip02Input02 . Checked = DataReadInputsArray ( 42 ) CBDigInputCard02Chip02Input03 . Checked = DataReadInputsArray ( 43 ) CBDigInputCard02Chip02Input04 . Checked = DataReadInputsArray ( 44 ) CBDigInputCard02Chip02Input05 . Checked = DataReadInputsArray ( 45 ) CBDigInputCard02Chip02Input06 . Checked = DataReadInputsArray ( 46 ) CBDigInputCard02Chip02Input07 . Checked = DataReadInputsArray ( 47 ) CBDigInputCard02Chip02Input08 . Checked = DataReadInputsArray ( 48 ) ' Chip 3 CBDigInputCard02Chip03Input01 . Checked = DataReadInputsArray ( 49 ) CBDigInputCard02Chip03Input02 . Checked = DataReadInputsArray ( 50 ) CBDigInputCard02Chip03Input03 . Checked = DataReadInputsArray ( 51 ) CBDigInputCard02Chip03Input04 . Checked = DataReadInputsArray ( 52 ) CBDigInputCard02Chip03Input05 . Checked = DataReadInputsArray ( 53 ) CBDigInputCard02Chip03Input06 . Checked = DataReadInputsArray ( 54 ) CBDigInputCard02Chip03Input07 . Checked = DataReadInputsArray ( 55 ) CBDigInputCard02Chip03Input08 . Checked = DataReadInputsArray ( 56 ) ' Chip 4 CBDigInputCard02Chip04Input01 . Checked = DataReadInputsArray ( 57 ) CBDigInputCard02Chip04Input02 . Checked = DataReadInputsArray ( 58 ) CBDigInputCard02Chip04Input03 . Checked = DataReadInputsArray ( 59 ) CBDigInputCard02Chip04Input04 . Checked = DataReadInputsArray ( 60 ) CBDigInputCard02Chip04Input05 . Checked = DataReadInputsArray ( 61 ) CBDigInputCard02Chip04Input06 . Checked = DataReadInputsArray ( 62 ) CBDigInputCard02Chip04Input07 . Checked = DataReadInputsArray ( 63 ) CBDigInputCard02Chip04Input08 . Checked = DataReadInputsArray ( 64 ) End Sub ' Input Card 03 Private Sub InputCard03 () ' Chip 1 CBDigInputCard03Chip01Input01 . Checked = DataReadInputsArray ( 65 ) CBDigInputCard03Chip01Input02 . Checked = DataReadInputsArray ( 66 ) CBDigInputCard03Chip01Input03 . Checked = DataReadInputsArray ( 67 ) CBDigInputCard03Chip01Input04 . Checked = DataReadInputsArray ( 68 ) CBDigInputCard03Chip01Input05 . Checked = DataReadInputsArray ( 69 ) CBDigInputCard03Chip01Input06 . Checked = DataReadInputsArray ( 70 ) CBDigInputCard03Chip01Input07 . Checked = DataReadInputsArray ( 71 ) CBDigInputCard03Chip01Input08 . Checked = DataReadInputsArray ( 72 ) ' Chip 2 CBDigInputCard03Chip02Input01 . Checked = DataReadInputsArray ( 73 ) CBDigInputCard03Chip02Input02 . Checked = DataReadInputsArray ( 74 ) CBDigInputCard03Chip02Input03 . Checked = DataReadInputsArray ( 75 ) CBDigInputCard03Chip02Input04 . Checked = DataReadInputsArray ( 76 ) CBDigInputCard03Chip02Input05 . Checked = DataReadInputsArray ( 77 ) CBDigInputCard03Chip02Input06 . Checked = DataReadInputsArray ( 78 ) CBDigInputCard03Chip02Input07 . Checked = DataReadInputsArray ( 79 ) CBDigInputCard03Chip02Input08 . Checked = DataReadInputsArray ( 80 ) ' Chip 3 CBDigInputCard03Chip03Input01 . Checked = DataReadInputsArray ( 81 ) CBDigInputCard03Chip03Input02 . Checked = DataReadInputsArray ( 82 ) CBDigInputCard03Chip03Input03 . Checked = DataReadInputsArray ( 83 ) CBDigInputCard03Chip03Input04 . Checked = DataReadInputsArray ( 84 ) CBDigInputCard03Chip03Input05 . Checked = DataReadInputsArray ( 85 ) CBDigInputCard03Chip03Input06 . Checked = DataReadInputsArray ( 86 ) CBDigInputCard03Chip03Input07 . Checked = DataReadInputsArray ( 87 ) CBDigInputCard03Chip03Input08 . Checked = DataReadInputsArray ( 88 ) ' Chip 4 CBDigInputCard03Chip04Input01 . Checked = DataReadInputsArray ( 89 ) CBDigInputCard03Chip04Input02 . Checked = DataReadInputsArray ( 90 ) CBDigInputCard03Chip04Input03 . Checked = DataReadInputsArray ( 91 ) CBDigInputCard03Chip04Input04 . Checked = DataReadInputsArray ( 92 ) CBDigInputCard03Chip04Input05 . Checked = DataReadInputsArray ( 93 ) CBDigInputCard03Chip04Input06 . Checked = DataReadInputsArray ( 94 ) CBDigInputCard03Chip04Input07 . Checked = DataReadInputsArray ( 95 ) CBDigInputCard03Chip04Input08 . Checked = DataReadInputsArray ( 96 ) End Sub ' Input Card 04 Private Sub InputCard04 () ' Chip 1 CBDigInputCard04Chip01Input01 . Checked = DataReadInputsArray ( 97 ) CBDigInputCard04Chip01Input02 . Checked = DataReadInputsArray ( 98 ) CBDigInputCard04Chip01Input03 . Checked = DataReadInputsArray ( 99 ) CBDigInputCard04Chip01Input04 . Checked = DataReadInputsArray ( 100 ) CBDigInputCard04Chip01Input05 . Checked = DataReadInputsArray ( 101 ) CBDigInputCard04Chip01Input06 . Checked = DataReadInputsArray ( 102 ) CBDigInputCard04Chip01Input07 . Checked = DataReadInputsArray ( 103 ) CBDigInputCard04Chip01Input08 . Checked = DataReadInputsArray ( 104 ) ' Chip 2 CBDigInputCard04Chip02Input01 . Checked = DataReadInputsArray ( 105 ) CBDigInputCard04Chip02Input02 . Checked = DataReadInputsArray ( 106 ) CBDigInputCard04Chip02Input03 . Checked = DataReadInputsArray ( 107 ) CBDigInputCard04Chip02Input04 . Checked = DataReadInputsArray ( 108 ) CBDigInputCard04Chip02Input05 . Checked = DataReadInputsArray ( 109 ) CBDigInputCard04Chip02Input06 . Checked = DataReadInputsArray ( 110 ) CBDigInputCard04Chip02Input07 . Checked = DataReadInputsArray ( 111 ) CBDigInputCard04Chip02Input08 . Checked = DataReadInputsArray ( 112 ) ' Chip 3 CBDigInputCard04Chip03Input01 . Checked = DataReadInputsArray ( 113 ) CBDigInputCard04Chip03Input02 . Checked = DataReadInputsArray ( 114 ) CBDigInputCard04Chip03Input03 . Checked = DataReadInputsArray ( 115 ) CBDigInputCard04Chip03Input04 . Checked = DataReadInputsArray ( 116 ) CBDigInputCard04Chip03Input05 . Checked = DataReadInputsArray ( 117 ) CBDigInputCard04Chip03Input06 . Checked = DataReadInputsArray ( 118 ) CBDigInputCard04Chip03Input07 . Checked = DataReadInputsArray ( 119 ) CBDigInputCard04Chip03Input08 . Checked = DataReadInputsArray ( 120 ) ' Chip 4 CBDigInputCard04Chip04Input01 . Checked = DataReadInputsArray ( 121 ) CBDigInputCard04Chip04Input02 . Checked = DataReadInputsArray ( 122 ) CBDigInputCard04Chip04Input03 . Checked = DataReadInputsArray ( 123 ) CBDigInputCard04Chip04Input04 . Checked = DataReadInputsArray ( 124 ) CBDigInputCard04Chip04Input05 . Checked = DataReadInputsArray ( 125 ) CBDigInputCard04Chip04Input06 . Checked = DataReadInputsArray ( 126 ) CBDigInputCard04Chip04Input07 . Checked = DataReadInputsArray ( 127 ) CBDigInputCard04Chip04Input08 . Checked = DataReadInputsArray ( 128 ) End Sub ' Input Card 05 Private Sub InputCard05 () ' Chip 1 CBDigInputCard05Chip01Input01 . Checked = DataReadInputsArray ( 129 ) CBDigInputCard05Chip01Input02 . Checked = DataReadInputsArray ( 130 ) CBDigInputCard05Chip01Input03 . Checked = DataReadInputsArray ( 131 ) CBDigInputCard05Chip01Input04 . Checked = DataReadInputsArray ( 132 ) CBDigInputCard05Chip01Input05 . Checked = DataReadInputsArray ( 133 ) CBDigInputCard05Chip01Input06 . Checked = DataReadInputsArray ( 134 ) CBDigInputCard05Chip01Input07 . Checked = DataReadInputsArray ( 135 ) CBDigInputCard05Chip01Input08 . Checked = DataReadInputsArray ( 136 ) ' Chip 2 CBDigInputCard05Chip02Input01 . Checked = DataReadInputsArray ( 137 ) CBDigInputCard05Chip02Input02 . Checked = DataReadInputsArray ( 138 ) CBDigInputCard05Chip02Input03 . Checked = DataReadInputsArray ( 139 ) CBDigInputCard05Chip02Input04 . Checked = DataReadInputsArray ( 140 ) CBDigInputCard05Chip02Input05 . Checked = DataReadInputsArray ( 141 ) CBDigInputCard05Chip02Input06 . Checked = DataReadInputsArray ( 142 ) CBDigInputCard05Chip02Input07 . Checked = DataReadInputsArray ( 143 ) CBDigInputCard05Chip02Input08 . Checked = DataReadInputsArray ( 144 ) ' Chip 3 CBDigInputCard05Chip03Input01 . Checked = DataReadInputsArray ( 145 ) CBDigInputCard05Chip03Input02 . Checked = DataReadInputsArray ( 146 ) CBDigInputCard05Chip03Input03 . Checked = DataReadInputsArray ( 147 ) CBDigInputCard05Chip03Input04 . Checked = DataReadInputsArray ( 148 ) CBDigInputCard05Chip03Input05 . Checked = DataReadInputsArray ( 149 ) CBDigInputCard05Chip03Input06 . Checked = DataReadInputsArray ( 150 ) CBDigInputCard05Chip03Input07 . Checked = DataReadInputsArray ( 151 ) CBDigInputCard05Chip03Input08 . Checked = DataReadInputsArray ( 152 ) ' Chip 4 CBDigInputCard05Chip04Input01 . Checked = DataReadInputsArray ( 153 ) CBDigInputCard05Chip04Input02 . Checked = DataReadInputsArray ( 154 ) CBDigInputCard05Chip04Input03 . Checked = DataReadInputsArray ( 155 ) CBDigInputCard05Chip04Input04 . Checked = DataReadInputsArray ( 156 ) CBDigInputCard05Chip04Input05 . Checked = DataReadInputsArray ( 157 ) CBDigInputCard05Chip04Input06 . Checked = DataReadInputsArray ( 158 ) CBDigInputCard05Chip04Input07 . Checked = DataReadInputsArray ( 159 ) CBDigInputCard05Chip04Input08 . Checked = DataReadInputsArray ( 160 ) End Sub ' Input Card 06 Private Sub InputCard06 () ' Chip 1 CBDigInputCard06Chip01Input01 . Checked = DataReadInputsArray ( 161 ) CBDigInputCard06Chip01Input02 . Checked = DataReadInputsArray ( 162 ) CBDigInputCard06Chip01Input03 . Checked = DataReadInputsArray ( 163 ) CBDigInputCard06Chip01Input04 . Checked = DataReadInputsArray ( 164 ) CBDigInputCard06Chip01Input05 . Checked = DataReadInputsArray ( 165 ) CBDigInputCard06Chip01Input06 . Checked = DataReadInputsArray ( 166 ) CBDigInputCard06Chip01Input07 . Checked = DataReadInputsArray ( 167 ) CBDigInputCard06Chip01Input08 . Checked = DataReadInputsArray ( 168 ) ' Chip 2 CBDigInputCard06Chip02Input01 . Checked = DataReadInputsArray ( 169 ) CBDigInputCard06Chip02Input02 . Checked = DataReadInputsArray ( 170 ) CBDigInputCard06Chip02Input03 . Checked = DataReadInputsArray ( 171 ) CBDigInputCard06Chip02Input04 . Checked = DataReadInputsArray ( 172 ) CBDigInputCard06Chip02Input05 . Checked = DataReadInputsArray ( 173 ) CBDigInputCard06Chip02Input06 . Checked = DataReadInputsArray ( 174 ) CBDigInputCard06Chip02Input07 . Checked = DataReadInputsArray ( 175 ) CBDigInputCard06Chip02Input08 . Checked = DataReadInputsArray ( 176 ) ' Chip 3 CBDigInputCard06Chip03Input01 . Checked = DataReadInputsArray ( 177 ) CBDigInputCard06Chip03Input02 . Checked = DataReadInputsArray ( 178 ) CBDigInputCard06Chip03Input03 . Checked = DataReadInputsArray ( 179 ) CBDigInputCard06Chip03Input04 . Checked = DataReadInputsArray ( 180 ) CBDigInputCard06Chip03Input05 . Checked = DataReadInputsArray ( 181 ) CBDigInputCard06Chip03Input06 . Checked = DataReadInputsArray ( 182 ) CBDigInputCard06Chip03Input07 . Checked = DataReadInputsArray ( 183 ) CBDigInputCard06Chip03Input08 . Checked = DataReadInputsArray ( 184 ) ' Chip 4 CBDigInputCard06Chip04Input01 . Checked = DataReadInputsArray ( 185 ) CBDigInputCard06Chip04Input02 . Checked = DataReadInputsArray ( 186 ) CBDigInputCard06Chip04Input03 . Checked = DataReadInputsArray ( 187 ) CBDigInputCard06Chip04Input04 . Checked = DataReadInputsArray ( 188 ) CBDigInputCard06Chip04Input05 . Checked = DataReadInputsArray ( 189 ) CBDigInputCard06Chip04Input06 . Checked = DataReadInputsArray ( 190 ) CBDigInputCard06Chip04Input07 . Checked = DataReadInputsArray ( 191 ) CBDigInputCard06Chip04Input08 . Checked = DataReadInputsArray ( 192 ) End Sub ' Analog Inputs Private Sub AnalogInputs () AnalogValue1 . Text = ( \"Input 01 - Section 'A' : \" & AnalogIOManager . ActualAnalogValue ( 1 ). ToString & \"V\" ) AnalogValue2 . Text = ( \"Input 02 - Section 'B' : \" & AnalogIOManager . ActualAnalogValue ( 2 ). ToString & \"V\" ) AnalogValue3 . Text = ( \"Input 03 - Section 'C' : \" & AnalogIOManager . ActualAnalogValue ( 3 ). ToString & \"V\" ) AnalogValue4 . Text = ( \"Input 04 - Section 'D' : \" & AnalogIOManager . ActualAnalogValue ( 4 ). ToString & \"V\" ) AnalogValue5 . Text = ( \"Input 05 - Section 'E' : \" & AnalogIOManager . ActualAnalogValue ( 5 ). ToString & \"V\" ) AnalogValue6 . Text = ( \"Input 06 - Section 'F' : \" & AnalogIOManager . ActualAnalogValue ( 6 ). ToString & \"V\" ) AnalogValue7 . Text = ( \"Input 07 - Section 'G' : \" & AnalogIOManager . ActualAnalogValue ( 7 ). ToString & \"V\" ) AnalogValue8 . Text = ( \"Input 08 - Section 'H' : \" & AnalogIOManager . ActualAnalogValue ( 8 ). ToString & \"V\" ) AnalogValue9 . Text = ( \"Input 09 - Section 'I' : \" & AnalogIOManager . ActualAnalogValue ( 9 ). ToString & \"V\" ) AnalogValue10 . Text = ( \"Input 10 - Section 'J' : \" & AnalogIOManager . ActualAnalogValue ( 10 ). ToString & \"V\" ) AnalogValue11 . Text = ( \"Input 11 - Section 'K' : \" & AnalogIOManager . ActualAnalogValue ( 11 ). ToString & \"V\" ) AnalogValue12 . Text = ( \"Input 12 - Section 'L' : \" & AnalogIOManager . ActualAnalogValue ( 12 ). ToString & \"V\" ) AnalogValue13 . Text = ( \"Input 13 - Section 'M' : \" & AnalogIOManager . ActualAnalogValue ( 13 ). ToString & \"V\" ) AnalogValue14 . Text = ( \"Input 14 - Section 'N' : \" & AnalogIOManager . ActualAnalogValue ( 14 ). ToString & \"V\" ) AnalogValue15 . Text = ( \"Input 15 - Section 'O' : \" & AnalogIOManager . ActualAnalogValue ( 15 ). ToString & \"V\" ) AnalogValue16 . Text = ( \"Input 16 - Section 'P' : \" & AnalogIOManager . ActualAnalogValue ( 16 ). ToString & \"V\" ) AnalogValue17 . Text = ( \"Input 17 - Section 'Q' : \" & AnalogIOManager . ActualAnalogValue ( 17 ). ToString & \"V\" ) AnalogValue18 . Text = ( \"Input 18 - Section 'DE' : \" & AnalogIOManager . ActualAnalogValue ( 18 ). ToString & \"V\" ) AnalogValue19 . Text = ( \"Input 19 - Section 'NO' : \" & AnalogIOManager . ActualAnalogValue ( 19 ). ToString & \"V\" ) AnalogValue20 . Text = ( \"Input 20 - Section 'OP' : \" & AnalogIOManager . ActualAnalogValue ( 20 ). ToString & \"V\" ) AnalogValue21 . Text = ( \"Input 21 - Section 'Q10' : \" & AnalogIOManager . ActualAnalogValue ( 21 ). ToString & \"V\" ) AnalogValue22 . Text = ( \"Input 22 - Section 'A11' : \" & AnalogIOManager . ActualAnalogValue ( 22 ). ToString & \"V\" ) AnalogValue23 . Text = ( \"Input 23 - Section 'F12' : \" & AnalogIOManager . ActualAnalogValue ( 23 ). ToString & \"V\" ) AnalogValue24 . Text = ( \"Input 24 - Section 'F13' : \" & AnalogIOManager . ActualAnalogValue ( 24 ). ToString & \"V\" ) AnalogValue25 . Text = ( \"Input 25 - Section 'NO14' : \" & AnalogIOManager . ActualAnalogValue ( 25 ). ToString & \"V\" ) AnalogValue26 . Text = ( \"Input 26 - Section 'C19' : \" & AnalogIOManager . ActualAnalogValue ( 26 ). ToString & \"V\" ) AnalogValue27 . Text = ( \"Input 27 - Section 'CD' : \" & AnalogIOManager . ActualAnalogValue ( 27 ). ToString & \"V\" ) AnalogValue28 . Text = ( \"Input 28 - Section 'R' : \" & AnalogIOManager . ActualAnalogValue ( 28 ). ToString & \"V\" ) AnalogValue29 . Text = ( \"Input 29 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 29 ). ToString & \"V\" ) AnalogValue30 . Text = ( \"Input 30 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 30 ). ToString & \"V\" ) AnalogValue31 . Text = ( \"Input 31 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 31 ). ToString & \"V\" ) AnalogValue32 . Text = ( \"Input 32 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 32 ). ToString & \"V\" ) AnalogValue33 . Text = ( \"Input 33 - P5a Normal : \" & AnalogIOManager . ActualAnalogValue ( 33 ). ToString & \"V\" ) AnalogValue34 . Text = ( \"Input 34 - P5a Reverse : \" & AnalogIOManager . ActualAnalogValue ( 34 ). ToString & \"V\" ) AnalogValue35 . Text = ( \"Input 35 - P5b Normal : \" & AnalogIOManager . ActualAnalogValue ( 35 ). ToString & \"V\" ) AnalogValue36 . Text = ( \"Input 36 - P5b Reverse : \" & AnalogIOManager . ActualAnalogValue ( 36 ). ToString & \"V\" ) AnalogValue37 . Text = ( \"Input 37 - P6a Normal : \" & AnalogIOManager . ActualAnalogValue ( 37 ). ToString & \"V\" ) AnalogValue38 . Text = ( \"Input 38 - P6a Reverse : \" & AnalogIOManager . ActualAnalogValue ( 38 ). ToString & \"V\" ) AnalogValue39 . Text = ( \"Input 39 - P6b Normal : \" & AnalogIOManager . ActualAnalogValue ( 39 ). ToString & \"V\" ) AnalogValue40 . Text = ( \"Input 40 - P6b Reverse : \" & AnalogIOManager . ActualAnalogValue ( 40 ). ToString & \"V\" ) AnalogValue41 . Text = ( \"Input 41 - P10 Normal : \" & AnalogIOManager . ActualAnalogValue ( 41 ). ToString & \"V\" ) AnalogValue42 . Text = ( \"Input 42 - P10 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 42 ). ToString & \"V\" ) AnalogValue43 . Text = ( \"Input 43 - P11 Normal : \" & AnalogIOManager . ActualAnalogValue ( 43 ). ToString & \"V\" ) AnalogValue44 . Text = ( \"Input 44 - P11 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 44 ). ToString & \"V\" ) AnalogValue45 . Text = ( \"Input 45 - P12 Normal : \" & AnalogIOManager . ActualAnalogValue ( 45 ). ToString & \"V\" ) AnalogValue46 . Text = ( \"Input 46 - P12 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 46 ). ToString & \"V\" ) AnalogValue47 . Text = ( \"Input 47 - P13 Normal : \" & AnalogIOManager . ActualAnalogValue ( 47 ). ToString & \"V\" ) AnalogValue48 . Text = ( \"Input 48 - P13 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 48 ). ToString & \"V\" ) AnalogValue49 . Text = ( \"Input 49 - P14 Normal : \" & AnalogIOManager . ActualAnalogValue ( 49 ). ToString & \"V\" ) AnalogValue50 . Text = ( \"Input 50 - P14 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 50 ). ToString & \"V\" ) AnalogValue51 . Text = ( \"Input 51 - P19 Normal : \" & AnalogIOManager . ActualAnalogValue ( 51 ). ToString & \"V\" ) AnalogValue52 . Text = ( \"Input 52 - P19 Reverse : \" & AnalogIOManager . ActualAnalogValue ( 52 ). ToString & \"V\" ) AnalogValue53 . Text = ( \"Input 53 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 53 ). ToString & \"V\" ) AnalogValue54 . Text = ( \"Input 54 - Not Used' : \" & AnalogIOManager . ActualAnalogValue ( 54 ). ToString & \"V\" ) AnalogValue55 . Text = ( \"Input 55 - Section 'P5a' : \" & AnalogIOManager . ActualAnalogValue ( 55 ). ToString & \"V\" ) AnalogValue56 . Text = ( \"Input 56 - Section 'P5b' : \" & AnalogIOManager . ActualAnalogValue ( 56 ). ToString & \"V\" ) AnalogValue57 . Text = ( \"Input 57 - Section 'P6a' : \" & AnalogIOManager . ActualAnalogValue ( 57 ). ToString & \"V\" ) AnalogValue58 . Text = ( \"Input 58 - Section 'P6b' : \" & AnalogIOManager . ActualAnalogValue ( 58 ). ToString & \"V\" ) AnalogValue59 . Text = ( \"Input 59 - Section 'P10' : \" & AnalogIOManager . ActualAnalogValue ( 59 ). ToString & \"V\" ) AnalogValue60 . Text = ( \"Input 60 - Section 'P11' : \" & AnalogIOManager . ActualAnalogValue ( 60 ). ToString & \"V\" ) AnalogValue61 . Text = ( \"Input 61 - Section 'P12' : \" & AnalogIOManager . ActualAnalogValue ( 61 ). ToString & \"V\" ) AnalogValue62 . Text = ( \"Input 62 - Section 'P13' : \" & AnalogIOManager . ActualAnalogValue ( 62 ). ToString & \"V\" ) AnalogValue63 . Text = ( \"Input 63 - Section 'P14' : \" & AnalogIOManager . ActualAnalogValue ( 63 ). ToString & \"V\" ) AnalogValue64 . Text = ( \"Input 64 - Section 'P19' : \" & AnalogIOManager . ActualAnalogValue ( 64 ). ToString & \"V\" ) End Sub ' Lever Display Private Sub LeverDisplayStat () ' Lever 1 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever1Top ) > 0 Then PBLever1Top . BackColor = Color . White Else PBLever1Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever1Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever1Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever1Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever1Bottom ) > 0 Then PBLever1bottom . BackColor = Color . White Else PBLever1bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever1Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever1Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever1Bottom ))) ' Lever 2 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever2Top ) > 0 Then PBLever2Top . BackColor = Color . White Else PBLever2Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever2Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever2Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever2Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever2Bottom ) > 0 Then PBLever2bottom . BackColor = Color . White Else PBLever2bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever2Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever2Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever2Bottom ))) ' Lever 3 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever3Top ) > 0 Then PBLever3Top . BackColor = Color . White Else PBLever3Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever3Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever3Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever3Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever3Bottom ) > 0 Then PBLever3bottom . BackColor = Color . White Else PBLever3bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever3Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever3Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever3Bottom ))) ' Lever 4 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever4Top ) > 0 Then PBLever4Top . BackColor = Color . White Else PBLever4Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever4Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever4Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever4Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever4Bottom ) > 0 Then PBLever4bottom . BackColor = Color . White Else PBLever4bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever4Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever4Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever4Bottom ))) ' Lever 5 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever5Top ) > 0 Then PBLever5Top . BackColor = Color . White Else PBLever5Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever5Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever5Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever5Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever5Bottom ) > 0 Then PBLever5bottom . BackColor = Color . White Else PBLever5bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever5Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever5Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever5Bottom ))) ' Lever 6 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever6Top ) > 0 Then PBLever6Top . BackColor = Color . White Else PBLever6Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever6Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever6Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever6Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever6Bottom ) > 0 Then PBLever6bottom . BackColor = Color . White Else PBLever6bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever6Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever6Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever6Bottom ))) ' Lever 7 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever7Top ) > 0 Then PBLever7Top . BackColor = Color . White Else PBLever7Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever7Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever7Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever7Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever7Bottom ) > 0 Then PBLever7bottom . BackColor = Color . White Else PBLever7bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever7Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever7Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever7Bottom ))) ' Lever 8 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever8Top ) > 0 Then PBLever8Top . BackColor = Color . White Else PBLever8Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever8Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever8Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever8Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever8Bottom ) > 0 Then PBLever8bottom . BackColor = Color . White Else PBLever8bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever8Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever8Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever8Bottom ))) ' Lever 9 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever9Top ) > 0 Then PBLever9Top . BackColor = Color . White Else PBLever9Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever9Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever9Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever9Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever9Bottom ) > 0 Then PBLever9bottom . BackColor = Color . White Else PBLever9bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever9Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever9Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever9Bottom ))) ' Lever 10 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever10Top ) > 0 Then PBLever10Top . BackColor = Color . White Else PBLever10Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever10Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever10Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever10Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever10Bottom ) > 0 Then PBLever10bottom . BackColor = Color . White Else PBLever10bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever10Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever10Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever10Bottom ))) ' Lever 11 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever11Top ) > 0 Then PBLever11Top . BackColor = Color . White Else PBLever11Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever11Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever11Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever11Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever11Bottom ) > 0 Then PBLever11bottom . BackColor = Color . White Else PBLever11bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever11Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever11Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever11Bottom ))) ' Lever 12 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever12Top ) > 0 Then PBLever12Top . BackColor = Color . White Else PBLever12Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever12Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever12Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever12Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever12Bottom ) > 0 Then PBLever12bottom . BackColor = Color . White Else PBLever12bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever12Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever12Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever12Bottom ))) ' Lever 13 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever13Top ) > 0 Then PBLever13Top . BackColor = Color . White Else PBLever13Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever13Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever13Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever13Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever13Bottom ) > 0 Then PBLever13bottom . BackColor = Color . White Else PBLever13bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever13Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever13Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever13Bottom ))) ' Lever 14 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever14Top ) > 0 Then PBLever14Top . BackColor = Color . White Else PBLever14Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever14Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever14Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever14Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever14Bottom ) > 0 Then PBLever14bottom . BackColor = Color . White Else PBLever14bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever14Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever14Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever14Bottom ))) ' Lever 15 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever15Top ) > 0 Then PBLever15Top . BackColor = Color . White Else PBLever15Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever15Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever15Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever15Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever15Bottom ) > 0 Then PBLever15bottom . BackColor = Color . White Else PBLever15bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever15Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever15Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever15Bottom ))) ' Lever 16 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever16Top ) > 0 Then PBLever16Top . BackColor = Color . White Else PBLever16Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever16Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever16Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever16Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever16Bottom ) > 0 Then PBLever16bottom . BackColor = Color . White Else PBLever16bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever16Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever16Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever16Bottom ))) ' Lever 17 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever17Top ) > 0 Then PBLever17Top . BackColor = Color . White Else PBLever17Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever17Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever17Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever17Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever17Bottom ) > 0 Then PBLever17bottom . BackColor = Color . White Else PBLever17bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever17Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever17Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever17Bottom ))) ' Lever 18 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever18Top ) > 0 Then PBLever18Top . BackColor = Color . White Else PBLever18Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever18Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever18Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever18Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever18Bottom ) > 0 Then PBLever18bottom . BackColor = Color . White Else PBLever18bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever18Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever18Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever18Bottom ))) ' Lever 19 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever19Top ) > 0 Then PBLever19Top . BackColor = Color . White Else PBLever19Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever19Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever19Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever19Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever19Bottom ) > 0 Then PBLever19bottom . BackColor = Color . White Else PBLever19bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever19Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever19Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever19Bottom ))) ' Lever 20 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever20Top ) > 0 Then PBLever20Top . BackColor = Color . White Else PBLever20Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever20Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever20Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever20Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever20Bottom ) > 0 Then PBLever20bottom . BackColor = Color . White Else PBLever20bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever20Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever20Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever20Bottom ))) ' Lever 21 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever21Top ) > 0 Then PBLever21Top . BackColor = Color . White Else PBLever21Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever21Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever21Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever21Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever21Bottom ) > 0 Then PBLever21bottom . BackColor = Color . White Else PBLever21bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever21Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever21Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever21Bottom ))) ' Lever 22 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever22Top ) > 0 Then PBLever22Top . BackColor = Color . White Else PBLever22Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever22Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever22Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever22Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever22Bottom ) > 0 Then PBLever22bottom . BackColor = Color . White Else PBLever22bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever22Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever22Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever22Bottom ))) ' Lever 23 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever23Top ) > 0 Then PBLever23Top . BackColor = Color . White Else PBLever23Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever23Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever23Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever23Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever23Bottom ) > 0 Then PBLever23bottom . BackColor = Color . White Else PBLever23bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever23Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever23Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever23Bottom ))) ' Lever 24 If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever24Top ) > 0 Then PBLever24Top . BackColor = Color . White Else PBLever24Top . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever24Top ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever24Top ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever24Top ))) If SerialPixelLeds . pixelWhite ( Definitions . LeverIndicatorNames . Lever24Bottom ) > 0 Then PBLever24bottom . BackColor = Color . White Else PBLever24bottom . BackColor = ColorTranslator . FromOle ( RGB ( SerialPixelLeds . pixelRed ( Definitions . LeverIndicatorNames . Lever24Bottom ), SerialPixelLeds . pixelGreen ( Definitions . LeverIndicatorNames . Lever24Bottom ), SerialPixelLeds . pixelBlue ( Definitions . LeverIndicatorNames . Lever24Bottom ))) End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Initializations_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/Initializations.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Module Initializations ReadOnly Occupied As Boolean = False ReadOnly Clear As Boolean = True Public AJ1Initiated As Boolean = False Public AJ2Initiated As Boolean = False Public AJ3Initiated As Boolean = False Public AJ4Initiated As Boolean = False Public AJ7Initiated As Boolean = False Public AJ8Initiated As Boolean = False Public AJ9Initiated As Boolean = False Public AJ15Initiated As Boolean = False Public AJ16Initiated As Boolean = False Public AJ17Initiated As Boolean = False Public AJ18Initiated As Boolean = False Public AJ21Initiated As Boolean = False Public AJ22Initiated As Boolean = False Public S11Initiated As Boolean = False Public S12Initiated As Boolean = False Public S14Initiated As Boolean = False Public S19Initiated As Boolean = False Public Point5Initiated As Boolean = False Public Point6Initiated As Boolean = False Public Point10Initiated As Boolean = False Public Point11Initiated As Boolean = False Public Point12Initiated As Boolean = False Public Point13Initiated As Boolean = False Public Point14Initiated As Boolean = False Public Point19Initiated As Boolean = False Public SPADInitiated As Boolean = False Public ModeManualInititated As Boolean = False Public ModeComputerInitiated As Boolean = False Public SoundInitiated As Boolean = False Public ButtonsInitiated As Boolean = False Public SoundInitiatedTimer As Integer = InitilizationStart Public ButtonsInitiatedTimer As Integer = InitilizationStart Public AJ1InitiatedTimer As Integer = InitilizationStart Public AJ2InitiatedTimer As Integer = InitilizationStart Public AJ3InitiatedTimer As Integer = InitilizationStart Public AJ4InitiatedTimer As Integer = InitilizationStart Public AJ7InitiatedTimer As Integer = InitilizationStart Public AJ8InitiatedTimer As Integer = InitilizationStart Public AJ9InitiatedTimer As Integer = InitilizationStart Public AJ15InitiatedTimer As Integer = InitilizationStart Public AJ16InitiatedTimer As Integer = InitilizationStart Public AJ17InitiatedTimer As Integer = InitilizationStart Public AJ18InitiatedTimer As Integer = InitilizationStart Public AJ21InitiatedTimer As Integer = InitilizationStart Public AJ22InitiatedTimer As Integer = InitilizationStart Public S11InitiatedTimer As Integer = InitilizationStart Public S12InitiatedTimer As Integer = InitilizationStart Public S14InitiatedTimer As Integer = InitilizationStart Public S19InitiatedTimer As Integer = InitilizationStart Public Point5InitiatedTimer As Integer = InitilizationStart Public Point6InitiatedTimer As Integer = InitilizationStart Public Point10InitiatedTimer As Integer = InitilizationStart Public Point11InitiatedTimer As Integer = InitilizationStart Public Point12InitiatedTimer As Integer = InitilizationStart Public Point13InitiatedTimer As Integer = InitilizationStart Public Point14InitiatedTimer As Integer = InitilizationStart Public Point19InitiatedTimer As Integer = InitilizationStart Public SPADInitiatedTimer As Integer = InitilizationStart ' Reinitiate all Public Sub ResetInitiate () ' Inititation SoundInitiatedTimer = InitilizationStart ButtonsInitiatedTimer = InitilizationStart AJ1InitiatedTimer = InitilizationStart AJ2InitiatedTimer = InitilizationStart AJ3InitiatedTimer = InitilizationStart AJ4InitiatedTimer = InitilizationStart AJ7InitiatedTimer = InitilizationStart AJ8InitiatedTimer = InitilizationStart AJ9InitiatedTimer = InitilizationStart AJ15InitiatedTimer = InitilizationStart AJ16InitiatedTimer = InitilizationStart AJ17InitiatedTimer = InitilizationStart AJ18InitiatedTimer = InitilizationStart AJ21InitiatedTimer = InitilizationStart AJ22InitiatedTimer = InitilizationStart S11InitiatedTimer = InitilizationStart S12InitiatedTimer = InitilizationStart S14InitiatedTimer = InitilizationStart S19InitiatedTimer = InitilizationStart Point5InitiatedTimer = InitilizationStart Point6InitiatedTimer = InitilizationStart Point10InitiatedTimer = InitilizationStart Point11InitiatedTimer = InitilizationStart Point12InitiatedTimer = InitilizationStart Point13InitiatedTimer = InitilizationStart Point14InitiatedTimer = InitilizationStart Point19InitiatedTimer = InitilizationStart SPADInitiatedTimer = InitilizationStart SoundInitiated = False ButtonsInitiated = False AJ1Initiated = False AJ2Initiated = False AJ3Initiated = False AJ4Initiated = False AJ7Initiated = False AJ8Initiated = False AJ9Initiated = False AJ15Initiated = False AJ16Initiated = False AJ17Initiated = False AJ18Initiated = False AJ21Initiated = False AJ22Initiated = False S11Initiated = False S12Initiated = False S14Initiated = False S19Initiated = False Point5Initiated = False Point6Initiated = False Point10Initiated = False Point11Initiated = False Point12Initiated = False Point13Initiated = False Point14Initiated = False Point19Initiated = False SPADInitiated = False ' AJ1E Routes LogicStart . AJ1EInnerRequest = False LogicStart . AJ1EInner = False LogicStart . AJ1EOuterRequest = False LogicStart . AJ1EOuter = False LogicStart . AJ1EHeadShuntRequest = False LogicStart . AJ1EHeadShunt = False LogicStart . AJ1EExtentionRequest = False LogicStart . AJ1EExtention = False LogicStart . AJ1EEngineShedRequest = False LogicStart . AJ1EEngineShed = False LogicStart . AJ1EFoxHoleRequest = False LogicStart . AJ1EFoxHole = False ' AJ2E Routes LogicStart . AJ2EInnerRequest = False LogicStart . AJ2EInner = False LogicStart . AJ2EOuterRequest = False LogicStart . AJ2EOuter = False LogicStart . AJ2EExtentionRequest = False LogicStart . AJ2EExtention = False LogicStart . AJ2EEngineShedRequest = False LogicStart . AJ2EEngineShed = False LogicStart . AJ2EFoxHoleRequest = False LogicStart . AJ2EFoxHole = False ' AJ3E Routes LogicStart . AJ3EOuterRequest = False LogicStart . AJ3EOuter = False ' AJ4E Routes LogicStart . AJ4EPlatform1Request = False LogicStart . AJ4EPlatform1 = False LogicStart . AJ4EPlatform2Request = False LogicStart . AJ4EPlatform2 = False ' AJ7E Routes LogicStart . AJ7EOuterRequest = False LogicStart . AJ7EOuter = False ' AJ8E Routes LogicStart . AJ8EOuterRequest = False LogicStart . AJ8EOuter = False ' AJ9E Routes LogicStart . AJ9EInnerRequest = False LogicStart . AJ9EInner = False LogicStart . AJ9EFoxHoleRequest = False LogicStart . AJ9EFoxHole = False ' AJ16E Routes LogicStart . AJ16EOuterRequest = False LogicStart . AJ16EOuter = False LogicStart . AJ16EExtentionRequest = False LogicStart . AJ16EExtention = False LogicStart . AJ16EEngineShedRequest = False LogicStart . AJ16EEngineShed = False ' AJ17E Routes LogicStart . AJ17EInnerRequest = False LogicStart . AJ17EInner = False ' AJ18E Routes LogicStart . AJ18EInnerRequest = False LogicStart . AJ18EInner = False LogicStart . AJ18EFoxHoleRequest = False LogicStart . AJ18EFoxHole = False ' AJ21E Routes LogicStart . AJ21EInnerRequest = False LogicStart . AJ21EInner = False LogicStart . AJ21EOuterRequest = False LogicStart . AJ21EOuter = False LogicStart . AJ21EExtentionRequest = False LogicStart . AJ21EExtention = False LogicStart . AJ21EEngineShedRequest = False LogicStart . AJ21EEngineShed = False LogicStart . AJ21EFoxHoleRequest = False LogicStart . AJ21EFoxHole = False ' AJ3W Routes LogicStart . AJ3WOuterRequest = False LogicStart . AJ3WOuter = False LogicStart . AJ3WExtentionRequest = False LogicStart . AJ3WExtention = False ' AJ7W Routes LogicStart . AJ7WOuterRequest = False LogicStart . AJ7WOuter = False ' AJ8W Routes LogicStart . AJ8WOuterRequest = False LogicStart . AJ8WOuter = False ' AJ9W Routes LogicStart . AJ9WInnerRequest = False LogicStart . AJ9WInner = False ' AJ15W Routes LogicStart . AJ15WOuterRequest = False LogicStart . AJ15WOuter = False LogicStart . AJ15WExtentionRequest = False LogicStart . AJ15WExtention = False LogicStart . AJ15WTurnTableRequest = False LogicStart . AJ15WTurnTable = False ' AJ16W Routes LogicStart . AJ16WInnerRequest = False LogicStart . AJ16WInner = False LogicStart . AJ16WPlatform1Request = False LogicStart . AJ16WPlatform1 = False LogicStart . AJ16WPlatform2Request = False LogicStart . AJ16WPlatform2 = False ' AJ17W Routes LogicStart . AJ17WInnerRequest = False LogicStart . AJ17WInner = False ' AJ18W Routes LogicStart . AJ18WInnerRequest = False LogicStart . AJ18WInner = False LogicStart . AJ18WPlatform1Request = False LogicStart . AJ18WPlatform1 = False LogicStart . AJ18WPlatform2Request = False LogicStart . AJ18WPlatform2 = False ' AJ22W Routes LogicStart . AJ22WOuterRequest = False LogicStart . AJ22WOuter = False LogicStart . AJ22WExtentionRequest = False LogicStart . AJ22WExtention = False ' S11 LogicStart . S11OutRequest = False LogicStart . S11Out = False ' S12 LogicStart . S12OutRequest = False LogicStart . S12Out = False ' S14 LogicStart . S14OutRequest = False LogicStart . S14Out = False ' S19 LogicStart . S19OutRequest = False LogicStart . S19Out = False End Sub ' Run each device Sub RunInitializations () SoundInitiate () ButtonsInitiate () AJ1Initiate () AJ2Initiate () AJ3Initiate () AJ4Initiate () Point5Initiate () Point6Initiate () AJ7Initiate () AJ8Initiate () AJ9Initiate () Point10Initiate () Point11Initiate () Point12Initiate () Point13Initiate () Point14Initiate () AJ15Initiate () AJ16Initiate () AJ17Initiate () AJ18Initiate () AJ21Initiate () AJ22Initiate () Point19Initiate () S11Initiate () S12Initiate () S14Initiate () S19Initiate () SPADInitiate () End Sub ' Sound Sub SoundInitiate () If SoundInitiated = False Then ' While certain signals are not initiated restart countdown timer on each tick If AJ15Initiated And AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ4Initiated And AJ21Initiated And AJ22Initiated And SignalsOn Then Else SoundInitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If SoundInitiatedTimer = 0 Then SoundInitiated = True End If ' De - intiate while system is off If SoundInitiated = True Then If SignalsOn Then Else SoundInitiatedTimer = InitilizationStart SoundInitiated = False End If End If End Sub ' Buttons Sub ButtonsInitiate () If ButtonsInitiated = False Then ' While system is off restart countdown timer on each tick If SignalsOn Then Else ButtonsInitiatedTimer = InitilizationStart ButtonsInitiated = False End If ' Initiate device once timer countdown is done . If ButtonsInitiatedTimer = 0 Then ButtonsInitiated = True ButtonsInitiated = True End If ' De - intiate while system is off If ButtonsInitiated = True Then If SignalsOn Then Else ButtonsInitiatedTimer = InitilizationStart ButtonsInitiated = False End If End If End Sub ' AJ1E Sub AJ1Initiate () If AJ1Initiated = False Then LeverLock ( LeverNames . Lever1 ) = True AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False ' Check route for Inner If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then ' check route for outer ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then ' check shunt route ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Else AJ1InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ1InitiatedTimer = 0 Then AJ1Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EReset = True End If End If End Sub ' AJ2E Sub AJ2Initiate () If AJ2Initiated = False Then LeverLock ( LeverNames . Lever2 ) = True AJ2EInner = False AJ2EOuter = False AJ2EExtention = False AJ2EEngineShed = False AJ2EFoxHole = False ' Check route for outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then ' check route for inner ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then AJ2InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ2InitiatedTimer = 0 Then AJ2Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled AJ2EReset = True End If End If End Sub ' AJ3E / W Sub AJ3Initiate () If AJ3Initiated = False Then LeverLock ( LeverNames . Lever3 ) = True AJ3EOuter = False AJ3WOuter = False AJ3WExtention = False ' check eastbound routes ' check route outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If ' check westbound routes ' check route outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Else AJ3InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ3InitiatedTimer = 0 Then AJ3Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3EReset = True AJ3WReset = True End If End If End Sub ' Point 5 a / b Sub Point5Initiate () If Point5Initiated = False Then LeverLock ( LeverNames . Lever5 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point5InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point5InitiatedTimer = 0 Then Point5Initiated = True End If End Sub ' Point 6 a / b Sub Point6Initiate () If Point6Initiated = False Then LeverLock ( LeverNames . Lever6 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point6InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point6InitiatedTimer = 0 Then Point6Initiated = True End If End Sub ' AJ4E Sub AJ4Initiate () If AJ4Initiated = False Then LeverLock ( LeverNames . Lever4 ) = True AJ4EPlatform1 = False AJ4EPlatform2 = False ' Check route entering platform 2 If SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then ' check route for entering platfirm 1 ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then AJ4InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ4InitiatedTimer = 0 Then AJ4Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled AJ4EReset = True End If End If End Sub ' AJ7E / W Sub AJ7Initiate () If AJ7Initiated = False Then LeverLock ( LeverNames . Lever7 ) = True AJ7EOuter = False AJ7WOuter = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Else AJ7InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ7InitiatedTimer = 0 Then AJ7Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7EReset = True AJ7WReset = True End If End If End Sub ' AJ8E / W Sub AJ8Initiate () If AJ8Initiated = False Then LeverLock ( LeverNames . Lever8 ) = True AJ8EOuter = False AJ8WOuter = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Else AJ8InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ8InitiatedTimer = 0 Then AJ8Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8EReset = True AJ8WReset = True End If End If End Sub ' AJ9E / W Sub AJ9Initiate () If AJ9Initiated = False Then LeverLock ( LeverNames . Lever9 ) = True AJ9EInner = False AJ9WInner = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Else AJ9InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ9InitiatedTimer = 0 Then AJ9Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled AJ9EReset = True AJ9WReset = True End If End If End Sub ' Point 10 Sub Point10Initiate () If Point10Initiated = False Then LeverLock ( LeverNames . Lever10 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point10InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point10InitiatedTimer = 0 Then Point10Initiated = True End If End Sub ' Point 11 Sub Point11Initiate () If Point11Initiated = False Then LeverLock ( LeverNames . Lever11 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And S11Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Else Point11InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point11InitiatedTimer = 0 Then Point11Initiated = True End If End Sub ' Point 12 Sub Point12Initiate () If Point12Initiated = False Then LeverLock ( LeverNames . Lever12 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ15Initiated And AJ4Initiated And S12Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Else Point12InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point12InitiatedTimer = 0 Then Point12Initiated = True End If End Sub ' Point 13 Sub Point13Initiate () If Point13Initiated = False Then LeverLock ( LeverNames . Lever13 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ15Initiated And AJ4Initiated And AJ22Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Else Point13InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point13InitiatedTimer = 0 Then Point13Initiated = True End If End Sub ' Point 14 Sub Point14Initiate () If Point14Initiated = False Then LeverLock ( LeverNames . Lever14 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ9Initiated And S14Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Else Point14InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point14InitiatedTimer = 0 Then Point14Initiated = True End If End Sub ' AJ15W Sub AJ15Initiate () If AJ15Initiated = False Then LeverLock ( LeverNames . Lever15 ) = True AJ15WOuter = False AJ15WExtention = False AJ15WTurnTable = False ' Check route outer If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then AJ15InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ15InitiatedTimer = 0 Then AJ15Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WReset = True End If End If End Sub ' AJ16E / W Sub AJ16Initiate () If AJ16Initiated = False Then LeverLock ( LeverNames . Lever16 ) = True AJ16EOuter = False AJ16EExtention = False AJ16EEngineShed = False AJ16WInner = False AJ16WPlatform1 = False AJ16WPlatform2 = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" End If ' check westbound routes ' check route platform 1 entrance If SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then ' check route platoform 2 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then ' check route inner ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Else AJ16InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ16InitiatedTimer = 0 Then AJ16Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16EReset = True AJ16WReset = True End If End If End Sub ' AJ17E / W Sub AJ17Initiate () If AJ17Initiated = False Then LeverLock ( LeverNames . Lever17 ) = True AJ17EInner = False AJ17WInner = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Else AJ17InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ17InitiatedTimer = 0 Then AJ17Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17EReset = True AJ17WReset = True End If End If End Sub ' AJ18E / W Sub AJ18Initiate () If AJ18Initiated = False Then LeverLock ( LeverNames . Lever18 ) = True AJ18EInner = False AJ18EFoxHole = False AJ18WInner = False AJ18WPlatform1 = False AJ18WPlatform2 = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If ' check westbound routes ' check route inner If SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then ' check route platoform 2 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then ' check route platform 1 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else AJ18InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ18InitiatedTimer = 0 Then AJ18Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18EReset = True AJ18WReset = True End If End If End Sub ' AJ21E Sub AJ21Initiate () If AJ21Initiated = False Then LeverLock ( LeverNames . Lever21 ) = True AJ21EInner = False AJ21EOuter = False AJ21EExtention = False AJ21EEngineShed = False AJ21EFoxHole = False ' Check route for outer If SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then ' check route for inner ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then AJ21InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ21InitiatedTimer = 0 Then AJ21Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled AJ21EReset = True End If End If End Sub ' AJ22W Sub AJ22Initiate () If AJ22Initiated = False Then LeverLock ( LeverNames . Lever22 ) = True AJ22WOuter = False AJ22WExtention = False ' Check route outer If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then AJ22InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ22InitiatedTimer = 0 Then AJ22Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ22WReset = True End If End If End Sub ' Point 19 Sub Point19Initiate () If Point19Initiated = False Then LeverLock ( LeverNames . Lever19 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ8Initiated And AJ16Initiated And S19Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Else Point19InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point19InitiatedTimer = 0 Then Point19Initiated = True End If End Sub ' S11 Sub S11Initiate () If S11Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S11 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then S11InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S11InitiatedTimer = 0 Then S11Initiated = True S11Reset = True End If End If End Sub ' S12 Sub S12Initiate () If S12Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S12 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then S12InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S12InitiatedTimer = 0 Then S12Initiated = True S12Reset = True End If End If End Sub ' S14 Sub S14Initiate () If S14Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S14 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then S14InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S14InitiatedTimer = 0 Then S14Initiated = True S14Reset = True End If End If End Sub ' S19 Sub S19Initiate () If S19Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S19 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then S19InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S19InitiatedTimer = 0 Then S19Initiated = True S19Reset = True End If End If End Sub ' SPAD Sub SPADInitiate () If SPADInitiated = False Then ' While signal is not at danger restart countdown timer on each tick If Point5Initiated = False Or Point6Initiated = False Or Point10Initiated = False Or Point11Initiated = False Or Point12Initiated = False Or Point13Initiated = False Then SPADInitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If SPADInitiatedTimer = 0 Then SPADInitiated = True End If End If End Sub ' Second timer countdown Public Sub SecondTick () If Not SoundInitiatedTimer = 0 Then SoundInitiatedTimer -= 1 If Not ButtonsInitiatedTimer = 0 Then ButtonsInitiatedTimer -= 1 If Not AJ1InitiatedTimer = 0 Then AJ1InitiatedTimer -= 1 If Not AJ2InitiatedTimer = 0 Then AJ2InitiatedTimer -= 1 If Not AJ3InitiatedTimer = 0 Then AJ3InitiatedTimer -= 1 If Not AJ4InitiatedTimer = 0 Then AJ4InitiatedTimer -= 1 If Not AJ7InitiatedTimer = 0 Then AJ7InitiatedTimer -= 1 If Not AJ8InitiatedTimer = 0 Then AJ8InitiatedTimer -= 1 If Not AJ9InitiatedTimer = 0 Then AJ9InitiatedTimer -= 1 If Not AJ15InitiatedTimer = 0 Then AJ15InitiatedTimer -= 1 If Not AJ16InitiatedTimer = 0 Then AJ16InitiatedTimer -= 1 If Not AJ17InitiatedTimer = 0 Then AJ17InitiatedTimer -= 1 If Not AJ18InitiatedTimer = 0 Then AJ18InitiatedTimer -= 1 If Not AJ21InitiatedTimer = 0 Then AJ21InitiatedTimer -= 1 If Not AJ22InitiatedTimer = 0 Then AJ22InitiatedTimer -= 1 If Not S11InitiatedTimer = 0 Then S11InitiatedTimer -= 1 If Not S12InitiatedTimer = 0 Then S12InitiatedTimer -= 1 If Not S14InitiatedTimer = 0 Then S14InitiatedTimer -= 1 If Not S19InitiatedTimer = 0 Then S19InitiatedTimer -= 1 If Not Point5InitiatedTimer = 0 Then Point5InitiatedTimer -= 1 If Not Point6InitiatedTimer = 0 Then Point6InitiatedTimer -= 1 If Not Point10InitiatedTimer = 0 Then Point10InitiatedTimer -= 1 If Not Point11InitiatedTimer = 0 Then Point11InitiatedTimer -= 1 If Not Point12InitiatedTimer = 0 Then Point12InitiatedTimer -= 1 If Not Point13InitiatedTimer = 0 Then Point13InitiatedTimer -= 1 If Not Point14InitiatedTimer = 0 Then Point14InitiatedTimer -= 1 If Not Point19InitiatedTimer = 0 Then Point19InitiatedTimer -= 1 If Not SPADInitiatedTimer = 0 Then SPADInitiatedTimer -= 1 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Initializations.vb"},{"location":"mainsystem/Files/Initializations_8vb/#githubsignallingsystemehmr-signalling-systemlogicinitializationsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Initializations.vb"},{"location":"mainsystem/Files/Initializations_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Module Initializations ReadOnly Occupied As Boolean = False ReadOnly Clear As Boolean = True Public AJ1Initiated As Boolean = False Public AJ2Initiated As Boolean = False Public AJ3Initiated As Boolean = False Public AJ4Initiated As Boolean = False Public AJ7Initiated As Boolean = False Public AJ8Initiated As Boolean = False Public AJ9Initiated As Boolean = False Public AJ15Initiated As Boolean = False Public AJ16Initiated As Boolean = False Public AJ17Initiated As Boolean = False Public AJ18Initiated As Boolean = False Public AJ21Initiated As Boolean = False Public AJ22Initiated As Boolean = False Public S11Initiated As Boolean = False Public S12Initiated As Boolean = False Public S14Initiated As Boolean = False Public S19Initiated As Boolean = False Public Point5Initiated As Boolean = False Public Point6Initiated As Boolean = False Public Point10Initiated As Boolean = False Public Point11Initiated As Boolean = False Public Point12Initiated As Boolean = False Public Point13Initiated As Boolean = False Public Point14Initiated As Boolean = False Public Point19Initiated As Boolean = False Public SPADInitiated As Boolean = False Public ModeManualInititated As Boolean = False Public ModeComputerInitiated As Boolean = False Public SoundInitiated As Boolean = False Public ButtonsInitiated As Boolean = False Public SoundInitiatedTimer As Integer = InitilizationStart Public ButtonsInitiatedTimer As Integer = InitilizationStart Public AJ1InitiatedTimer As Integer = InitilizationStart Public AJ2InitiatedTimer As Integer = InitilizationStart Public AJ3InitiatedTimer As Integer = InitilizationStart Public AJ4InitiatedTimer As Integer = InitilizationStart Public AJ7InitiatedTimer As Integer = InitilizationStart Public AJ8InitiatedTimer As Integer = InitilizationStart Public AJ9InitiatedTimer As Integer = InitilizationStart Public AJ15InitiatedTimer As Integer = InitilizationStart Public AJ16InitiatedTimer As Integer = InitilizationStart Public AJ17InitiatedTimer As Integer = InitilizationStart Public AJ18InitiatedTimer As Integer = InitilizationStart Public AJ21InitiatedTimer As Integer = InitilizationStart Public AJ22InitiatedTimer As Integer = InitilizationStart Public S11InitiatedTimer As Integer = InitilizationStart Public S12InitiatedTimer As Integer = InitilizationStart Public S14InitiatedTimer As Integer = InitilizationStart Public S19InitiatedTimer As Integer = InitilizationStart Public Point5InitiatedTimer As Integer = InitilizationStart Public Point6InitiatedTimer As Integer = InitilizationStart Public Point10InitiatedTimer As Integer = InitilizationStart Public Point11InitiatedTimer As Integer = InitilizationStart Public Point12InitiatedTimer As Integer = InitilizationStart Public Point13InitiatedTimer As Integer = InitilizationStart Public Point14InitiatedTimer As Integer = InitilizationStart Public Point19InitiatedTimer As Integer = InitilizationStart Public SPADInitiatedTimer As Integer = InitilizationStart ' Reinitiate all Public Sub ResetInitiate () ' Inititation SoundInitiatedTimer = InitilizationStart ButtonsInitiatedTimer = InitilizationStart AJ1InitiatedTimer = InitilizationStart AJ2InitiatedTimer = InitilizationStart AJ3InitiatedTimer = InitilizationStart AJ4InitiatedTimer = InitilizationStart AJ7InitiatedTimer = InitilizationStart AJ8InitiatedTimer = InitilizationStart AJ9InitiatedTimer = InitilizationStart AJ15InitiatedTimer = InitilizationStart AJ16InitiatedTimer = InitilizationStart AJ17InitiatedTimer = InitilizationStart AJ18InitiatedTimer = InitilizationStart AJ21InitiatedTimer = InitilizationStart AJ22InitiatedTimer = InitilizationStart S11InitiatedTimer = InitilizationStart S12InitiatedTimer = InitilizationStart S14InitiatedTimer = InitilizationStart S19InitiatedTimer = InitilizationStart Point5InitiatedTimer = InitilizationStart Point6InitiatedTimer = InitilizationStart Point10InitiatedTimer = InitilizationStart Point11InitiatedTimer = InitilizationStart Point12InitiatedTimer = InitilizationStart Point13InitiatedTimer = InitilizationStart Point14InitiatedTimer = InitilizationStart Point19InitiatedTimer = InitilizationStart SPADInitiatedTimer = InitilizationStart SoundInitiated = False ButtonsInitiated = False AJ1Initiated = False AJ2Initiated = False AJ3Initiated = False AJ4Initiated = False AJ7Initiated = False AJ8Initiated = False AJ9Initiated = False AJ15Initiated = False AJ16Initiated = False AJ17Initiated = False AJ18Initiated = False AJ21Initiated = False AJ22Initiated = False S11Initiated = False S12Initiated = False S14Initiated = False S19Initiated = False Point5Initiated = False Point6Initiated = False Point10Initiated = False Point11Initiated = False Point12Initiated = False Point13Initiated = False Point14Initiated = False Point19Initiated = False SPADInitiated = False ' AJ1E Routes LogicStart . AJ1EInnerRequest = False LogicStart . AJ1EInner = False LogicStart . AJ1EOuterRequest = False LogicStart . AJ1EOuter = False LogicStart . AJ1EHeadShuntRequest = False LogicStart . AJ1EHeadShunt = False LogicStart . AJ1EExtentionRequest = False LogicStart . AJ1EExtention = False LogicStart . AJ1EEngineShedRequest = False LogicStart . AJ1EEngineShed = False LogicStart . AJ1EFoxHoleRequest = False LogicStart . AJ1EFoxHole = False ' AJ2E Routes LogicStart . AJ2EInnerRequest = False LogicStart . AJ2EInner = False LogicStart . AJ2EOuterRequest = False LogicStart . AJ2EOuter = False LogicStart . AJ2EExtentionRequest = False LogicStart . AJ2EExtention = False LogicStart . AJ2EEngineShedRequest = False LogicStart . AJ2EEngineShed = False LogicStart . AJ2EFoxHoleRequest = False LogicStart . AJ2EFoxHole = False ' AJ3E Routes LogicStart . AJ3EOuterRequest = False LogicStart . AJ3EOuter = False ' AJ4E Routes LogicStart . AJ4EPlatform1Request = False LogicStart . AJ4EPlatform1 = False LogicStart . AJ4EPlatform2Request = False LogicStart . AJ4EPlatform2 = False ' AJ7E Routes LogicStart . AJ7EOuterRequest = False LogicStart . AJ7EOuter = False ' AJ8E Routes LogicStart . AJ8EOuterRequest = False LogicStart . AJ8EOuter = False ' AJ9E Routes LogicStart . AJ9EInnerRequest = False LogicStart . AJ9EInner = False LogicStart . AJ9EFoxHoleRequest = False LogicStart . AJ9EFoxHole = False ' AJ16E Routes LogicStart . AJ16EOuterRequest = False LogicStart . AJ16EOuter = False LogicStart . AJ16EExtentionRequest = False LogicStart . AJ16EExtention = False LogicStart . AJ16EEngineShedRequest = False LogicStart . AJ16EEngineShed = False ' AJ17E Routes LogicStart . AJ17EInnerRequest = False LogicStart . AJ17EInner = False ' AJ18E Routes LogicStart . AJ18EInnerRequest = False LogicStart . AJ18EInner = False LogicStart . AJ18EFoxHoleRequest = False LogicStart . AJ18EFoxHole = False ' AJ21E Routes LogicStart . AJ21EInnerRequest = False LogicStart . AJ21EInner = False LogicStart . AJ21EOuterRequest = False LogicStart . AJ21EOuter = False LogicStart . AJ21EExtentionRequest = False LogicStart . AJ21EExtention = False LogicStart . AJ21EEngineShedRequest = False LogicStart . AJ21EEngineShed = False LogicStart . AJ21EFoxHoleRequest = False LogicStart . AJ21EFoxHole = False ' AJ3W Routes LogicStart . AJ3WOuterRequest = False LogicStart . AJ3WOuter = False LogicStart . AJ3WExtentionRequest = False LogicStart . AJ3WExtention = False ' AJ7W Routes LogicStart . AJ7WOuterRequest = False LogicStart . AJ7WOuter = False ' AJ8W Routes LogicStart . AJ8WOuterRequest = False LogicStart . AJ8WOuter = False ' AJ9W Routes LogicStart . AJ9WInnerRequest = False LogicStart . AJ9WInner = False ' AJ15W Routes LogicStart . AJ15WOuterRequest = False LogicStart . AJ15WOuter = False LogicStart . AJ15WExtentionRequest = False LogicStart . AJ15WExtention = False LogicStart . AJ15WTurnTableRequest = False LogicStart . AJ15WTurnTable = False ' AJ16W Routes LogicStart . AJ16WInnerRequest = False LogicStart . AJ16WInner = False LogicStart . AJ16WPlatform1Request = False LogicStart . AJ16WPlatform1 = False LogicStart . AJ16WPlatform2Request = False LogicStart . AJ16WPlatform2 = False ' AJ17W Routes LogicStart . AJ17WInnerRequest = False LogicStart . AJ17WInner = False ' AJ18W Routes LogicStart . AJ18WInnerRequest = False LogicStart . AJ18WInner = False LogicStart . AJ18WPlatform1Request = False LogicStart . AJ18WPlatform1 = False LogicStart . AJ18WPlatform2Request = False LogicStart . AJ18WPlatform2 = False ' AJ22W Routes LogicStart . AJ22WOuterRequest = False LogicStart . AJ22WOuter = False LogicStart . AJ22WExtentionRequest = False LogicStart . AJ22WExtention = False ' S11 LogicStart . S11OutRequest = False LogicStart . S11Out = False ' S12 LogicStart . S12OutRequest = False LogicStart . S12Out = False ' S14 LogicStart . S14OutRequest = False LogicStart . S14Out = False ' S19 LogicStart . S19OutRequest = False LogicStart . S19Out = False End Sub ' Run each device Sub RunInitializations () SoundInitiate () ButtonsInitiate () AJ1Initiate () AJ2Initiate () AJ3Initiate () AJ4Initiate () Point5Initiate () Point6Initiate () AJ7Initiate () AJ8Initiate () AJ9Initiate () Point10Initiate () Point11Initiate () Point12Initiate () Point13Initiate () Point14Initiate () AJ15Initiate () AJ16Initiate () AJ17Initiate () AJ18Initiate () AJ21Initiate () AJ22Initiate () Point19Initiate () S11Initiate () S12Initiate () S14Initiate () S19Initiate () SPADInitiate () End Sub ' Sound Sub SoundInitiate () If SoundInitiated = False Then ' While certain signals are not initiated restart countdown timer on each tick If AJ15Initiated And AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ4Initiated And AJ21Initiated And AJ22Initiated And SignalsOn Then Else SoundInitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If SoundInitiatedTimer = 0 Then SoundInitiated = True End If ' De - intiate while system is off If SoundInitiated = True Then If SignalsOn Then Else SoundInitiatedTimer = InitilizationStart SoundInitiated = False End If End If End Sub ' Buttons Sub ButtonsInitiate () If ButtonsInitiated = False Then ' While system is off restart countdown timer on each tick If SignalsOn Then Else ButtonsInitiatedTimer = InitilizationStart ButtonsInitiated = False End If ' Initiate device once timer countdown is done . If ButtonsInitiatedTimer = 0 Then ButtonsInitiated = True ButtonsInitiated = True End If ' De - intiate while system is off If ButtonsInitiated = True Then If SignalsOn Then Else ButtonsInitiatedTimer = InitilizationStart ButtonsInitiated = False End If End If End Sub ' AJ1E Sub AJ1Initiate () If AJ1Initiated = False Then LeverLock ( LeverNames . Lever1 ) = True AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False ' Check route for Inner If SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then ' check route for outer ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Then ' check shunt route ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Else AJ1InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ1InitiatedTimer = 0 Then AJ1Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EReset = True End If End If End Sub ' AJ2E Sub AJ2Initiate () If AJ2Initiated = False Then LeverLock ( LeverNames . Lever2 ) = True AJ2EInner = False AJ2EOuter = False AJ2EExtention = False AJ2EEngineShed = False AJ2EFoxHole = False ' Check route for outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then ' check route for inner ElseIf Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Signals . SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not Signals . SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then AJ2InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ2InitiatedTimer = 0 Then AJ2Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ2E ) = TimerDisabled AJ2EReset = True End If End If End Sub ' AJ3E / W Sub AJ3Initiate () If AJ3Initiated = False Then LeverLock ( LeverNames . Lever3 ) = True AJ3EOuter = False AJ3WOuter = False AJ3WExtention = False ' check eastbound routes ' check route outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" End If ' check westbound routes ' check route outer If Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear Then Else Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If Signals . SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" And Signals . SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Else AJ3InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ3InitiatedTimer = 0 Then AJ3Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3EReset = True AJ3WReset = True End If End If End Sub ' Point 5 a / b Sub Point5Initiate () If Point5Initiated = False Then LeverLock ( LeverNames . Lever5 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point5InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point5InitiatedTimer = 0 Then Point5Initiated = True End If End Sub ' Point 6 a / b Sub Point6Initiate () If Point6Initiated = False Then LeverLock ( LeverNames . Lever6 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point6InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point6InitiatedTimer = 0 Then Point6Initiated = True End If End Sub ' AJ4E Sub AJ4Initiate () If AJ4Initiated = False Then LeverLock ( LeverNames . Lever4 ) = True AJ4EPlatform1 = False AJ4EPlatform2 = False ' Check route entering platform 2 If SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then ' check route for entering platfirm 1 ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then AJ4InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ4InitiatedTimer = 0 Then AJ4Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ4E ) = TimerDisabled AJ4EReset = True End If End If End Sub ' AJ7E / W Sub AJ7Initiate () If AJ7Initiated = False Then LeverLock ( LeverNames . Lever7 ) = True AJ7EOuter = False AJ7WOuter = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Else AJ7InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ7InitiatedTimer = 0 Then AJ7Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7EReset = True AJ7WReset = True End If End If End Sub ' AJ8E / W Sub AJ8Initiate () If AJ8Initiated = False Then LeverLock ( LeverNames . Lever8 ) = True AJ8EOuter = False AJ8WOuter = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Else AJ8InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ8InitiatedTimer = 0 Then AJ8Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8EReset = True AJ8WReset = True End If End If End Sub ' AJ9E / W Sub AJ9Initiate () If AJ9Initiated = False Then LeverLock ( LeverNames . Lever9 ) = True AJ9EInner = False AJ9WInner = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Else AJ9InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ9InitiatedTimer = 0 Then AJ9Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled AJ9EReset = True AJ9WReset = True End If End If End Sub ' Point 10 Sub Point10Initiate () If Point10Initiated = False Then LeverLock ( LeverNames . Lever10 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ16Initiated And AJ18Initiated And AJ21Initiated And AJ2Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else Point10InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point10InitiatedTimer = 0 Then Point10Initiated = True End If End Sub ' Point 11 Sub Point11Initiate () If Point11Initiated = False Then LeverLock ( LeverNames . Lever11 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ1Initiated And AJ16Initiated And AJ18Initiated And S11Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Else Point11InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point11InitiatedTimer = 0 Then Point11Initiated = True End If End Sub ' Point 12 Sub Point12Initiate () If Point12Initiated = False Then LeverLock ( LeverNames . Lever12 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ15Initiated And AJ4Initiated And S12Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Else Point12InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point12InitiatedTimer = 0 Then Point12Initiated = True End If End Sub ' Point 13 Sub Point13Initiate () If Point13Initiated = False Then LeverLock ( LeverNames . Lever13 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ15Initiated And AJ4Initiated And AJ22Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Else Point13InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point13InitiatedTimer = 0 Then Point13Initiated = True End If End Sub ' Point 14 Sub Point14Initiate () If Point14Initiated = False Then LeverLock ( LeverNames . Lever14 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ9Initiated And S14Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Else Point14InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point14InitiatedTimer = 0 Then Point14Initiated = True End If End Sub ' AJ15W Sub AJ15Initiate () If AJ15Initiated = False Then LeverLock ( LeverNames . Lever15 ) = True AJ15WOuter = False AJ15WExtention = False AJ15WTurnTable = False ' Check route outer If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then AJ15InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ15InitiatedTimer = 0 Then AJ15Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WReset = True End If End If End Sub ' AJ16E / W Sub AJ16Initiate () If AJ16Initiated = False Then LeverLock ( LeverNames . Lever16 ) = True AJ16EOuter = False AJ16EExtention = False AJ16EEngineShed = False AJ16WInner = False AJ16WPlatform1 = False AJ16WPlatform2 = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then ' check route shunt ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" End If ' check westbound routes ' check route platform 1 entrance If SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Normal\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then ' check route platoform 2 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then ' check route inner ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Else AJ16InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ16InitiatedTimer = 0 Then AJ16Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16EReset = True AJ16WReset = True End If End If End Sub ' AJ17E / W Sub AJ17Initiate () If AJ17Initiated = False Then LeverLock ( LeverNames . Lever17 ) = True AJ17EInner = False AJ17WInner = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" End If ' check westbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Else AJ17InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ17InitiatedTimer = 0 Then AJ17Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17EReset = True AJ17WReset = True End If End If End Sub ' AJ18E / W Sub AJ18Initiate () If AJ18Initiated = False Then LeverLock ( LeverNames . Lever18 ) = True AJ18EInner = False AJ18EFoxHole = False AJ18WInner = False AJ18WPlatform1 = False AJ18WPlatform2 = False ' check eastbound routes ' check route outer If SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Clear\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" End If ' check westbound routes ' check route inner If SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And PointReturns ( PointNames . P5b ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then ' check route platoform 2 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then ' check route platform 1 entrance ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If ' While signals are not at danger restart countdown timer on each tick If SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Else AJ18InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If AJ18InitiatedTimer = 0 Then AJ18Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18EReset = True AJ18WReset = True End If End If End Sub ' AJ21E Sub AJ21Initiate () If AJ21Initiated = False Then LeverLock ( LeverNames . Lever21 ) = True AJ21EInner = False AJ21EOuter = False AJ21EExtention = False AJ21EEngineShed = False AJ21EFoxHole = False ' Check route for outer If SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then ' check route for inner ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Else SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then AJ21InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ21InitiatedTimer = 0 Then AJ21Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ21E ) = TimerDisabled AJ21EReset = True End If End If End Sub ' AJ22W Sub AJ22Initiate () If AJ22Initiated = False Then LeverLock ( LeverNames . Lever22 ) = True AJ22WOuter = False AJ22WExtention = False ' Check route outer If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then AJ22InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If AJ22InitiatedTimer = 0 Then AJ22Initiated = True Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ22WReset = True End If End If End Sub ' Point 19 Sub Point19Initiate () If Point19Initiated = False Then LeverLock ( LeverNames . Lever19 ) = True ' While certain signals are not initiated and tractions are occupied restart countdown timer on each tick If AJ8Initiated And AJ16Initiated And S19Initiated And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" And SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Else Point19InitiatedTimer = InitilizationStart End If ' Initiate device once timer countdown is done . If Point19InitiatedTimer = 0 Then Point19Initiated = True End If End Sub ' S11 Sub S11Initiate () If S11Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S11 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then S11InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S11InitiatedTimer = 0 Then S11Initiated = True S11Reset = True End If End If End Sub ' S12 Sub S12Initiate () If S12Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S12 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then S12InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S12InitiatedTimer = 0 Then S12Initiated = True S12Reset = True End If End If End Sub ' S14 Sub S14Initiate () If S14Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S14 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P14 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then S14InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S14InitiatedTimer = 0 Then S14Initiated = True S14Reset = True End If End If End Sub ' S19 Sub S19Initiate () If S19Initiated = False Then ' Check route exiting siding If ( SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Or SignalSystemState ( Definitions . SignalNames . S19 ) = \"Clear\" ) And Points . PointReturns ( PointNames . P19 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear Then Else SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" End If ' While signal is not at danger restart countdown timer on each tick If Not SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then S19InitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If S19InitiatedTimer = 0 Then S19Initiated = True S19Reset = True End If End If End Sub ' SPAD Sub SPADInitiate () If SPADInitiated = False Then ' While signal is not at danger restart countdown timer on each tick If Point5Initiated = False Or Point6Initiated = False Or Point10Initiated = False Or Point11Initiated = False Or Point12Initiated = False Or Point13Initiated = False Then SPADInitiatedTimer = InitilizationStart ' Initiate device once timer countdown is done . If SPADInitiatedTimer = 0 Then SPADInitiated = True End If End If End Sub ' Second timer countdown Public Sub SecondTick () If Not SoundInitiatedTimer = 0 Then SoundInitiatedTimer -= 1 If Not ButtonsInitiatedTimer = 0 Then ButtonsInitiatedTimer -= 1 If Not AJ1InitiatedTimer = 0 Then AJ1InitiatedTimer -= 1 If Not AJ2InitiatedTimer = 0 Then AJ2InitiatedTimer -= 1 If Not AJ3InitiatedTimer = 0 Then AJ3InitiatedTimer -= 1 If Not AJ4InitiatedTimer = 0 Then AJ4InitiatedTimer -= 1 If Not AJ7InitiatedTimer = 0 Then AJ7InitiatedTimer -= 1 If Not AJ8InitiatedTimer = 0 Then AJ8InitiatedTimer -= 1 If Not AJ9InitiatedTimer = 0 Then AJ9InitiatedTimer -= 1 If Not AJ15InitiatedTimer = 0 Then AJ15InitiatedTimer -= 1 If Not AJ16InitiatedTimer = 0 Then AJ16InitiatedTimer -= 1 If Not AJ17InitiatedTimer = 0 Then AJ17InitiatedTimer -= 1 If Not AJ18InitiatedTimer = 0 Then AJ18InitiatedTimer -= 1 If Not AJ21InitiatedTimer = 0 Then AJ21InitiatedTimer -= 1 If Not AJ22InitiatedTimer = 0 Then AJ22InitiatedTimer -= 1 If Not S11InitiatedTimer = 0 Then S11InitiatedTimer -= 1 If Not S12InitiatedTimer = 0 Then S12InitiatedTimer -= 1 If Not S14InitiatedTimer = 0 Then S14InitiatedTimer -= 1 If Not S19InitiatedTimer = 0 Then S19InitiatedTimer -= 1 If Not Point5InitiatedTimer = 0 Then Point5InitiatedTimer -= 1 If Not Point6InitiatedTimer = 0 Then Point6InitiatedTimer -= 1 If Not Point10InitiatedTimer = 0 Then Point10InitiatedTimer -= 1 If Not Point11InitiatedTimer = 0 Then Point11InitiatedTimer -= 1 If Not Point12InitiatedTimer = 0 Then Point12InitiatedTimer -= 1 If Not Point13InitiatedTimer = 0 Then Point13InitiatedTimer -= 1 If Not Point14InitiatedTimer = 0 Then Point14InitiatedTimer -= 1 If Not Point19InitiatedTimer = 0 Then Point19InitiatedTimer -= 1 If Not SPADInitiatedTimer = 0 Then SPADInitiatedTimer -= 1 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/JsonDisplay_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Web/JsonDisplay.vb \u00b6 Source code \u00b6 Imports System . IO Imports System . Text Imports System . Text . Json Module JsonDisplay Public Sub updateJSon () Dim Options = New JsonWriterOptions With Options . Indented = True End With Dim MemStream As New MemoryStream Dim Writer As New Utf8JsonWriter ( MemStream , Options ) ' Start collecting data CheckValues () ' start file Writer . WriteStartObject () ' --------------------------------------------------------------------- ' start sections Writer . WritePropertyName ( \"sections\" ) Writer . WriteStartObject () ' section A Writer . WritePropertyName ( \"A\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionA . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 1 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionA ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionA ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionA ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionA )) Writer . WriteEndObject () ' section A11 Writer . WritePropertyName ( \"A11\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionA11 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 22 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionA11 )) Writer . WriteEndObject () ' section B Writer . WritePropertyName ( \"B\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionB . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 2 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionB ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionB ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionB ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionB )) Writer . WriteEndObject () ' section C Writer . WritePropertyName ( \"C\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionC . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 3 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionC ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionC ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionC ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionC )) Writer . WriteEndObject () ' ' section C19 Writer . WritePropertyName ( \"C19\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionC19 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 26 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionC19 )) Writer . WriteEndObject () ' section CD Writer . WritePropertyName ( \"CD\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionCD . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 28 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionCD )) Writer . WriteEndObject () ' section D Writer . WritePropertyName ( \"D\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionD . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 4 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionD ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionD ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionD ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionD )) Writer . WriteEndObject () ' section DE Writer . WritePropertyName ( \"DE\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionDE . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 18 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionDE )) Writer . WriteEndObject () ' section E Writer . WritePropertyName ( \"E\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionE . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 5 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionE ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionE ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionE ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionE )) Writer . WriteEndObject () ' section F Writer . WritePropertyName ( \"F\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 6 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF )) Writer . WriteEndObject () ' section F12 Writer . WritePropertyName ( \"F12\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF12 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 23 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF12 )) Writer . WriteEndObject () ' section F13 Writer . WritePropertyName ( \"F13\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF13 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 24 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF13 )) Writer . WriteEndObject () ' section G Writer . WritePropertyName ( \"G\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionG . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 7 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionG ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionG ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionG ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionG )) Writer . WriteEndObject () ' section H Writer . WritePropertyName ( \"H\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionH . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 8 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionH ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionH ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionH ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionH )) Writer . WriteEndObject () ' section I Writer . WritePropertyName ( \"I\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionI . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 9 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionI ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionI ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionI ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionI )) Writer . WriteEndObject () ' section J Writer . WritePropertyName ( \"J\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionJ . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 10 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionJ )) Writer . WriteEndObject () ' section K Writer . WritePropertyName ( \"K\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionK . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 11 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionK ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionK ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionK ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionK )) Writer . WriteEndObject () ' section L Writer . WritePropertyName ( \"L\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionL . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 12 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionL ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionL ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionL ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionL )) Writer . WriteEndObject () ' section M Writer . WritePropertyName ( \"M\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionM . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 13 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionM ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionM ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionM ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionM )) Writer . WriteEndObject () ' section N Writer . WritePropertyName ( \"N\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionN . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 14 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionN ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionN ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionN ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionN )) Writer . WriteEndObject () ' section NO Writer . WritePropertyName ( \"NO\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionNO . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 19 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionNO )) Writer . WriteEndObject () ' section NO14 Writer . WritePropertyName ( \"NO14\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionNO14 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 25 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionNO14 )) Writer . WriteEndObject () ' section O Writer . WritePropertyName ( \"O\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionO . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 15 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionO ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionO ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionO ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionO )) Writer . WriteEndObject () ' section OP Writer . WritePropertyName ( \"OP\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionOP . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 20 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . Sectionop )) Writer . WriteEndObject () ' section P Writer . WritePropertyName ( \"P\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionP . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 16 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionP ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionP ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionP ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionP )) Writer . WriteEndObject () ' section Q Writer . WritePropertyName ( \"Q\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionQ . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 17 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionQ )) Writer . WriteEndObject () ' section R Writer . WritePropertyName ( \"R\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionR . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 27 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionR ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionR ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionR ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionR )) Writer . WriteEndObject () ' section Q10 Writer . WritePropertyName ( \"Q10\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionQ10 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 21 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionQ10 )) Writer . WriteEndObject () ' End Sections Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start points Writer . WritePropertyName ( \"points\" ) Writer . WriteStartObject () ' point 5 a Writer . WritePropertyName ( \"P5a\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P5a ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P5a ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 5 b Writer . WritePropertyName ( \"P5b\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P5b ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P5b ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 6 a Writer . WritePropertyName ( \"P6a\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P6a ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P6a ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 6 b Writer . WritePropertyName ( \"P6b\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P6b ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P6b ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 10 Writer . WritePropertyName ( \"P10\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P10 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P10 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 11 Writer . WritePropertyName ( \"P11\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P11 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P11 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 12 Writer . WritePropertyName ( \"P12\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P12 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P12 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 13 Writer . WritePropertyName ( \"P13\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P13 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P13 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 14 Writer . WritePropertyName ( \"P14\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P14 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P14 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 19 Writer . WritePropertyName ( \"P19\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P19 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P19 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' End points Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start signals Writer . WritePropertyName ( \"signals\" ) Writer . WriteStartObject () ' signal AJ1E Writer . WritePropertyName ( \"AJ1E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ1E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ1E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal AJ2E Writer . WritePropertyName ( \"AJ2E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ2E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ2E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteEndObject () ' signal AJ3E Writer . WritePropertyName ( \"AJ3E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ3E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteEndObject () ' signal RAJ3E Writer . WritePropertyName ( \"RAJ3E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . RAJ3E ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteEndObject () ' signal AJ3W Writer . WritePropertyName ( \"AJ3W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ3W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ). ToString ) Writer . WriteEndObject () ' signal AJ4E Writer . WritePropertyName ( \"AJ4E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ4E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ4E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteEndObject () ' signal AJ7E Writer . WritePropertyName ( \"AJ7E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ7E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteEndObject () ' signal AJ7W Writer . WritePropertyName ( \"AJ7W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ7W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ). ToString ) Writer . WriteEndObject () ' signal AJ8E Writer . WritePropertyName ( \"AJ8E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ8E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteEndObject () ' signal AJ8W Writer . WritePropertyName ( \"AJ8W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ8W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ). ToString ) Writer . WriteEndObject () ' signal AJ9E Writer . WritePropertyName ( \"AJ9E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ9E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteEndObject () ' signal AJ9W Writer . WritePropertyName ( \"AJ9W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ9W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ). ToString ) Writer . WriteEndObject () ' signal AJ15W Writer . WritePropertyName ( \"AJ15W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ15W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ15W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteEndObject () ' signal AJ16E Writer . WritePropertyName ( \"AJ16E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ16E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteEndObject () ' signal AJ16W Writer . WritePropertyName ( \"AJ16W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ16W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ). ToString ) Writer . WriteEndObject () ' signal AJ17E Writer . WritePropertyName ( \"AJ17E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ17E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteEndObject () ' signal AJ17W Writer . WritePropertyName ( \"AJ17W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ17W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ). ToString ) Writer . WriteEndObject () ' signal AJ18E Writer . WritePropertyName ( \"AJ18E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ18E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteEndObject () ' signal AJ18W Writer . WritePropertyName ( \"AJ18W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ18W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ). ToString ) Writer . WriteEndObject () ' signal AJ21E Writer . WritePropertyName ( \"AJ21E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ21E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ21E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteEndObject () ' signal AJ22W Writer . WritePropertyName ( \"AJ22W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ22W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ22W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteEndObject () ' signal S11 Writer . WritePropertyName ( \"S11\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S11 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S12 Writer . WritePropertyName ( \"S12\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S12 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S14 Writer . WritePropertyName ( \"S14\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S14 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S19 Writer . WritePropertyName ( \"S19\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S19 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' Signal AJ16WLOS Writer . WritePropertyName ( \"AJ16WLOS\" ) Writer . WriteStartObject () If ( Power . SignalAspectPower = True And LogicStart . EastBound = True ) Or Points . TestMode = True Then Writer . WriteString ( \"signal\" , \"danger\" ) Else Writer . WriteString ( \"signal\" , \"noaspect\" ) End If Writer . WriteEndObject () ' End signals Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start crossings Writer . WritePropertyName ( \"crossings\" ) Writer . WriteStartObject () Writer . WritePropertyName ( \"center\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"open\" , Not LineSide . CrossingSafe ) Writer . WriteBoolean ( \"sensor1\" , LineSide . LCSensor1 ) Writer . WriteBoolean ( \"sensor2\" , LineSide . LCSensor2 ) Writer . WriteBoolean ( \"sensor3\" , LineSide . LCSensor3 ) Writer . WriteBoolean ( \"sensor4\" , LineSide . LCSensor4 ) Writer . WriteEndObject () ' End crossings Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start ( new ) requests Writer . WritePropertyName ( \"requestsnew\" ) Writer . WriteStartObject () ' request S11 Writer . WritePropertyName ( \"S11\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S12 Writer . WritePropertyName ( \"S12\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S14 Writer . WritePropertyName ( \"S14\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S19 Writer . WritePropertyName ( \"S19\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request p1trtse Writer . WritePropertyName ( \"AJ1E\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP1TRTSE ) Writer . WriteString ( \"text\" , JsonValueRequestP1TRTSEText ) Writer . WriteEndObject () ' request p1trtsw Writer . WritePropertyName ( \"AJ15W\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP1TRTSW ) Writer . WriteString ( \"text\" , JsonValueRequestP1TRTSWText ) Writer . WriteEndObject () ' request p2trtse Writer . WritePropertyName ( \"AJ21E\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP2TRTSE ) Writer . WriteString ( \"text\" , JsonValueRequestP2TRTSEText ) Writer . WriteEndObject () ' request p2trtsw Writer . WritePropertyName ( \"AJ22W\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"text\" , JsonValueRequestP2TRTSWText ) Writer . WriteEndObject () Writer . WriteBoolean ( \"aj22wtrts\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"aj22wtrtstext\" , JsonValueRequestP2TRTSWText ) ' End requests Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start call in ( new ) Writer . WritePropertyName ( \"callinnew\" ) Writer . WriteStartObject () ' call in eastbound Writer . WritePropertyName ( \"AJ4E\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ4EState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ4EText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' call in westbound Writer . WritePropertyName ( \"AJ18W\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ18WState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ18WText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' End call in Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start messages ( new ) Writer . WritePropertyName ( \"messagesnew\" ) Writer . WriteStartArray () For Each err As String In Errors . CurrentErrorList Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"error\" ) Writer . WriteString ( \"text\" , err ) Writer . WriteEndObject () Next If Not Sound . SoundText = \"\" Then Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"info\" ) Writer . WriteString ( \"text\" , Sound . SoundText ) Writer . WriteEndObject () End If If Not Json_Values . JsonValueRequestText = \"\" Then Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteString ( \"text\" , Json_Values . JsonValueRequestText ) Writer . WriteEndObject () End If Writer . WriteEndArray () ' --------------------------------------------------------------------- ' start requests Writer . WritePropertyName ( \"requests\" ) Writer . WriteStartObject () ' request S11 Writer . WriteString ( \"s11\" , \"notrequested\" ) ' request S12 Writer . WriteString ( \"s12\" , \"notrequested\" ) ' request S14 Writer . WriteString ( \"s14\" , \"notrequested\" ) ' request S19 Writer . WriteString ( \"s19\" , \"notrequested\" ) ' request p1trtse Writer . WriteBoolean ( \"aj1etrts\" , JsonValueRequestP1TRTSE ) Writer . WriteString ( \"aj1etrtstext\" , JsonValueRequestP1TRTSEText ) ' request p1trtsw Writer . WriteBoolean ( \"aj15wtrts\" , JsonValueRequestP1TRTSW ) Writer . WriteString ( \"aj15wtrtstext\" , JsonValueRequestP1TRTSWText ) ' request p2trtse Writer . WriteBoolean ( \"aj21etrts\" , JsonValueRequestP2TRTSE ) Writer . WriteString ( \"aj21etrtstext\" , JsonValueRequestP2TRTSEText ) ' request p2trtsw Writer . WriteBoolean ( \"aj22wtrts\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"aj22wtrtstext\" , JsonValueRequestP2TRTSWText ) ' End requests Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start call in Writer . WritePropertyName ( \"callin\" ) Writer . WriteStartObject () ' call in eastbound Writer . WritePropertyName ( \"aj4e\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ4EState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ4EText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' call in westbound Writer . WritePropertyName ( \"aj18w\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ18WState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ18WText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' End call in Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start messages Writer . WritePropertyName ( \"messages\" ) Writer . WriteStartObject () ' top middle text Writer . WriteString ( \"warning\" , Errors . DisplayCurrentRequest ) Writer . WriteString ( \"error\" , Errors . DisplayCurrentError ) Writer . WriteString ( \"err\" , Errors . DisplayCurrentError ) Writer . WriteString ( \"info\" , Sound . SoundText ) ' End messages Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start info Writer . WritePropertyName ( \"info\" ) Writer . WriteStartObject () ' top middle text Writer . WriteString ( \"cabincode\" , \"AJ\" ) Writer . WriteString ( \"direction\" , JsonValueDirection ) Writer . WriteString ( \"logic\" , JsonValuelogic ) Writer . WriteString ( \"safety\" , UsingAir ) Writer . WriteString ( \"user\" , LoggedInUserName ) Writer . WriteString ( \"datetime\" , DateTime . Now . ToString ( \"yyyyMMddHHmmss\" )) ' End info Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start Frame Writer . WritePropertyName ( \"frame\" ) Writer . WriteStartObject () ' lever 1 Writer . WritePropertyName ( \"lever1\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever1 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever1 )) ' Writer . WriteString ( \"display\" , Lever1Display . ToString ) Writer . WriteEndObject () ' lever 2 Writer . WritePropertyName ( \"lever2\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever2 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever2 )) ' Writer . WriteString ( \"display\" , Lever2Display . ToString ) Writer . WriteEndObject () ' lever 3 Writer . WritePropertyName ( \"lever3\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever3 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever3 )) ' Writer . WriteString ( \"display\" , Lever3Display . ToString ) Writer . WriteEndObject () ' lever 4 Writer . WritePropertyName ( \"lever4\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever4 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever4 )) ' Writer . WriteString ( \"display\" , Lever4Display . ToString ) Writer . WriteEndObject () ' lever 5 Writer . WritePropertyName ( \"lever5\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever5 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever5 )) ' Writer . WriteString ( \"displayn\" , Lever5NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever5RDisplay . ToString ) Writer . WriteEndObject () ' lever 6 Writer . WritePropertyName ( \"lever6\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever6 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever6 )) ' Writer . WriteString ( \"displayn\" , Lever6NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever6RDisplay . ToString ) Writer . WriteEndObject () ' lever 7 Writer . WritePropertyName ( \"lever7\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever7 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever7 )) ' Writer . WriteString ( \"display\" , Lever7Display . ToString ) Writer . WriteEndObject () ' lever 8 Writer . WritePropertyName ( \"lever8\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever8 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever8 )) ' Writer . WriteString ( \"display\" , Lever8Display . ToString ) Writer . WriteEndObject () ' lever 9 Writer . WritePropertyName ( \"lever9\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever9 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever9 )) ' Writer . WriteString ( \"display\" , Lever9Display . ToString ) Writer . WriteEndObject () ' lever 10 Writer . WritePropertyName ( \"lever10\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever10 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever10 )) ' Writer . WriteString ( \"displayn\" , Lever10NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever10RDisplay . ToString ) Writer . WriteEndObject () ' lever 11 Writer . WritePropertyName ( \"lever11\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever11 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever11 )) ' Writer . WriteString ( \"displayn\" , Lever11NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever11RDisplay . ToString ) Writer . WriteEndObject () ' lever 12 Writer . WritePropertyName ( \"lever12\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever12 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever12 )) ' Writer . WriteString ( \"displayn\" , Lever12NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever12RDisplay . ToString ) Writer . WriteEndObject () ' lever 13 Writer . WritePropertyName ( \"lever13\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever13 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever13 )) ' Writer . WriteString ( \"displayn\" , Lever13NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever13RDisplay . ToString ) Writer . WriteEndObject () ' lever 14 Writer . WritePropertyName ( \"lever14\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever14 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever14 )) ' Writer . WriteString ( \"displayn\" , Lever14NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever14RDisplay . ToString ) Writer . WriteEndObject () ' lever 15 Writer . WritePropertyName ( \"lever15\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever15 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever15 )) ' Writer . WriteString ( \"display\" , Lever15Display . ToString ) Writer . WriteEndObject () ' lever 16 Writer . WritePropertyName ( \"lever16\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever16 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever16 )) ' Writer . WriteString ( \"display\" , Lever16Display . ToString ) Writer . WriteEndObject () ' lever 17 Writer . WritePropertyName ( \"lever17\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever17 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever17 )) ' Writer . WriteString ( \"display\" , Lever17Display . ToString ) Writer . WriteEndObject () ' lever 18 Writer . WritePropertyName ( \"lever18\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever18 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever18 )) ' Writer . WriteString ( \"display\" , Lever18Display . ToString ) Writer . WriteEndObject () ' lever 19 Writer . WritePropertyName ( \"lever19\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever19 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever19 )) ' Writer . WriteString ( \"displayn\" , Lever19NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever19RDisplay . ToString ) Writer . WriteEndObject () ' lever 20 Writer . WritePropertyName ( \"lever20\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever20 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever20 )) ' Writer . WriteString ( \"display\" , Lever20Display . ToString ) Writer . WriteEndObject () ' lever 21 Writer . WritePropertyName ( \"lever21\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever21 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever21 )) ' Writer . WriteString ( \"display\" , Lever21Display . ToString ) Writer . WriteEndObject () ' lever 22 Writer . WritePropertyName ( \"lever22\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever22 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever22 )) ' Writer . WriteString ( \"display\" , Lever22Display . ToString ) Writer . WriteEndObject () ' End Frame Writer . WriteEndObject () ' End File Writer . WriteEndObject () ' Code to update file when done getting display data Writer . Flush () MemStream . Close () Dim JSON As String = Encoding . UTF8 . GetString ( MemStream . ToArray ()) Dim DataFile As String = GlobalConfig . config . jsonoutput . path & GlobalConfig . config . jsonoutput . filename If Not GlobalConfig . config . jsonoutput . enable Then Return End If Try If File . Exists ( DataFile ) = True Then Dim objWriter As New StreamWriter ( DataFile , False ) objWriter . Write ( JSON ) ' objWriter . Close () objWriter . Dispose () End If Catch e As Exception End Try End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Web/JsonDisplay.vb"},{"location":"mainsystem/Files/JsonDisplay_8vb/#githubsignallingsystemehmr-signalling-systemwebjsondisplayvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Web/JsonDisplay.vb"},{"location":"mainsystem/Files/JsonDisplay_8vb/#source-code","text":"Imports System . IO Imports System . Text Imports System . Text . Json Module JsonDisplay Public Sub updateJSon () Dim Options = New JsonWriterOptions With Options . Indented = True End With Dim MemStream As New MemoryStream Dim Writer As New Utf8JsonWriter ( MemStream , Options ) ' Start collecting data CheckValues () ' start file Writer . WriteStartObject () ' --------------------------------------------------------------------- ' start sections Writer . WritePropertyName ( \"sections\" ) Writer . WriteStartObject () ' section A Writer . WritePropertyName ( \"A\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionA . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 1 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionA ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionA ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionA ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionA )) Writer . WriteEndObject () ' section A11 Writer . WritePropertyName ( \"A11\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionA11 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 22 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionA11 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionA11 )) Writer . WriteEndObject () ' section B Writer . WritePropertyName ( \"B\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionB . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 2 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionB ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionB ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionB ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionB )) Writer . WriteEndObject () ' section C Writer . WritePropertyName ( \"C\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionC . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 3 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionC ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionC ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionC ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionC )) Writer . WriteEndObject () ' ' section C19 Writer . WritePropertyName ( \"C19\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionC19 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 26 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionC19 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionC19 )) Writer . WriteEndObject () ' section CD Writer . WritePropertyName ( \"CD\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionCD . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 28 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionCD ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionCD )) Writer . WriteEndObject () ' section D Writer . WritePropertyName ( \"D\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionD . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 4 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionD ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionD ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionD ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionD )) Writer . WriteEndObject () ' section DE Writer . WritePropertyName ( \"DE\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionDE . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 18 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionDE ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionDE )) Writer . WriteEndObject () ' section E Writer . WritePropertyName ( \"E\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionE . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 5 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionE ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionE ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionE ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionE )) Writer . WriteEndObject () ' section F Writer . WritePropertyName ( \"F\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 6 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF )) Writer . WriteEndObject () ' section F12 Writer . WritePropertyName ( \"F12\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF12 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 23 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF12 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF12 )) Writer . WriteEndObject () ' section F13 Writer . WritePropertyName ( \"F13\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionF13 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 24 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionF13 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionF13 )) Writer . WriteEndObject () ' section G Writer . WritePropertyName ( \"G\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionG . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 7 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionG ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionG ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionG ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionG )) Writer . WriteEndObject () ' section H Writer . WritePropertyName ( \"H\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionH . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 8 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionH ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionH ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionH ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionH )) Writer . WriteEndObject () ' section I Writer . WritePropertyName ( \"I\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionI . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 9 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionI ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionI ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionI ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionI )) Writer . WriteEndObject () ' section J Writer . WritePropertyName ( \"J\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionJ . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 10 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionJ ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionJ )) Writer . WriteEndObject () ' section K Writer . WritePropertyName ( \"K\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionK . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 11 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionK ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionK ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionK ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionK )) Writer . WriteEndObject () ' section L Writer . WritePropertyName ( \"L\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionL . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 12 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionL ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionL ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionL ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionL )) Writer . WriteEndObject () ' section M Writer . WritePropertyName ( \"M\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionM . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 13 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionM ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionM ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionM ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionM )) Writer . WriteEndObject () ' section N Writer . WritePropertyName ( \"N\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionN . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 14 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionN ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionN ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionN ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionN )) Writer . WriteEndObject () ' section NO Writer . WritePropertyName ( \"NO\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionNO . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 19 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionNO ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionNO )) Writer . WriteEndObject () ' section NO14 Writer . WritePropertyName ( \"NO14\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionNO14 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 25 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionNO14 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionNO14 )) Writer . WriteEndObject () ' section O Writer . WritePropertyName ( \"O\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionO . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 15 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionO ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionO ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionO ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionO )) Writer . WriteEndObject () ' section OP Writer . WritePropertyName ( \"OP\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionOP . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 20 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . Sectionop ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . Sectionop )) Writer . WriteEndObject () ' section P Writer . WritePropertyName ( \"P\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionP . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 16 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionP ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionP ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionP ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionP )) Writer . WriteEndObject () ' section Q Writer . WritePropertyName ( \"Q\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionQ . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 17 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionQ ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionQ )) Writer . WriteEndObject () ' section R Writer . WritePropertyName ( \"R\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionR . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 27 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionR ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionR ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionR ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionR )) Writer . WriteEndObject () ' section Q10 Writer . WritePropertyName ( \"Q10\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , JsonValueSectionQ10 . ToLower ) Writer . WriteString ( \"voltage\" , AnalogIOManager . ActualAnalogValue ( 21 ). ToString ) Writer . WriteString ( \"setpoint\" , RuntimeConfig . config . TrackSectionSetPoint ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteString ( \"timer\" , TrackSectionTimer ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteString ( \"errorsetpoint\" , RuntimeConfig . config . TrackSectionSetPointError ( TrackSectionNames . SectionQ10 ). ToString ) Writer . WriteBoolean ( \"error\" , TrackSectionError ( TrackSectionNames . SectionQ10 )) Writer . WriteEndObject () ' End Sections Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start points Writer . WritePropertyName ( \"points\" ) Writer . WriteStartObject () ' point 5 a Writer . WritePropertyName ( \"P5a\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P5a ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P5a ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 5 b Writer . WritePropertyName ( \"P5b\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P5b ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P5b ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 6 a Writer . WritePropertyName ( \"P6a\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P6a ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P6a ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 6 b Writer . WritePropertyName ( \"P6b\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P6b ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P6b ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 10 Writer . WritePropertyName ( \"P10\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P10 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P10 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 11 Writer . WritePropertyName ( \"P11\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P11 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P11 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 12 Writer . WritePropertyName ( \"P12\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P12 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P12 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 13 Writer . WritePropertyName ( \"P13\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P13 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P13 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 14 Writer . WritePropertyName ( \"P14\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P14 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P14 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' point 19 Writer . WritePropertyName ( \"P19\" ) Writer . WriteStartObject () Writer . WriteString ( \"route\" , JsonValuePointRoute ( PointNames . P19 ). ToLower ) Writer . WriteString ( \"state\" , JsonValuePointState ( PointNames . P19 ). ToLower ) Writer . WriteBoolean ( \"error\" , False ) Writer . WriteEndObject () ' End points Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start signals Writer . WritePropertyName ( \"signals\" ) Writer . WriteStartObject () ' signal AJ1E Writer . WritePropertyName ( \"AJ1E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ1E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ1E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal AJ2E Writer . WritePropertyName ( \"AJ2E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ2E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ2E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ2E ). ToString ) Writer . WriteEndObject () ' signal AJ3E Writer . WritePropertyName ( \"AJ3E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ3E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteEndObject () ' signal RAJ3E Writer . WritePropertyName ( \"RAJ3E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . RAJ3E ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . RAJ3E ). ToString ) Writer . WriteEndObject () ' signal AJ3W Writer . WritePropertyName ( \"AJ3W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ3W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ3W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ). ToString ) Writer . WriteEndObject () ' signal AJ4E Writer . WritePropertyName ( \"AJ4E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ4E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ4E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ4E ). ToString ) Writer . WriteEndObject () ' signal AJ7E Writer . WritePropertyName ( \"AJ7E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ7E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteEndObject () ' signal AJ7W Writer . WritePropertyName ( \"AJ7W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ7W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ7W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ). ToString ) Writer . WriteEndObject () ' signal AJ8E Writer . WritePropertyName ( \"AJ8E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ8E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteEndObject () ' signal AJ8W Writer . WritePropertyName ( \"AJ8W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ8W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ8W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ). ToString ) Writer . WriteEndObject () ' signal AJ9E Writer . WritePropertyName ( \"AJ9E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ9E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteEndObject () ' signal AJ9W Writer . WritePropertyName ( \"AJ9W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ9W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ9W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ). ToString ) Writer . WriteEndObject () ' signal AJ15W Writer . WritePropertyName ( \"AJ15W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ15W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ15W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ). ToString ) Writer . WriteEndObject () ' signal AJ16E Writer . WritePropertyName ( \"AJ16E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ16E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteEndObject () ' signal AJ16W Writer . WritePropertyName ( \"AJ16W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ16W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ16W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ). ToString ) Writer . WriteEndObject () ' signal AJ17E Writer . WritePropertyName ( \"AJ17E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ17E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ17E ). ToString ) Writer . WriteEndObject () ' signal AJ17W Writer . WritePropertyName ( \"AJ17W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ17W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ17W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ). ToString ) Writer . WriteEndObject () ' signal AJ18E Writer . WritePropertyName ( \"AJ18E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ18E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteEndObject () ' signal AJ18W Writer . WritePropertyName ( \"AJ18W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ18W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ18W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ). ToString ) Writer . WriteEndObject () ' signal AJ21E Writer . WritePropertyName ( \"AJ21E\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ21E ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ21E )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ21E ). ToString ) Writer . WriteEndObject () ' signal AJ22W Writer . WritePropertyName ( \"AJ22W\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . AJ22W ). ToLower ) Writer . WriteBoolean ( \"spad\" , SPADDetection . SignalSPADAlert ( SPADSignalNames . AJ22W )) Writer . WriteString ( \"signaltimer\" , Signals . SignalTimer ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"signaltimeout\" , Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteString ( \"announcementdelay\" , SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ). ToString ) Writer . WriteEndObject () ' signal S11 Writer . WritePropertyName ( \"S11\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S11 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S12 Writer . WritePropertyName ( \"S12\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S12 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S14 Writer . WritePropertyName ( \"S14\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S14 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' signal S19 Writer . WritePropertyName ( \"S19\" ) Writer . WriteStartObject () Writer . WriteString ( \"signal\" , SignalOutputState ( Definitions . SignalNames . S19 ). ToLower ) Writer . WriteBoolean ( \"spad\" , False ) Writer . WriteString ( \"routesafetocleartimer\" , SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ). ToString ) Writer . WriteEndObject () ' Signal AJ16WLOS Writer . WritePropertyName ( \"AJ16WLOS\" ) Writer . WriteStartObject () If ( Power . SignalAspectPower = True And LogicStart . EastBound = True ) Or Points . TestMode = True Then Writer . WriteString ( \"signal\" , \"danger\" ) Else Writer . WriteString ( \"signal\" , \"noaspect\" ) End If Writer . WriteEndObject () ' End signals Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start crossings Writer . WritePropertyName ( \"crossings\" ) Writer . WriteStartObject () Writer . WritePropertyName ( \"center\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"open\" , Not LineSide . CrossingSafe ) Writer . WriteBoolean ( \"sensor1\" , LineSide . LCSensor1 ) Writer . WriteBoolean ( \"sensor2\" , LineSide . LCSensor2 ) Writer . WriteBoolean ( \"sensor3\" , LineSide . LCSensor3 ) Writer . WriteBoolean ( \"sensor4\" , LineSide . LCSensor4 ) Writer . WriteEndObject () ' End crossings Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start ( new ) requests Writer . WritePropertyName ( \"requestsnew\" ) Writer . WriteStartObject () ' request S11 Writer . WritePropertyName ( \"S11\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S12 Writer . WritePropertyName ( \"S12\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S14 Writer . WritePropertyName ( \"S14\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request S19 Writer . WritePropertyName ( \"S19\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"slot\" ) Writer . WriteString ( \"state\" , \"notrequested\" ) Writer . WriteEndObject () ' request p1trtse Writer . WritePropertyName ( \"AJ1E\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP1TRTSE ) Writer . WriteString ( \"text\" , JsonValueRequestP1TRTSEText ) Writer . WriteEndObject () ' request p1trtsw Writer . WritePropertyName ( \"AJ15W\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP1TRTSW ) Writer . WriteString ( \"text\" , JsonValueRequestP1TRTSWText ) Writer . WriteEndObject () ' request p2trtse Writer . WritePropertyName ( \"AJ21E\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP2TRTSE ) Writer . WriteString ( \"text\" , JsonValueRequestP2TRTSEText ) Writer . WriteEndObject () ' request p2trtsw Writer . WritePropertyName ( \"AJ22W\" ) Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteBoolean ( \"state\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"text\" , JsonValueRequestP2TRTSWText ) Writer . WriteEndObject () Writer . WriteBoolean ( \"aj22wtrts\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"aj22wtrtstext\" , JsonValueRequestP2TRTSWText ) ' End requests Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start call in ( new ) Writer . WritePropertyName ( \"callinnew\" ) Writer . WriteStartObject () ' call in eastbound Writer . WritePropertyName ( \"AJ4E\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ4EState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ4EText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' call in westbound Writer . WritePropertyName ( \"AJ18W\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ18WState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ18WText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' End call in Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start messages ( new ) Writer . WritePropertyName ( \"messagesnew\" ) Writer . WriteStartArray () For Each err As String In Errors . CurrentErrorList Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"error\" ) Writer . WriteString ( \"text\" , err ) Writer . WriteEndObject () Next If Not Sound . SoundText = \"\" Then Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"info\" ) Writer . WriteString ( \"text\" , Sound . SoundText ) Writer . WriteEndObject () End If If Not Json_Values . JsonValueRequestText = \"\" Then Writer . WriteStartObject () Writer . WriteString ( \"type\" , \"trts\" ) Writer . WriteString ( \"text\" , Json_Values . JsonValueRequestText ) Writer . WriteEndObject () End If Writer . WriteEndArray () ' --------------------------------------------------------------------- ' start requests Writer . WritePropertyName ( \"requests\" ) Writer . WriteStartObject () ' request S11 Writer . WriteString ( \"s11\" , \"notrequested\" ) ' request S12 Writer . WriteString ( \"s12\" , \"notrequested\" ) ' request S14 Writer . WriteString ( \"s14\" , \"notrequested\" ) ' request S19 Writer . WriteString ( \"s19\" , \"notrequested\" ) ' request p1trtse Writer . WriteBoolean ( \"aj1etrts\" , JsonValueRequestP1TRTSE ) Writer . WriteString ( \"aj1etrtstext\" , JsonValueRequestP1TRTSEText ) ' request p1trtsw Writer . WriteBoolean ( \"aj15wtrts\" , JsonValueRequestP1TRTSW ) Writer . WriteString ( \"aj15wtrtstext\" , JsonValueRequestP1TRTSWText ) ' request p2trtse Writer . WriteBoolean ( \"aj21etrts\" , JsonValueRequestP2TRTSE ) Writer . WriteString ( \"aj21etrtstext\" , JsonValueRequestP2TRTSEText ) ' request p2trtsw Writer . WriteBoolean ( \"aj22wtrts\" , JsonValueRequestP2TRTSW ) Writer . WriteString ( \"aj22wtrtstext\" , JsonValueRequestP2TRTSWText ) ' End requests Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start call in Writer . WritePropertyName ( \"callin\" ) Writer . WriteStartObject () ' call in eastbound Writer . WritePropertyName ( \"aj4e\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ4EState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ4EText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' call in westbound Writer . WritePropertyName ( \"aj18w\" ) Writer . WriteStartObject () Writer . WriteBoolean ( \"ars\" , JsonValueCallInAJ18WState ) Writer . WriteString ( \"value\" , JsonValueCallInAJ18WText ) Writer . WriteBoolean ( \"waiting\" , False ) Writer . WriteEndObject () ' End call in Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start messages Writer . WritePropertyName ( \"messages\" ) Writer . WriteStartObject () ' top middle text Writer . WriteString ( \"warning\" , Errors . DisplayCurrentRequest ) Writer . WriteString ( \"error\" , Errors . DisplayCurrentError ) Writer . WriteString ( \"err\" , Errors . DisplayCurrentError ) Writer . WriteString ( \"info\" , Sound . SoundText ) ' End messages Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start info Writer . WritePropertyName ( \"info\" ) Writer . WriteStartObject () ' top middle text Writer . WriteString ( \"cabincode\" , \"AJ\" ) Writer . WriteString ( \"direction\" , JsonValueDirection ) Writer . WriteString ( \"logic\" , JsonValuelogic ) Writer . WriteString ( \"safety\" , UsingAir ) Writer . WriteString ( \"user\" , LoggedInUserName ) Writer . WriteString ( \"datetime\" , DateTime . Now . ToString ( \"yyyyMMddHHmmss\" )) ' End info Writer . WriteEndObject () ' --------------------------------------------------------------------- ' start Frame Writer . WritePropertyName ( \"frame\" ) Writer . WriteStartObject () ' lever 1 Writer . WritePropertyName ( \"lever1\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever1 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever1 )) ' Writer . WriteString ( \"display\" , Lever1Display . ToString ) Writer . WriteEndObject () ' lever 2 Writer . WritePropertyName ( \"lever2\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever2 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever2 )) ' Writer . WriteString ( \"display\" , Lever2Display . ToString ) Writer . WriteEndObject () ' lever 3 Writer . WritePropertyName ( \"lever3\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever3 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever3 )) ' Writer . WriteString ( \"display\" , Lever3Display . ToString ) Writer . WriteEndObject () ' lever 4 Writer . WritePropertyName ( \"lever4\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever4 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever4 )) ' Writer . WriteString ( \"display\" , Lever4Display . ToString ) Writer . WriteEndObject () ' lever 5 Writer . WritePropertyName ( \"lever5\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever5 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever5 )) ' Writer . WriteString ( \"displayn\" , Lever5NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever5RDisplay . ToString ) Writer . WriteEndObject () ' lever 6 Writer . WritePropertyName ( \"lever6\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever6 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever6 )) ' Writer . WriteString ( \"displayn\" , Lever6NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever6RDisplay . ToString ) Writer . WriteEndObject () ' lever 7 Writer . WritePropertyName ( \"lever7\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever7 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever7 )) ' Writer . WriteString ( \"display\" , Lever7Display . ToString ) Writer . WriteEndObject () ' lever 8 Writer . WritePropertyName ( \"lever8\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever8 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever8 )) ' Writer . WriteString ( \"display\" , Lever8Display . ToString ) Writer . WriteEndObject () ' lever 9 Writer . WritePropertyName ( \"lever9\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever9 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever9 )) ' Writer . WriteString ( \"display\" , Lever9Display . ToString ) Writer . WriteEndObject () ' lever 10 Writer . WritePropertyName ( \"lever10\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever10 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever10 )) ' Writer . WriteString ( \"displayn\" , Lever10NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever10RDisplay . ToString ) Writer . WriteEndObject () ' lever 11 Writer . WritePropertyName ( \"lever11\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever11 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever11 )) ' Writer . WriteString ( \"displayn\" , Lever11NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever11RDisplay . ToString ) Writer . WriteEndObject () ' lever 12 Writer . WritePropertyName ( \"lever12\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever12 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever12 )) ' Writer . WriteString ( \"displayn\" , Lever12NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever12RDisplay . ToString ) Writer . WriteEndObject () ' lever 13 Writer . WritePropertyName ( \"lever13\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever13 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever13 )) ' Writer . WriteString ( \"displayn\" , Lever13NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever13RDisplay . ToString ) Writer . WriteEndObject () ' lever 14 Writer . WritePropertyName ( \"lever14\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever14 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever14 )) ' Writer . WriteString ( \"displayn\" , Lever14NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever14RDisplay . ToString ) Writer . WriteEndObject () ' lever 15 Writer . WritePropertyName ( \"lever15\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever15 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever15 )) ' Writer . WriteString ( \"display\" , Lever15Display . ToString ) Writer . WriteEndObject () ' lever 16 Writer . WritePropertyName ( \"lever16\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever16 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever16 )) ' Writer . WriteString ( \"display\" , Lever16Display . ToString ) Writer . WriteEndObject () ' lever 17 Writer . WritePropertyName ( \"lever17\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever17 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever17 )) ' Writer . WriteString ( \"display\" , Lever17Display . ToString ) Writer . WriteEndObject () ' lever 18 Writer . WritePropertyName ( \"lever18\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever18 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever18 )) ' Writer . WriteString ( \"display\" , Lever18Display . ToString ) Writer . WriteEndObject () ' lever 19 Writer . WritePropertyName ( \"lever19\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever19 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever19 )) ' Writer . WriteString ( \"displayn\" , Lever19NDisplay . ToString ) ' Writer . WriteString ( \"displayr\" , Lever19RDisplay . ToString ) Writer . WriteEndObject () ' lever 20 Writer . WritePropertyName ( \"lever20\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever20 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever20 )) ' Writer . WriteString ( \"display\" , Lever20Display . ToString ) Writer . WriteEndObject () ' lever 21 Writer . WritePropertyName ( \"lever21\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever21 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever21 )) ' Writer . WriteString ( \"display\" , Lever21Display . ToString ) Writer . WriteEndObject () ' lever 22 Writer . WritePropertyName ( \"lever22\" ) Writer . WriteStartObject () Writer . WriteString ( \"state\" , Lever ( LeverNames . Lever22 ). ToLower ) Writer . WriteBoolean ( \"locked\" , LeverLock ( LeverNames . Lever22 )) ' Writer . WriteString ( \"display\" , Lever22Display . ToString ) Writer . WriteEndObject () ' End Frame Writer . WriteEndObject () ' End File Writer . WriteEndObject () ' Code to update file when done getting display data Writer . Flush () MemStream . Close () Dim JSON As String = Encoding . UTF8 . GetString ( MemStream . ToArray ()) Dim DataFile As String = GlobalConfig . config . jsonoutput . path & GlobalConfig . config . jsonoutput . filename If Not GlobalConfig . config . jsonoutput . enable Then Return End If Try If File . Exists ( DataFile ) = True Then Dim objWriter As New StreamWriter ( DataFile , False ) objWriter . Write ( JSON ) ' objWriter . Close () objWriter . Dispose () End If Catch e As Exception End Try End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Json_01Values_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Web/Json Values.vb \u00b6 Source code \u00b6 Module Json_Values ' Flash toggle Public FlashOn As Boolean = False ' Sections ReadOnly SectionStateOccupied As String = \"Occupied\" ReadOnly SectionStateUnoccupied As String = \"Unoccupied\" ReadOnly SectionStateRouteSet As String = \"Route\" ReadOnly SectionStateEngineerMode As String = \"Engineer\" ' Points ReadOnly PointPositionStateNormal As String = \"Normal\" ReadOnly PointPositionStateReverse As String = \"Reverse\" ReadOnly PointPositionStateUnknown As String = \"Unknown\" ReadOnly PointStateOccupied As String = \"Occupied\" ReadOnly PointStateUnoccupied As String = \"Unoccupied\" ReadOnly PointStateRouteSet As String = \"Route\" ReadOnly PointStateEngineerMode As String = \"Engineer\" ' Signals ReadOnly SignalAspectClear As String = \"Clear\" ReadOnly SignalAspectCaution As String = \"Caution\" ReadOnly SignalAspectDanger As String = \"Danger\" ReadOnly SignalAspectEngineer As String = \"Engineer\" ' Sections Public JsonValueSectionA As String = SectionStateEngineerMode Public JsonValueSectionA11 As String = SectionStateEngineerMode Public JsonValueSectionB As String = SectionStateEngineerMode Public JsonValueSectionC As String = SectionStateEngineerMode Public JsonValueSectionC19 As String = SectionStateEngineerMode Public JsonValueSectionCD As String = SectionStateEngineerMode Public JsonValueSectionD As String = SectionStateEngineerMode Public JsonValueSectionDE As String = SectionStateEngineerMode Public JsonValueSectionE As String = SectionStateEngineerMode Public JsonValueSectionF As String = SectionStateEngineerMode Public JsonValueSectionF12 As String = SectionStateEngineerMode Public JsonValueSectionF13 As String = SectionStateEngineerMode Public JsonValueSectionG As String = SectionStateEngineerMode Public JsonValueSectionH As String = SectionStateEngineerMode Public JsonValueSectionI As String = SectionStateEngineerMode Public JsonValueSectionJ As String = SectionStateEngineerMode Public JsonValueSectionK As String = SectionStateEngineerMode Public JsonValueSectionL As String = SectionStateEngineerMode Public JsonValueSectionM As String = SectionStateEngineerMode Public JsonValueSectionN As String = SectionStateEngineerMode Public JsonValueSectionNO As String = SectionStateEngineerMode Public JsonValueSectionNO14 As String = SectionStateEngineerMode Public JsonValueSectionO As String = SectionStateEngineerMode Public JsonValueSectionOP As String = SectionStateEngineerMode Public JsonValueSectionP As String = SectionStateEngineerMode Public JsonValueSectionQ As String = SectionStateEngineerMode Public JsonValueSectionQ10 As String = SectionStateEngineerMode Public JsonValueSectionR As String = SectionStateEngineerMode ' Points Public JsonValuePointState () As String = { PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal } Public JsonValuePointRoute () As String = { PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode } ' requests Public JsonValueRequestS11 As Boolean = False Public JsonValueRequestS12 As Boolean = False Public JsonValueRequestS14 As Boolean = False Public JsonValueRequestS19 As Boolean = False Public JsonValueRequestP1TRTSE As Boolean = False Public JsonValueRequestP1TRTSW As Boolean = False Public JsonValueRequestP2TRTSE As Boolean = False Public JsonValueRequestP2TRTSW As Boolean = False Public JsonValueRequestP1TRTSEText As String = \"\" Public JsonValueRequestP1TRTSWText As String = \"\" Public JsonValueRequestP2TRTSEText As String = \"\" Public JsonValueRequestP2TRTSWText As String = \"\" Public JsonValueRequestText As String = False ' Callin Public JsonValueCallInAJ4EState As Boolean = False Public JsonValueCallInAJ18WState As Boolean = False Public JsonValueCallInAJ4EText As String = False Public JsonValueCallInAJ18WText As String = False ' info Public JsonValueDirection As String = \"\" Public JsonValuelogic As String = \"\" Public Sub CheckValues () ' Section A If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then If Points . PointReturns ( PointNames . P6b ) = PointInNormal Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"EngineerMode\" Then JsonValueSectionA = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionA = SectionStateOccupied Else JsonValueSectionA = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf WestBound = True Then If Points . PointReturns ( PointNames . P6b ) = PointInNormal Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateEngineerMode End If Else JsonValueSectionA = SectionStateEngineerMode End If End If ' Section A11 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True Then If Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValueSectionA11 = SectionStateRouteSet Else JsonValueSectionA11 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValueSectionA11 = SectionStateUnoccupied End If Else JsonValueSectionA11 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"EngineerMode\" Then JsonValueSectionA11 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionA11 = SectionStateOccupied Else JsonValueSectionA11 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"UnOccupied\" Then If FlashOn = False Then If Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValueSectionA11 = SectionStateRouteSet Else JsonValueSectionA11 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValueSectionA11 = SectionStateUnoccupied End If Else JsonValueSectionA11 = SectionStateEngineerMode End If End If ' Section B If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAspectDanger ) Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateOccupied End If Else JsonValueSectionB = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"EngineerMode\" Then JsonValueSectionB = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionB = SectionStateOccupied Else JsonValueSectionB = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAspectDanger ) Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateEngineerMode End If Else JsonValueSectionB = SectionStateEngineerMode End If End If ' Section C If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ) Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If Else JsonValueSectionC = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then JsonValueSectionC = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"EngineerMode\" Then JsonValueSectionC = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionC = SectionStateOccupied Else JsonValueSectionC = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ) Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If Else JsonValueSectionC = SectionStateEngineerMode End If Else JsonValueSectionC = SectionStateEngineerMode End If End If ' Section C19 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True Then If Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValueSectionC19 = SectionStateRouteSet Else JsonValueSectionC19 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValueSectionC19 = SectionStateUnoccupied End If Else JsonValueSectionC19 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"EngineerMode\" Then JsonValueSectionC19 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionC19 = SectionStateOccupied Else JsonValueSectionC19 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"UnOccupied\" Then If FlashOn = False Then If Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValueSectionC19 = SectionStateRouteSet Else JsonValueSectionC19 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValueSectionC19 = SectionStateUnoccupied End If Else JsonValueSectionC19 = SectionStateEngineerMode End If End If ' Section CD If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAspectDanger ) Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"EngineerMode\" Then JsonValueSectionCD = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionCD = SectionStateOccupied Else JsonValueSectionCD = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAspectDanger ) Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateEngineerMode End If Else JsonValueSectionCD = SectionStateEngineerMode End If End If ' Section D If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAspectDanger ) Then JsonValueSectionD = SectionStateRouteSet Else JsonValueSectionD = SectionStateUnoccupied End If Else JsonValueSectionD = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"EngineerMode\" Then JsonValueSectionD = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionD = SectionStateOccupied Else JsonValueSectionD = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAspectDanger ) Then JsonValueSectionD = SectionStateRouteSet Else JsonValueSectionD = SectionStateUnoccupied End If Else JsonValueSectionD = SectionStateEngineerMode End If Else JsonValueSectionD = SectionStateEngineerMode End If ' Section DE If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = True Then If ( JsonValueSectionD = SectionStateRouteSet ) Or ( JsonValueSectionD = SectionStateOccupied ) Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If Else JsonValueSectionDE = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = True Then If ( JsonValueSectionE = SectionStateRouteSet ) Or ( JsonValueSectionE = SectionStateOccupied ) Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If Else JsonValueSectionDE = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"EngineerMode\" Then JsonValueSectionDE = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionDE = SectionStateOccupied Else JsonValueSectionDE = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValueSectionD = SectionStateRouteSet Or JsonValueSectionD = SectionStateOccupied Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValueSectionE = SectionStateRouteSet Or JsonValueSectionE = SectionStateOccupied Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If End If Else JsonValueSectionDE = SectionStateEngineerMode End If Else JsonValueSectionDE = SectionStateEngineerMode End If ' Section E If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAspectDanger ) Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If Else JsonValueSectionE = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True Then If JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If Else JsonValueSectionE = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"EngineerMode\" Then JsonValueSectionE = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionE = SectionStateOccupied Else JsonValueSectionE = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAspectDanger Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If End If Else JsonValueSectionE = SectionStateEngineerMode End If Else JsonValueSectionE = SectionStateEngineerMode End If ' Section F If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If Else JsonValueSectionF = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then If ( JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If Else JsonValueSectionF = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"EngineerMode\" Then JsonValueSectionF = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF = SectionStateOccupied Else JsonValueSectionF = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If End If Else JsonValueSectionF = SectionStateEngineerMode End If Else JsonValueSectionF = SectionStateEngineerMode End If ' Section F12 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True Then If Points . PointReturns ( PointNames . P12 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValueSectionF12 = SectionStateRouteSet Else JsonValueSectionF12 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P12 ) = \"Normal\" Then JsonValueSectionF12 = SectionStateUnoccupied End If Else JsonValueSectionF12 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"EngineerMode\" Then JsonValueSectionF12 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF12 = SectionStateOccupied Else JsonValueSectionF12 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValueSectionF12 = SectionStateRouteSet Else JsonValueSectionF12 = SectionStateUnoccupied End If Else JsonValueSectionF12 = SectionStateEngineerMode End If Else JsonValueSectionF12 = SectionStateEngineerMode End If ' Section F13 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then If (( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet ) Or ( JsonValuePointState ( PointNames . P13 ) = PointStateOccupied )) And Points . PointReturns ( PointNames . P13 ) = PointInReverse Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If Else JsonValueSectionF13 = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAspectDanger ) Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If Else JsonValueSectionF13 = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"EngineerMode\" Then JsonValueSectionF13 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF13 = SectionStateOccupied Else JsonValueSectionF13 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInReverse Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAspectDanger ) Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If End If Else JsonValueSectionF13 = SectionStateEngineerMode End If Else JsonValueSectionF13 = SectionStateEngineerMode End If ' Section G If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then If JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If Else JsonValueSectionG = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAspectDanger Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If Else JsonValueSectionG = SectionStateOccupied End If Else JsonValueSectionG = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"EngineerMode\" Then JsonValueSectionG = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionG = SectionStateOccupied Else JsonValueSectionG = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If ElseIf WestBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAspectDanger Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If End If Else JsonValueSectionG = SectionStateEngineerMode End If Else JsonValueSectionG = SectionStateEngineerMode End If ' Section H If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAspectDanger ) Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If Else JsonValueSectionH = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then If JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If Else JsonValueSectionH = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"EngineerMode\" Then JsonValueSectionH = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionH = SectionStateOccupied Else JsonValueSectionH = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAspectDanger ) Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If End If Else JsonValueSectionH = SectionStateEngineerMode End If Else JsonValueSectionH = SectionStateEngineerMode End If ' Section I If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then If JsonValueSectionF13 = SectionStateRouteSet Or JsonValueSectionF13 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then If JsonValueSectionQ10 = SectionStateRouteSet Or JsonValueSectionQ10 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"EngineerMode\" Then JsonValueSectionI = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionI = SectionStateOccupied Else JsonValueSectionI = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValueSectionF13 = SectionStateRouteSet Or JsonValueSectionF13 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValueSectionQ10 = SectionStateRouteSet Or JsonValueSectionQ10 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateEngineerMode End If Else JsonValueSectionI = SectionStateEngineerMode End If End If ' Section J If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then If ( JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied ) And PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"EngineerMode\" Then JsonValueSectionJ = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionJ = SectionStateOccupied Else JsonValueSectionJ = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied ) And PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateEngineerMode End If Else JsonValueSectionJ = SectionStateEngineerMode End If End If ' Section K If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) And PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"EngineerMode\" Then JsonValueSectionK = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionK = SectionStateOccupied Else JsonValueSectionK = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) And PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateEngineerMode End If Else JsonValueSectionK = SectionStateEngineerMode End If End If ' Section L If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"EngineerMode\" Then JsonValueSectionL = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionL = SectionStateOccupied Else JsonValueSectionL = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateEngineerMode End If Else JsonValueSectionL = SectionStateEngineerMode End If End If ' Section M If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAspectDanger Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"EngineerMode\" Then JsonValueSectionM = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionM = SectionStateOccupied Else JsonValueSectionM = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If ElseIf WestBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAspectDanger Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateEngineerMode End If Else JsonValueSectionM = SectionStateEngineerMode End If End If ' Section N If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAspectDanger ) Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then If JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateOccupied End If Else JsonValueSectionN = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"EngineerMode\" Then JsonValueSectionN = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionN = SectionStateOccupied Else JsonValueSectionN = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAspectDanger Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateEngineerMode End If Else JsonValueSectionN = SectionStateEngineerMode End If End If ' Section NO If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then If ( JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied ) And PointReturns ( PointNames . P14 ) = PointInNormal Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAspectDanger ) Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"EngineerMode\" Then JsonValueSectionNO = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionNO = SectionStateOccupied Else JsonValueSectionNO = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied ) And PointReturns ( PointNames . P14 ) = PointInNormal Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAspectDanger ) Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateEngineerMode End If Else JsonValueSectionNO = SectionStateEngineerMode End If End If ' Section NO14 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True Then If (( Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False ) And PointReturns ( PointNames . P14 ) = PointInReverse Then JsonValueSectionNO14 = SectionStateRouteSet Else JsonValueSectionNO14 = SectionStateUnoccupied End If Else JsonValueSectionNO14 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"EngineerMode\" Then JsonValueSectionNO14 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionNO14 = SectionStateOccupied Else JsonValueSectionNO14 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"UnOccupied\" Then If FlashOn = False Then If (( Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False ) And PointReturns ( PointNames . P14 ) = PointInReverse Then JsonValueSectionNO14 = SectionStateRouteSet Else JsonValueSectionNO14 = SectionStateUnoccupied End If Else JsonValueSectionNO14 = SectionStateEngineerMode End If End If ' Section O If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If Else JsonValueSectionO = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If Else JsonValueSectionO = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"EngineerMode\" Then JsonValueSectionO = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionO = SectionStateOccupied Else JsonValueSectionO = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If End If Else JsonValueSectionO = SectionStateEngineerMode End If Else JsonValueSectionO = SectionStateEngineerMode End If ' Section OP If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAspectDanger ) Then JsonValueSectionOP = SectionStateRouteSet Else JsonValueSectionOP = SectionStateUnoccupied End If Else JsonValueSectionOP = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"EngineerMode\" Then JsonValueSectionOP = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionOP = SectionStateOccupied Else JsonValueSectionOP = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAspectDanger ) Then JsonValueSectionOP = SectionStateRouteSet Else JsonValueSectionOP = SectionStateUnoccupied End If Else JsonValueSectionOP = SectionStateEngineerMode End If Else JsonValueSectionOP = SectionStateEngineerMode End If ' Section P If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"EngineerMode\" Then JsonValueSectionP = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionP = SectionStateOccupied Else JsonValueSectionP = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateEngineerMode End If Else JsonValueSectionP = SectionStateEngineerMode End If End If ' Section Q If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAspectDanger ) Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInNormal Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateOccupied End If Else JsonValueSectionQ = SectionStateUnoccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"EngineerMode\" Then JsonValueSectionQ = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionQ = SectionStateOccupied Else JsonValueSectionQ = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAspectDanger ) Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInNormal Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateEngineerMode End If Else JsonValueSectionQ = SectionStateEngineerMode End If End If ' Section Q10 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAspectDanger ) Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInReverse Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"EngineerMode\" Then JsonValueSectionQ10 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionQ10 = SectionStateOccupied Else JsonValueSectionQ10 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAspectDanger ) Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInReverse Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateEngineerMode End If Else JsonValueSectionQ10 = SectionStateEngineerMode End If End If ' Section R If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateOccupied End If Else JsonValueSectionR = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"EngineerMode\" Then JsonValueSectionR = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionR = SectionStateOccupied Else JsonValueSectionR = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateEngineerMode End If Else JsonValueSectionR = SectionStateEngineerMode End If End If ' Points ------------------------------------------------------------------- ' Point 5 a If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" Or Point5Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P5a ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P5a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Then JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Else If EastBound Then If ( JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionA = SectionStateRouteSet ) Or ( JsonValueSectionA = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P5a ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Then JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Else If EastBound Then If ( JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionK = SectionStateRouteSet ) Or ( JsonValueSectionK = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P5a ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal End If End If End If ' Point 5 b If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" Or Point5Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P5b ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse End If Else If PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Then JsonValuePointState ( PointNames . P5b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionL = SectionStateRouteSet ) Or ( JsonValueSectionL = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionM = SectionStateRouteSet ) Or ( JsonValueSectionM = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If End If ElseIf PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Then JsonValuePointState ( PointNames . P5b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionK = SectionStateRouteSet ) Or ( JsonValueSectionK = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionM = SectionStateRouteSet ) Or ( JsonValueSectionM = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P5b ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal End If End If End If ' Point 6 a If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" Or Point6Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P6a ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Then JsonValuePointState ( PointNames . P6a ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionL = SectionStateRouteSet ) Or ( JsonValueSectionL = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Then JsonValuePointState ( PointNames . P6a ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionJ = SectionStateRouteSet ) Or ( JsonValueSectionJ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P6a ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P6a ) = PointInReverse Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal End If End If End If ' Point 6 b If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" Or Point6Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P6b ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse End If Else If PointReturns ( PointNames . P6b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False Then JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionA = SectionStateRouteSet ) Or ( JsonValueSectionA = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionB = SectionStateRouteSet ) Or ( JsonValueSectionB = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If End If ElseIf PointReturns ( PointNames . P6b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False Then JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionJ = SectionStateRouteSet ) Or ( JsonValueSectionJ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionB = SectionStateRouteSet ) Or ( JsonValueSectionB = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P6b ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal End If End If End If ' Point 10 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" Or Point10Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P10 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P10 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Then JsonValuePointState ( PointNames . P10 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Then JsonValuePointState ( PointNames . P10 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionQ10 = SectionStateRouteSet ) Or ( JsonValueSectionQ10 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P10 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal End If End If End If ' Point 11 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" Or Point11Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P11 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) Or ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionA11 = SectionStateRouteSet ) Or ( JsonValueSectionA11 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P11 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal End If End If End If ' Point 12 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" Or Point12Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P12 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P12 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionF = SectionStateRouteSet ) Or ( JsonValueSectionF = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P12 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionF12 = SectionStateRouteSet ) Or ( JsonValueSectionF12 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P12 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal End If End If End If ' Point 13 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" Or Point13Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P13 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P13 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Then JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionF = SectionStateRouteSet ) Or ( JsonValueSectionF = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P13 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Then JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionF13 = SectionStateRouteSet ) Or ( JsonValueSectionF13 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P13 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal End If End If End If ' Point 14 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" Or Point14Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P14 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P14 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Then JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P14 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Then JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionNO14 = SectionStateRouteSet ) Or ( JsonValueSectionNO14 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P14 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal End If End If End If ' Point 19 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" Or Point19Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P19 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionC = SectionStateRouteSet ) Or ( JsonValueSectionC = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionCD = SectionStateRouteSet ) Or ( JsonValueSectionCD = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionC = SectionStateRouteSet ) Or ( JsonValueSectionC = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionC19 = SectionStateRouteSet ) Or ( JsonValueSectionC19 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P19 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P19 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal End If End If End If ' Requests --------------------------------------------------------------- ' P1 EB If Buttons . ButtonRequest ( ButtonNames . Button1 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button2 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Outer\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button3 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"HeadShunt\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button4 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button5 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Engine Shed\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button6 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Foxhole\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button17 ) And EastBound And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button23 ) And EastBound And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" Else JsonValueRequestP1TRTSE = False JsonValueRequestP1TRTSEText = \"\" End If ' P2 EB If Buttons . ButtonRequest ( ButtonNames . Button10 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button11 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Outer\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button12 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button13 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Engine Shed\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button14 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"FoxHole\" Else JsonValueRequestP2TRTSE = False JsonValueRequestP2TRTSEText = \"\" End If ' P1 WB If Buttons . ButtonRequest ( ButtonNames . Button7 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button8 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"TurnTable\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button17 ) And WestBound And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button23 ) And WestBound And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" Else JsonValueRequestP1TRTSW = False JsonValueRequestP1TRTSWText = \"\" End If ' P2 WB If Buttons . ButtonRequest ( ButtonNames . Button15 ) And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then JsonValueRequestP2TRTSW = True JsonValueRequestP2TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button16 ) And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then JsonValueRequestP2TRTSW = True JsonValueRequestP2TRTSWText = \"Extension\" Else JsonValueRequestP2TRTSW = False JsonValueRequestP2TRTSWText = \"\" End If ' HeadShunt If Buttons . ButtonRequest ( ButtonNames . Button21 ) And FlashOn Then JsonValueRequestS11 = True Else JsonValueRequestS11 = False End If ' Turntable If Buttons . ButtonRequest ( ButtonNames . Button20 ) And FlashOn Then JsonValueRequestS12 = True Else JsonValueRequestS12 = False End If ' FoxHole If Buttons . ButtonRequest ( ButtonNames . Button22 ) And FlashOn Then JsonValueRequestS14 = True Else JsonValueRequestS14 = False End If ' HeadShunt If Buttons . ButtonRequest ( ButtonNames . Button19 ) And FlashOn Then JsonValueRequestS19 = True Else JsonValueRequestS19 = False End If ' Large TRTS If RuntimeConfig . config . Mode = \"Manual\" Then If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button1 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Inner\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button2 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Outer\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button3 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:HeadShunt\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button4 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button5 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:EngineShed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button6 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:FoxHole\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button7 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Tunnel\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button8 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button9 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Turntable\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button10 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Inner\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button11 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Outer\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button12 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button13 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:EngineShed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button14 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:FoxHole\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button15 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Tunnel\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button16 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P2:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button17 )) = 1 Then ' JsonValueRequestText = \"TRTS Request - Westend P1:Centre platform\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button18 )) = 1 Then ' JsonValueRequestText = \"TRTS Request - Westend P2:Centre platform\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button19 )) = 1 Then JsonValueRequestText = \"TRTS Request - Engine Shed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button20 )) = 1 Then JsonValueRequestText = \"TRTS Request - TurnTable\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button21 )) = 1 Then JsonValueRequestText = \"TRTS Request - HeadShunt\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button22 )) = 1 Then JsonValueRequestText = \"TRTS Request - Foxhole\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueRequestText = \"AJ4E Call in P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueRequestText = \"AJ4E Call in P2\" Else JsonValueRequestText = \"\" End If Else JsonValueRequestText = \"\" End If ' CallIn ------------------------------------------------------------------- If Buttons . ButtonRequest ( ButtonNames . Button25 ) = False And EastBound = True Then JsonValueCallInAJ4EState = True Else JsonValueCallInAJ4EState = False End If If Buttons . ButtonRequest ( ButtonNames . Button25 ) = False And WestBound = True Then JsonValueCallInAJ18WState = True Else JsonValueCallInAJ18WState = False End If If EastBound = True Then JsonValueCallInAJ18WText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ4EText = \"Waiting for selection to be made\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueCallInAJ4EText = \"P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ4EText = \"P2\" Else JsonValueCallInAJ4EText = \"\" End If ElseIf WestBound = True Then JsonValueCallInAJ4EText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ18WText = \"Waiting for selection to be made\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueCallInAJ18WText = \"P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ18WText = \"P2\" Else JsonValueCallInAJ18WText = \"\" End If End If ' Direction --------------------------------------------------------------- If EastBound = True Then JsonValueDirection = \"Eastbound\" ElseIf WestBound = True Then JsonValueDirection = \"Westbound\" Else JsonValueDirection = \"Unknown\" End If If Mode = LogicModeComputer Then JsonValuelogic = \"Computer\" ElseIf Mode = LogicModeManual Then JsonValuelogic = \"Manual\" Else JsonValuelogic = \"Unknown\" End If End Sub ' Flash Public Sub Flash () FlashOn = Not FlashOn End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Web/Json Values.vb"},{"location":"mainsystem/Files/Json_01Values_8vb/#githubsignallingsystemehmr-signalling-systemwebjson-valuesvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Web/Json Values.vb"},{"location":"mainsystem/Files/Json_01Values_8vb/#source-code","text":"Module Json_Values ' Flash toggle Public FlashOn As Boolean = False ' Sections ReadOnly SectionStateOccupied As String = \"Occupied\" ReadOnly SectionStateUnoccupied As String = \"Unoccupied\" ReadOnly SectionStateRouteSet As String = \"Route\" ReadOnly SectionStateEngineerMode As String = \"Engineer\" ' Points ReadOnly PointPositionStateNormal As String = \"Normal\" ReadOnly PointPositionStateReverse As String = \"Reverse\" ReadOnly PointPositionStateUnknown As String = \"Unknown\" ReadOnly PointStateOccupied As String = \"Occupied\" ReadOnly PointStateUnoccupied As String = \"Unoccupied\" ReadOnly PointStateRouteSet As String = \"Route\" ReadOnly PointStateEngineerMode As String = \"Engineer\" ' Signals ReadOnly SignalAspectClear As String = \"Clear\" ReadOnly SignalAspectCaution As String = \"Caution\" ReadOnly SignalAspectDanger As String = \"Danger\" ReadOnly SignalAspectEngineer As String = \"Engineer\" ' Sections Public JsonValueSectionA As String = SectionStateEngineerMode Public JsonValueSectionA11 As String = SectionStateEngineerMode Public JsonValueSectionB As String = SectionStateEngineerMode Public JsonValueSectionC As String = SectionStateEngineerMode Public JsonValueSectionC19 As String = SectionStateEngineerMode Public JsonValueSectionCD As String = SectionStateEngineerMode Public JsonValueSectionD As String = SectionStateEngineerMode Public JsonValueSectionDE As String = SectionStateEngineerMode Public JsonValueSectionE As String = SectionStateEngineerMode Public JsonValueSectionF As String = SectionStateEngineerMode Public JsonValueSectionF12 As String = SectionStateEngineerMode Public JsonValueSectionF13 As String = SectionStateEngineerMode Public JsonValueSectionG As String = SectionStateEngineerMode Public JsonValueSectionH As String = SectionStateEngineerMode Public JsonValueSectionI As String = SectionStateEngineerMode Public JsonValueSectionJ As String = SectionStateEngineerMode Public JsonValueSectionK As String = SectionStateEngineerMode Public JsonValueSectionL As String = SectionStateEngineerMode Public JsonValueSectionM As String = SectionStateEngineerMode Public JsonValueSectionN As String = SectionStateEngineerMode Public JsonValueSectionNO As String = SectionStateEngineerMode Public JsonValueSectionNO14 As String = SectionStateEngineerMode Public JsonValueSectionO As String = SectionStateEngineerMode Public JsonValueSectionOP As String = SectionStateEngineerMode Public JsonValueSectionP As String = SectionStateEngineerMode Public JsonValueSectionQ As String = SectionStateEngineerMode Public JsonValueSectionQ10 As String = SectionStateEngineerMode Public JsonValueSectionR As String = SectionStateEngineerMode ' Points Public JsonValuePointState () As String = { PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal , PointPositionStateNormal } Public JsonValuePointRoute () As String = { PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode , PointStateEngineerMode } ' requests Public JsonValueRequestS11 As Boolean = False Public JsonValueRequestS12 As Boolean = False Public JsonValueRequestS14 As Boolean = False Public JsonValueRequestS19 As Boolean = False Public JsonValueRequestP1TRTSE As Boolean = False Public JsonValueRequestP1TRTSW As Boolean = False Public JsonValueRequestP2TRTSE As Boolean = False Public JsonValueRequestP2TRTSW As Boolean = False Public JsonValueRequestP1TRTSEText As String = \"\" Public JsonValueRequestP1TRTSWText As String = \"\" Public JsonValueRequestP2TRTSEText As String = \"\" Public JsonValueRequestP2TRTSWText As String = \"\" Public JsonValueRequestText As String = False ' Callin Public JsonValueCallInAJ4EState As Boolean = False Public JsonValueCallInAJ18WState As Boolean = False Public JsonValueCallInAJ4EText As String = False Public JsonValueCallInAJ18WText As String = False ' info Public JsonValueDirection As String = \"\" Public JsonValuelogic As String = \"\" Public Sub CheckValues () ' Section A If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then If Points . PointReturns ( PointNames . P6b ) = PointInNormal Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"EngineerMode\" Then JsonValueSectionA = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionA = SectionStateOccupied Else JsonValueSectionA = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Points . PointReturns ( PointNames . P5a ) = PointInNormal Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf WestBound = True Then If Points . PointReturns ( PointNames . P6b ) = PointInNormal Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionA = SectionStateRouteSet Else JsonValueSectionA = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionA = SectionStateUnoccupied Else JsonValueSectionA = SectionStateUnoccupied End If Else JsonValueSectionA = SectionStateEngineerMode End If Else JsonValueSectionA = SectionStateEngineerMode End If End If ' Section A11 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True Then If Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValueSectionA11 = SectionStateRouteSet Else JsonValueSectionA11 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValueSectionA11 = SectionStateUnoccupied End If Else JsonValueSectionA11 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"EngineerMode\" Then JsonValueSectionA11 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionA11 = SectionStateOccupied Else JsonValueSectionA11 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA11 ) = \"UnOccupied\" Then If FlashOn = False Then If Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValueSectionA11 = SectionStateRouteSet Else JsonValueSectionA11 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValueSectionA11 = SectionStateUnoccupied End If Else JsonValueSectionA11 = SectionStateEngineerMode End If End If ' Section B If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAspectDanger ) Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateOccupied End If Else JsonValueSectionB = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"EngineerMode\" Then JsonValueSectionB = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionB = SectionStateOccupied Else JsonValueSectionB = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAspectDanger ) Then JsonValueSectionB = SectionStateRouteSet Else JsonValueSectionB = SectionStateUnoccupied End If Else JsonValueSectionB = SectionStateEngineerMode End If Else JsonValueSectionB = SectionStateEngineerMode End If End If ' Section C If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ) Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If Else JsonValueSectionC = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then JsonValueSectionC = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"EngineerMode\" Then JsonValueSectionC = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionC = SectionStateOccupied Else JsonValueSectionC = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ) Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Then JsonValueSectionC = SectionStateRouteSet Else JsonValueSectionC = SectionStateUnoccupied End If Else JsonValueSectionC = SectionStateEngineerMode End If Else JsonValueSectionC = SectionStateEngineerMode End If End If ' Section C19 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True Then If Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValueSectionC19 = SectionStateRouteSet Else JsonValueSectionC19 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValueSectionC19 = SectionStateUnoccupied End If Else JsonValueSectionC19 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"EngineerMode\" Then JsonValueSectionC19 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionC19 = SectionStateOccupied Else JsonValueSectionC19 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC19 ) = \"UnOccupied\" Then If FlashOn = False Then If Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValueSectionC19 = SectionStateRouteSet Else JsonValueSectionC19 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValueSectionC19 = SectionStateUnoccupied End If Else JsonValueSectionC19 = SectionStateEngineerMode End If End If ' Section CD If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAspectDanger ) Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"EngineerMode\" Then JsonValueSectionCD = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionCD = SectionStateOccupied Else JsonValueSectionCD = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionCD ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P19 ) = PointStateOccupied And Points . PointReturns ( PointNames . P19 ) = PointInNormal Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAspectDanger ) Then JsonValueSectionCD = SectionStateRouteSet Else JsonValueSectionCD = SectionStateUnoccupied End If Else JsonValueSectionCD = SectionStateEngineerMode End If Else JsonValueSectionCD = SectionStateEngineerMode End If End If ' Section D If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAspectDanger ) Then JsonValueSectionD = SectionStateRouteSet Else JsonValueSectionD = SectionStateUnoccupied End If Else JsonValueSectionD = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"EngineerMode\" Then JsonValueSectionD = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionD = SectionStateOccupied Else JsonValueSectionD = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAspectDanger ) Then JsonValueSectionD = SectionStateRouteSet Else JsonValueSectionD = SectionStateUnoccupied End If Else JsonValueSectionD = SectionStateEngineerMode End If Else JsonValueSectionD = SectionStateEngineerMode End If ' Section DE If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = True Then If ( JsonValueSectionD = SectionStateRouteSet ) Or ( JsonValueSectionD = SectionStateOccupied ) Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If Else JsonValueSectionDE = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = True Then If ( JsonValueSectionE = SectionStateRouteSet ) Or ( JsonValueSectionE = SectionStateOccupied ) Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If Else JsonValueSectionDE = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"EngineerMode\" Then JsonValueSectionDE = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionDE = SectionStateOccupied Else JsonValueSectionDE = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionDE ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValueSectionD = SectionStateRouteSet Or JsonValueSectionD = SectionStateOccupied Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValueSectionE = SectionStateRouteSet Or JsonValueSectionE = SectionStateOccupied Then JsonValueSectionDE = SectionStateRouteSet Else JsonValueSectionDE = SectionStateUnoccupied End If End If Else JsonValueSectionDE = SectionStateEngineerMode End If Else JsonValueSectionDE = SectionStateEngineerMode End If ' Section E If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAspectDanger ) Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If Else JsonValueSectionE = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True Then If JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If Else JsonValueSectionE = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"EngineerMode\" Then JsonValueSectionE = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionE = SectionStateOccupied Else JsonValueSectionE = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAspectDanger Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Then JsonValueSectionE = SectionStateRouteSet Else JsonValueSectionE = SectionStateUnoccupied End If End If Else JsonValueSectionE = SectionStateEngineerMode End If Else JsonValueSectionE = SectionStateEngineerMode End If ' Section F If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If Else JsonValueSectionF = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then If ( JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If Else JsonValueSectionF = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"EngineerMode\" Then JsonValueSectionF = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF = SectionStateOccupied Else JsonValueSectionF = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P12 ) = PointInNormal Then JsonValueSectionF = SectionStateRouteSet Else JsonValueSectionF = SectionStateUnoccupied End If End If Else JsonValueSectionF = SectionStateEngineerMode End If Else JsonValueSectionF = SectionStateEngineerMode End If ' Section F12 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True Then If Points . PointReturns ( PointNames . P12 ) = \"Reverse\" Then If ( Not SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValueSectionF12 = SectionStateRouteSet Else JsonValueSectionF12 = SectionStateUnoccupied End If ElseIf Points . PointReturns ( PointNames . P12 ) = \"Normal\" Then JsonValueSectionF12 = SectionStateUnoccupied End If Else JsonValueSectionF12 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"EngineerMode\" Then JsonValueSectionF12 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF12 = SectionStateOccupied Else JsonValueSectionF12 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF12 ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValueSectionF12 = SectionStateRouteSet Else JsonValueSectionF12 = SectionStateUnoccupied End If Else JsonValueSectionF12 = SectionStateEngineerMode End If Else JsonValueSectionF12 = SectionStateEngineerMode End If ' Section F13 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then If (( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet ) Or ( JsonValuePointState ( PointNames . P13 ) = PointStateOccupied )) And Points . PointReturns ( PointNames . P13 ) = PointInReverse Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If Else JsonValueSectionF13 = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAspectDanger ) Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If Else JsonValueSectionF13 = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"EngineerMode\" Then JsonValueSectionF13 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionF13 = SectionStateOccupied Else JsonValueSectionF13 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P13 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P13 ) = PointInReverse Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAspectDanger ) Then JsonValueSectionF13 = SectionStateRouteSet Else JsonValueSectionF13 = SectionStateUnoccupied End If End If Else JsonValueSectionF13 = SectionStateEngineerMode End If Else JsonValueSectionF13 = SectionStateEngineerMode End If ' Section G If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then If JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If Else JsonValueSectionG = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAspectDanger Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If Else JsonValueSectionG = SectionStateOccupied End If Else JsonValueSectionG = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"EngineerMode\" Then JsonValueSectionG = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionG = SectionStateOccupied Else JsonValueSectionG = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If ElseIf WestBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAspectDanger Then JsonValueSectionG = SectionStateRouteSet Else JsonValueSectionG = SectionStateUnoccupied End If End If Else JsonValueSectionG = SectionStateEngineerMode End If Else JsonValueSectionG = SectionStateEngineerMode End If ' Section H If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAspectDanger ) Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If Else JsonValueSectionH = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then If JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If Else JsonValueSectionH = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"EngineerMode\" Then JsonValueSectionH = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionH = SectionStateOccupied Else JsonValueSectionH = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAspectDanger ) Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Then JsonValueSectionH = SectionStateRouteSet Else JsonValueSectionH = SectionStateUnoccupied End If End If Else JsonValueSectionH = SectionStateEngineerMode End If Else JsonValueSectionH = SectionStateEngineerMode End If ' Section I If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then If JsonValueSectionF13 = SectionStateRouteSet Or JsonValueSectionF13 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then If JsonValueSectionQ10 = SectionStateRouteSet Or JsonValueSectionQ10 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"EngineerMode\" Then JsonValueSectionI = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionI = SectionStateOccupied Else JsonValueSectionI = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValueSectionF13 = SectionStateRouteSet Or JsonValueSectionF13 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValueSectionQ10 = SectionStateRouteSet Or JsonValueSectionQ10 = SectionStateOccupied Then JsonValueSectionI = SectionStateRouteSet Else JsonValueSectionI = SectionStateUnoccupied End If Else JsonValueSectionI = SectionStateEngineerMode End If Else JsonValueSectionI = SectionStateEngineerMode End If End If ' Section J If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then If ( JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied ) And PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"EngineerMode\" Then JsonValueSectionJ = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionJ = SectionStateOccupied Else JsonValueSectionJ = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6b ) = PointStateOccupied ) And PointReturns ( PointNames . P6b ) = PointInReverse Then JsonValueSectionJ = SectionStateRouteSet Else JsonValueSectionJ = SectionStateUnoccupied End If Else JsonValueSectionJ = SectionStateEngineerMode End If Else JsonValueSectionJ = SectionStateEngineerMode End If End If ' Section K If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) And PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"EngineerMode\" Then JsonValueSectionK = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionK = SectionStateOccupied Else JsonValueSectionK = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) And PointReturns ( PointNames . P5a ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValueSectionK = SectionStateRouteSet Else JsonValueSectionK = SectionStateUnoccupied End If Else JsonValueSectionK = SectionStateEngineerMode End If Else JsonValueSectionK = SectionStateEngineerMode End If End If ' Section L If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"EngineerMode\" Then JsonValueSectionL = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionL = SectionStateOccupied Else JsonValueSectionL = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) And PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5b ) = PointStateOccupied ) And PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValueSectionL = SectionStateRouteSet Else JsonValueSectionL = SectionStateUnoccupied End If Else JsonValueSectionL = SectionStateEngineerMode End If Else JsonValueSectionL = SectionStateEngineerMode End If End If ' Section M If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAspectDanger Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"EngineerMode\" Then JsonValueSectionM = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionM = SectionStateOccupied Else JsonValueSectionM = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If ElseIf WestBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAspectDanger Then JsonValueSectionM = SectionStateRouteSet Else JsonValueSectionM = SectionStateUnoccupied End If Else JsonValueSectionM = SectionStateEngineerMode End If Else JsonValueSectionM = SectionStateEngineerMode End If End If ' Section N If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAspectDanger ) Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then If JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateOccupied End If Else JsonValueSectionN = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"EngineerMode\" Then JsonValueSectionN = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionN = SectionStateOccupied Else JsonValueSectionN = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If Not SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAspectDanger Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If ElseIf WestBound = True Then If JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Then JsonValueSectionN = SectionStateRouteSet Else JsonValueSectionN = SectionStateUnoccupied End If Else JsonValueSectionN = SectionStateEngineerMode End If Else JsonValueSectionN = SectionStateEngineerMode End If End If ' Section NO If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then If ( JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied ) And PointReturns ( PointNames . P14 ) = PointInNormal Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAspectDanger ) Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"EngineerMode\" Then JsonValueSectionNO = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionNO = SectionStateOccupied Else JsonValueSectionNO = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P14 ) = PointStateOccupied ) And PointReturns ( PointNames . P14 ) = PointInNormal Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAspectDanger ) Then JsonValueSectionNO = SectionStateRouteSet Else JsonValueSectionNO = SectionStateUnoccupied End If Else JsonValueSectionNO = SectionStateEngineerMode End If Else JsonValueSectionNO = SectionStateEngineerMode End If End If ' Section NO14 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True Then If (( Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False ) And PointReturns ( PointNames . P14 ) = PointInReverse Then JsonValueSectionNO14 = SectionStateRouteSet Else JsonValueSectionNO14 = SectionStateUnoccupied End If Else JsonValueSectionNO14 = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"EngineerMode\" Then JsonValueSectionNO14 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionNO14 = SectionStateOccupied Else JsonValueSectionNO14 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionNO14 ) = \"UnOccupied\" Then If FlashOn = False Then If (( Not SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAspectDanger ) Or PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False ) And PointReturns ( PointNames . P14 ) = PointInReverse Then JsonValueSectionNO14 = SectionStateRouteSet Else JsonValueSectionNO14 = SectionStateUnoccupied End If Else JsonValueSectionNO14 = SectionStateEngineerMode End If End If ' Section O If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If Else JsonValueSectionO = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If Else JsonValueSectionO = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"EngineerMode\" Then JsonValueSectionO = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionO = SectionStateOccupied Else JsonValueSectionO = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionO = SectionStateRouteSet Else JsonValueSectionO = SectionStateUnoccupied End If End If Else JsonValueSectionO = SectionStateEngineerMode End If Else JsonValueSectionO = SectionStateEngineerMode End If ' Section OP If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAspectDanger ) Then JsonValueSectionOP = SectionStateRouteSet Else JsonValueSectionOP = SectionStateUnoccupied End If Else JsonValueSectionOP = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"EngineerMode\" Then JsonValueSectionOP = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionOP = SectionStateOccupied Else JsonValueSectionOP = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . Sectionop ) = \"UnOccupied\" Then If FlashOn = False Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAspectDanger ) Or ( Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAspectDanger ) Then JsonValueSectionOP = SectionStateRouteSet Else JsonValueSectionOP = SectionStateUnoccupied End If Else JsonValueSectionOP = SectionStateEngineerMode End If Else JsonValueSectionOP = SectionStateEngineerMode End If ' Section P If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"EngineerMode\" Then JsonValueSectionP = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionP = SectionStateOccupied Else JsonValueSectionP = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValueSectionOP = SectionStateRouteSet ) Or ( JsonValueSectionOP = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValueSectionP = SectionStateRouteSet Else JsonValueSectionP = SectionStateUnoccupied End If Else JsonValueSectionP = SectionStateEngineerMode End If Else JsonValueSectionP = SectionStateEngineerMode End If End If ' Section Q If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAspectDanger ) Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInNormal Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateOccupied End If Else JsonValueSectionQ = SectionStateUnoccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"EngineerMode\" Then JsonValueSectionQ = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionQ = SectionStateOccupied Else JsonValueSectionQ = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAspectDanger ) Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInNormal Then JsonValueSectionQ = SectionStateRouteSet Else JsonValueSectionQ = SectionStateUnoccupied End If Else JsonValueSectionQ = SectionStateEngineerMode End If Else JsonValueSectionQ = SectionStateEngineerMode End If End If ' Section Q10 If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAspectDanger ) Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInReverse Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateOccupied End If End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"EngineerMode\" Then JsonValueSectionQ10 = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionQ10 = SectionStateOccupied Else JsonValueSectionQ10 = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ10 ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAspectDanger ) Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) And PointReturns ( PointNames . P10 ) = PointInReverse Then JsonValueSectionQ10 = SectionStateRouteSet Else JsonValueSectionQ10 = SectionStateUnoccupied End If Else JsonValueSectionQ10 = SectionStateEngineerMode End If Else JsonValueSectionQ10 = SectionStateEngineerMode End If End If ' Section R If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"Detect\" Then If EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateOccupied End If ElseIf WestBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateOccupied End If Else JsonValueSectionR = SectionStateOccupied End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"EngineerMode\" Then JsonValueSectionR = SectionStateEngineerMode ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"Occupied\" Then If FlashOn = False Then JsonValueSectionR = SectionStateOccupied Else JsonValueSectionR = SectionStateEngineerMode End If ElseIf RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionR ) = \"UnOccupied\" Then If FlashOn = False Then If EastBound = True Then If ( JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P10 ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If ElseIf WestBound = True Then If ( JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P6a ) = PointStateOccupied ) Then JsonValueSectionR = SectionStateRouteSet Else JsonValueSectionR = SectionStateUnoccupied End If Else JsonValueSectionR = SectionStateEngineerMode End If Else JsonValueSectionR = SectionStateEngineerMode End If End If ' Points ------------------------------------------------------------------- ' Point 5 a If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" Or Point5Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P5a ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P5a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Then JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Else If EastBound Then If ( JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionA = SectionStateRouteSet ) Or ( JsonValueSectionA = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P5a ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False Then JsonValuePointState ( PointNames . P5a ) = PointStateOccupied Else If EastBound Then If ( JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Or JsonValuePointState ( PointNames . P11 ) = PointStateOccupied ) And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionK = SectionStateRouteSet ) Or ( JsonValueSectionK = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5a ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P5a ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P5a ) = PointPositionStateNormal End If End If End If ' Point 5 b If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" Or Point5Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P5b ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse End If Else If PointReturns ( PointNames . P5b ) = PointInNormal Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Then JsonValuePointState ( PointNames . P5b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionL = SectionStateRouteSet ) Or ( JsonValueSectionL = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionM = SectionStateRouteSet ) Or ( JsonValueSectionM = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If End If ElseIf PointReturns ( PointNames . P5b ) = PointInReverse Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = False Then JsonValuePointState ( PointNames . P5b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionK = SectionStateRouteSet ) Or ( JsonValueSectionK = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionM = SectionStateRouteSet ) Or ( JsonValueSectionM = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P5b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P5b ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P5b ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P5b ) = PointPositionStateNormal End If End If End If ' Point 6 a If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" Or Point6Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P6a ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P6a ) = PointInNormal Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Then JsonValuePointState ( PointNames . P6a ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionL = SectionStateRouteSet ) Or ( JsonValueSectionL = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P6a ) = PointInReverse Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False Then JsonValuePointState ( PointNames . P6a ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionJ = SectionStateRouteSet ) Or ( JsonValueSectionJ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6a ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6a ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P6a ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P6a ) = PointInReverse Then JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P6a ) = PointPositionStateNormal End If End If End If ' Point 6 b If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" Or Point6Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P6b ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse End If Else If PointReturns ( PointNames . P6b ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False Then JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionA = SectionStateRouteSet ) Or ( JsonValueSectionA = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionB = SectionStateRouteSet ) Or ( JsonValueSectionB = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If End If ElseIf PointReturns ( PointNames . P6b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = False Then JsonValuePointState ( PointNames . P6b ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionJ = SectionStateRouteSet ) Or ( JsonValueSectionJ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionB = SectionStateRouteSet ) Or ( JsonValueSectionB = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P6b ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P6b ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P6b ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P6b ) = PointPositionStateNormal End If End If End If ' Point 10 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" Or Point10Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P10 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P10 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Then JsonValuePointState ( PointNames . P10 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionQ = SectionStateRouteSet ) Or ( JsonValueSectionQ = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = False Then JsonValuePointState ( PointNames . P10 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionQ10 = SectionStateRouteSet ) Or ( JsonValueSectionQ10 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionR = SectionStateRouteSet ) Or ( JsonValueSectionR = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P10 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P10 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P10 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P10 ) = PointPositionStateNormal End If End If End If ' Point 11 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" Or Point11Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P11 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P11 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValuePointState ( PointNames . P5a ) = PointStateOccupied ) Or ( JsonValuePointState ( PointNames . P5a ) = PointStateRouteSet ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P11 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False Then JsonValuePointState ( PointNames . P11 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionA11 = SectionStateRouteSet ) Or ( JsonValueSectionA11 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P11 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P11 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P11 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P11 ) = PointPositionStateNormal End If End If End If ' Point 12 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" Or Point12Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P12 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P12 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionF = SectionStateRouteSet ) Or ( JsonValueSectionF = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P12 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = False Then JsonValuePointState ( PointNames . P12 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionF12 = SectionStateRouteSet ) Or ( JsonValueSectionF12 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P12 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P12 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P12 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P12 ) = PointPositionStateNormal End If End If End If ' Point 13 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" Or Point13Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P13 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P13 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Then JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionF = SectionStateRouteSet ) Or ( JsonValueSectionF = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P13 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = False Then JsonValuePointState ( PointNames . P13 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionF13 = SectionStateRouteSet ) Or ( JsonValueSectionF13 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P13 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P13 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P13 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P13 ) = PointPositionStateNormal End If End If End If ' Point 14 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" Or Point14Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P14 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P14 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Then JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionNO = SectionStateRouteSet ) Or ( JsonValueSectionNO = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P14 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = False Then JsonValuePointState ( PointNames . P14 ) = PointStateOccupied Else If EastBound Then If ( Not SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAspectDanger ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionNO14 = SectionStateRouteSet ) Or ( JsonValueSectionNO14 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P14 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P14 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P14 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P14 ) = PointPositionStateNormal End If End If End If ' Point 19 If ( Not RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" Or Not RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" Or Point19Initiated = False ) And FlashOn = False Then JsonValuePointState ( PointNames . P19 ) = PointStateEngineerMode If RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal Else JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse End If Else If Points . PointReturns ( PointNames . P19 ) = \"Normal\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal If PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionC = SectionStateRouteSet ) Or ( JsonValueSectionC = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionCD = SectionStateRouteSet ) Or ( JsonValueSectionCD = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If End If ElseIf Points . PointReturns ( PointNames . P19 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse If PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = False Then JsonValuePointState ( PointNames . P19 ) = PointStateOccupied Else If EastBound Then If ( JsonValueSectionC = SectionStateRouteSet ) Or ( JsonValueSectionC = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If ElseIf WestBound Then If ( JsonValueSectionC19 = SectionStateRouteSet ) Or ( JsonValueSectionC19 = SectionStateOccupied ) Then JsonValuePointState ( PointNames . P19 ) = PointStateRouteSet Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If Else JsonValuePointState ( PointNames . P19 ) = PointStateUnoccupied End If End If Else JsonValuePointState ( PointNames . P19 ) = PointStateEngineerMode If Points . PointRequestedOutputs ( PointNames . P19 ) = \"Reverse\" Then JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateReverse Else JsonValuePointRoute ( PointNames . P19 ) = PointPositionStateNormal End If End If End If ' Requests --------------------------------------------------------------- ' P1 EB If Buttons . ButtonRequest ( ButtonNames . Button1 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button2 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Outer\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button3 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"HeadShunt\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button4 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button5 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Engine Shed\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button6 ) And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Foxhole\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button17 ) And EastBound And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button23 ) And EastBound And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger Then JsonValueRequestP1TRTSE = True JsonValueRequestP1TRTSEText = \"Inner\" Else JsonValueRequestP1TRTSE = False JsonValueRequestP1TRTSEText = \"\" End If ' P2 EB If Buttons . ButtonRequest ( ButtonNames . Button10 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Inner\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button11 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Outer\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button12 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button13 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"Engine Shed\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button14 ) And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger Then JsonValueRequestP2TRTSE = True JsonValueRequestP2TRTSEText = \"FoxHole\" Else JsonValueRequestP2TRTSE = False JsonValueRequestP2TRTSEText = \"\" End If ' P1 WB If Buttons . ButtonRequest ( ButtonNames . Button7 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button8 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Extension\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"TurnTable\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button17 ) And WestBound And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button23 ) And WestBound And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then JsonValueRequestP1TRTSW = True JsonValueRequestP1TRTSWText = \"Tunnel\" Else JsonValueRequestP1TRTSW = False JsonValueRequestP1TRTSWText = \"\" End If ' P2 WB If Buttons . ButtonRequest ( ButtonNames . Button15 ) And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then JsonValueRequestP2TRTSW = True JsonValueRequestP2TRTSWText = \"Tunnel\" ElseIf Buttons . ButtonRequest ( ButtonNames . Button16 ) And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then JsonValueRequestP2TRTSW = True JsonValueRequestP2TRTSWText = \"Extension\" Else JsonValueRequestP2TRTSW = False JsonValueRequestP2TRTSWText = \"\" End If ' HeadShunt If Buttons . ButtonRequest ( ButtonNames . Button21 ) And FlashOn Then JsonValueRequestS11 = True Else JsonValueRequestS11 = False End If ' Turntable If Buttons . ButtonRequest ( ButtonNames . Button20 ) And FlashOn Then JsonValueRequestS12 = True Else JsonValueRequestS12 = False End If ' FoxHole If Buttons . ButtonRequest ( ButtonNames . Button22 ) And FlashOn Then JsonValueRequestS14 = True Else JsonValueRequestS14 = False End If ' HeadShunt If Buttons . ButtonRequest ( ButtonNames . Button19 ) And FlashOn Then JsonValueRequestS19 = True Else JsonValueRequestS19 = False End If ' Large TRTS If RuntimeConfig . config . Mode = \"Manual\" Then If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button1 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Inner\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button2 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Outer\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button3 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:HeadShunt\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button4 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button5 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:EngineShed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button6 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P1:FoxHole\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button7 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Tunnel\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button8 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button9 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P1:Turntable\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button10 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Inner\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button11 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Outer\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button12 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button13 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:EngineShed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button14 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:FoxHole\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button15 )) = 1 Then JsonValueRequestText = \"TRTS Request - Eastend P2:Tunnel\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button16 )) = 1 Then JsonValueRequestText = \"TRTS Request - Westend P2:Extention\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button17 )) = 1 Then ' JsonValueRequestText = \"TRTS Request - Westend P1:Centre platform\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button18 )) = 1 Then ' JsonValueRequestText = \"TRTS Request - Westend P2:Centre platform\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button19 )) = 1 Then JsonValueRequestText = \"TRTS Request - Engine Shed\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button20 )) = 1 Then JsonValueRequestText = \"TRTS Request - TurnTable\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button21 )) = 1 Then JsonValueRequestText = \"TRTS Request - HeadShunt\" ElseIf Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressButtonIndicator ( ButtonNames . Button22 )) = 1 Then JsonValueRequestText = \"TRTS Request - Foxhole\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueRequestText = \"AJ4E Call in P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueRequestText = \"AJ4E Call in P2\" Else JsonValueRequestText = \"\" End If Else JsonValueRequestText = \"\" End If ' CallIn ------------------------------------------------------------------- If Buttons . ButtonRequest ( ButtonNames . Button25 ) = False And EastBound = True Then JsonValueCallInAJ4EState = True Else JsonValueCallInAJ4EState = False End If If Buttons . ButtonRequest ( ButtonNames . Button25 ) = False And WestBound = True Then JsonValueCallInAJ18WState = True Else JsonValueCallInAJ18WState = False End If If EastBound = True Then JsonValueCallInAJ18WText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ4EText = \"Waiting for selection to be made\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueCallInAJ4EText = \"P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ4EText = \"P2\" Else JsonValueCallInAJ4EText = \"\" End If ElseIf WestBound = True Then JsonValueCallInAJ4EText = \"\" If Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True And Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ18WText = \"Waiting for selection to be made\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button26 ) = True Then JsonValueCallInAJ18WText = \"P1\" ElseIf Buttons . ButtonIndicatorLight ( ButtonNames . Button27 ) = True Then JsonValueCallInAJ18WText = \"P2\" Else JsonValueCallInAJ18WText = \"\" End If End If ' Direction --------------------------------------------------------------- If EastBound = True Then JsonValueDirection = \"Eastbound\" ElseIf WestBound = True Then JsonValueDirection = \"Westbound\" Else JsonValueDirection = \"Unknown\" End If If Mode = LogicModeComputer Then JsonValuelogic = \"Computer\" ElseIf Mode = LogicModeManual Then JsonValuelogic = \"Manual\" Else JsonValuelogic = \"Unknown\" End If End Sub ' Flash Public Sub Flash () FlashOn = Not FlashOn End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Levers_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Levers.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Levers Public ReadOnly LeverCount As Integer = 24 Public Lever () As String = { \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" } Public LeverFrameState () As String = { \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" } Public LeverLock () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public LeverlockState () As String = { \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" } Public LeverRestroke () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } ' Logic start Public Sub LeversLogic () For i As Integer = 0 To LeverCount - 1 ' Check for error If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 And DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then NewError ( LeverReadingBothWays ( i )) Else RemoveError ( LeverReadingBothWays ( i )) End If ' Lever Read If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 Then LeverFrameState ( i ) = \"Normal\" ElseIf DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then LeverFrameState ( i ) = \"Reverse\" Else LeverFrameState ( i ) = \"Unknown\" End If If RuntimeConfig . config . LeverState ( i ) = \"System\" Then If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 Then Lever ( i ) = \"Normal\" ElseIf DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then Lever ( i ) = \"Reverse\" Else Lever ( i ) = \"Unknown\" End If ElseIf RuntimeConfig . config . LeverState ( i ) = \"Normal\" Then Lever ( i ) = \"Normal\" ElseIf RuntimeConfig . config . LeverState ( i ) = \"Reverse\" Then Lever ( i ) = \"Reverse\" ElseIf RuntimeConfig . config . LeverState ( i ) = \"Unknown\" Then Lever ( i ) = \"Unknown\" End If ' Lever Lock If ReleaseLevers = True Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else If RuntimeConfig . config . LeverLock ( i ) = \"System\" Then If LeverLock ( i ) = True Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 0 LeverlockState ( i ) = \"Locked\" ElseIf LeverLock ( i ) = False Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else LeverlockState ( i ) = \"Code Error\" End If Else If RuntimeConfig . config . LeverLock ( i ) = \"Lock\" Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 0 LeverlockState ( i ) = \"Locked\" ElseIf RuntimeConfig . config . LeverLock ( i ) = \"Release\" Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else LeverlockState ( i ) = \"Code Error\" End If End If End If Next End Sub ' Second timer countdown Public Sub SecondTick () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Levers.vb"},{"location":"mainsystem/Files/Levers_8vb/#githubsignallingsystemehmr-signalling-systemdevicesleversvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Levers.vb"},{"location":"mainsystem/Files/Levers_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Levers Public ReadOnly LeverCount As Integer = 24 Public Lever () As String = { \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" } Public LeverFrameState () As String = { \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" , \"Normal\" } Public LeverLock () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public LeverlockState () As String = { \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" , \"Locked\" } Public LeverRestroke () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } ' Logic start Public Sub LeversLogic () For i As Integer = 0 To LeverCount - 1 ' Check for error If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 And DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then NewError ( LeverReadingBothWays ( i )) Else RemoveError ( LeverReadingBothWays ( i )) End If ' Lever Read If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 Then LeverFrameState ( i ) = \"Normal\" ElseIf DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then LeverFrameState ( i ) = \"Reverse\" Else LeverFrameState ( i ) = \"Unknown\" End If If RuntimeConfig . config . LeverState ( i ) = \"System\" Then If DataReadInputsArray ( InputAddressLeverNormal ( i )) = 1 Then Lever ( i ) = \"Normal\" ElseIf DataReadInputsArray ( InputAddressLeverReverse ( i )) = 1 Then Lever ( i ) = \"Reverse\" Else Lever ( i ) = \"Unknown\" End If ElseIf RuntimeConfig . config . LeverState ( i ) = \"Normal\" Then Lever ( i ) = \"Normal\" ElseIf RuntimeConfig . config . LeverState ( i ) = \"Reverse\" Then Lever ( i ) = \"Reverse\" ElseIf RuntimeConfig . config . LeverState ( i ) = \"Unknown\" Then Lever ( i ) = \"Unknown\" End If ' Lever Lock If ReleaseLevers = True Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else If RuntimeConfig . config . LeverLock ( i ) = \"System\" Then If LeverLock ( i ) = True Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 0 LeverlockState ( i ) = \"Locked\" ElseIf LeverLock ( i ) = False Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else LeverlockState ( i ) = \"Code Error\" End If Else If RuntimeConfig . config . LeverLock ( i ) = \"Lock\" Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 0 LeverlockState ( i ) = \"Locked\" ElseIf RuntimeConfig . config . LeverLock ( i ) = \"Release\" Then DataWriteOutputsOutArray ( OutputAddressLeverLock ( i )) = 1 LeverlockState ( i ) = \"Released\" Else LeverlockState ( i ) = \"Code Error\" End If End If End If Next End Sub ' Second timer countdown Public Sub SecondTick () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/LineSide_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/LineSide.vb \u00b6 Source code \u00b6 Module LineSide ' Tunnel Sensors Public TunnelOpen As Boolean = False Public TunnelSafe As Boolean = False ' Level Crossing Public CrossingSafe As Boolean = False Public CrossingWarningBuzzer = False Public LCSensor1 As Boolean = False Public LCSensor2 As Boolean = False Public LCSensor3 As Boolean = False Public LCSensor4 As Boolean = False Public EastSensor As Boolean = False Public WestSensor As Boolean = False ' Logic Start Public Sub LineSideLogic () TunnelError () TunnelLogic () LevelCrossingError () LevelCrossingLogic () End Sub ' Tunnel Logic Public Sub TunnelLogic () ' Check East sensor for override If RuntimeConfig . config . EastEndTunnel = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 Then EastSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) ElseIf RuntimeConfig . config . EastEndTunnel = \"Open\" Then EastSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) Else EastSensor = False If SignalAspectPower = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And TunnelOpen = True Then Errors . NewError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) End If ' Check West sensor for override If RuntimeConfig . config . WestEndTunnel = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 Then WestSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) ElseIf RuntimeConfig . config . WestEndTunnel = \"Open\" Then WestSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) Else WestSensor = False If SignalAspectPower = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And TunnelOpen = True Then Errors . NewError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) End If ' Logic for tunnel open If EastSensor = True Or WestSensor = True Then TunnelOpen = True Else TunnelOpen = False End If ' Logic for tunnel safe If EastSensor = True And WestSensor = True Then TunnelSafe = True Else TunnelSafe = False End If End Sub ' Level Crossing Logic Public Sub LevelCrossingLogic () Dim LCBuzzer As Boolean ' Check Sensor 1 for override If RuntimeConfig . config . OutterGateOutSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 0 Then LCSensor1 = True ElseIf RuntimeConfig . config . OutterGateOutSensor = \"Made\" Then LCSensor1 = True Else LCSensor1 = False End If ' Check Sensor 2 for override If RuntimeConfig . config . OutterGateInSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 0 Then LCSensor2 = True ElseIf RuntimeConfig . config . OutterGateInSensor = \"Made\" Then LCSensor2 = True Else LCSensor2 = False End If ' Check Sensor 3 for override If RuntimeConfig . config . InnerGateOutSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 0 Then LCSensor3 = True ElseIf RuntimeConfig . config . InnerGateOutSensor = \"Made\" Then LCSensor3 = True Else LCSensor3 = False End If ' Check Sensor 4 for override If RuntimeConfig . config . InnerGateInSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 0 Then LCSensor4 = True ElseIf RuntimeConfig . config . InnerGateInSensor = \"Made\" Then LCSensor4 = True Else LCSensor4 = False End If ' Logic If LCSensor1 = True And LCSensor2 = True And LCSensor3 = True And LCSensor4 = True Then CrossingSafe = True Else CrossingSafe = False End If If SignalsOn = True And CrossingSafe = False Then If WestBound = True Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionOP ) = False ) Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) End If ElseIf EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"D\" )) ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionOP ) = False Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) End If End If Else Errors . RemoveError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) Errors . RemoveError ( Messages . LevelCrossingTrainInSection ( \"D\" )) Errors . RemoveError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) Errors . RemoveError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) LCBuzzer = False End If ' Check Buzzer settings If RuntimeConfig . config . LevelCrossingWarningBuzzer = \"System\" Then CrossingWarningBuzzer = LCBuzzer ElseIf RuntimeConfig . config . LevelCrossingWarningBuzzer = \"Disable\" Then CrossingWarningBuzzer = False ElseIf RuntimeConfig . config . LevelCrossingWarningBuzzer = \"Test\" Then CrossingWarningBuzzer = True End If ' Output to buzzer Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCrossingWarningBuzzer ) = CrossingWarningBuzzer End Sub ' Tunnel Errors Public Sub TunnelError () ' East Switch Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 1 Then Errors . NewError ( Messages . TunnelInputsBothOn ( \"EastEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOn ( \"EastEnd\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 0 Then Errors . NewError ( Messages . TunnelInputsBothOff ( \"EastEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOff ( \"EastEnd\" )) End If ' West Switch Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 1 Then Errors . NewError ( Messages . TunnelInputsBothOn ( \"WestEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOn ( \"WestEnd\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 0 Then Errors . NewError ( Messages . TunnelInputsBothOff ( \"WestEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOff ( \"WestEnd\" )) End If End Sub ' Level Crossing Errors Public Sub LevelCrossingError () ' Sensor 1 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"1\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"1\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"1\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"1\" )) End If ' Sensor 2 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"2\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"2\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"2\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"2\" )) End If ' Sensor 3 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"3\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"3\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"3\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"3\" )) End If ' Sensor 4 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"4\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"4\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"4\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"4\" )) End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/LineSide.vb"},{"location":"mainsystem/Files/LineSide_8vb/#githubsignallingsystemehmr-signalling-systemdeviceslinesidevb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/LineSide.vb"},{"location":"mainsystem/Files/LineSide_8vb/#source-code","text":"Module LineSide ' Tunnel Sensors Public TunnelOpen As Boolean = False Public TunnelSafe As Boolean = False ' Level Crossing Public CrossingSafe As Boolean = False Public CrossingWarningBuzzer = False Public LCSensor1 As Boolean = False Public LCSensor2 As Boolean = False Public LCSensor3 As Boolean = False Public LCSensor4 As Boolean = False Public EastSensor As Boolean = False Public WestSensor As Boolean = False ' Logic Start Public Sub LineSideLogic () TunnelError () TunnelLogic () LevelCrossingError () LevelCrossingLogic () End Sub ' Tunnel Logic Public Sub TunnelLogic () ' Check East sensor for override If RuntimeConfig . config . EastEndTunnel = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 Then EastSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) ElseIf RuntimeConfig . config . EastEndTunnel = \"Open\" Then EastSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) Else EastSensor = False If SignalAspectPower = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And TunnelOpen = True Then Errors . NewError ( Messages . TunnelNotRegistering ( \"EastEnd\" )) End If ' Check West sensor for override If RuntimeConfig . config . WestEndTunnel = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 Then WestSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) ElseIf RuntimeConfig . config . WestEndTunnel = \"Open\" Then WestSensor = True Errors . RemoveError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) Else WestSensor = False If SignalAspectPower = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And TunnelOpen = True Then Errors . NewError ( Messages . TunnelNotRegistering ( \"WestEnd\" )) End If ' Logic for tunnel open If EastSensor = True Or WestSensor = True Then TunnelOpen = True Else TunnelOpen = False End If ' Logic for tunnel safe If EastSensor = True And WestSensor = True Then TunnelSafe = True Else TunnelSafe = False End If End Sub ' Level Crossing Logic Public Sub LevelCrossingLogic () Dim LCBuzzer As Boolean ' Check Sensor 1 for override If RuntimeConfig . config . OutterGateOutSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 0 Then LCSensor1 = True ElseIf RuntimeConfig . config . OutterGateOutSensor = \"Made\" Then LCSensor1 = True Else LCSensor1 = False End If ' Check Sensor 2 for override If RuntimeConfig . config . OutterGateInSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 0 Then LCSensor2 = True ElseIf RuntimeConfig . config . OutterGateInSensor = \"Made\" Then LCSensor2 = True Else LCSensor2 = False End If ' Check Sensor 3 for override If RuntimeConfig . config . InnerGateOutSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 0 Then LCSensor3 = True ElseIf RuntimeConfig . config . InnerGateOutSensor = \"Made\" Then LCSensor3 = True Else LCSensor3 = False End If ' Check Sensor 4 for override If RuntimeConfig . config . InnerGateInSensor = \"System\" And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 0 Then LCSensor4 = True ElseIf RuntimeConfig . config . InnerGateInSensor = \"Made\" Then LCSensor4 = True Else LCSensor4 = False End If ' Logic If LCSensor1 = True And LCSensor2 = True And LCSensor3 = True And LCSensor4 = True Then CrossingSafe = True Else CrossingSafe = False End If If SignalsOn = True And CrossingSafe = False Then If WestBound = True Then If ( TrackSectionUnoccupied ( TrackSectionNames . SectionOP ) = False ) Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) End If ElseIf EastBound = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"D\" )) ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionOP ) = False Then LCBuzzer = True Errors . NewError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) ElseIf Not SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then Errors . NewError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) End If End If Else Errors . RemoveError ( Messages . LevelCrossingTrainInSection ( \"OP\" )) Errors . RemoveError ( Messages . LevelCrossingTrainInSection ( \"D\" )) Errors . RemoveError ( Messages . LevelCrossingTrainRouted ( \"Inner\" )) Errors . RemoveError ( Messages . LevelCrossingTrainRouted ( \"Outer\" )) LCBuzzer = False End If ' Check Buzzer settings If RuntimeConfig . config . LevelCrossingWarningBuzzer = \"System\" Then CrossingWarningBuzzer = LCBuzzer ElseIf RuntimeConfig . config . LevelCrossingWarningBuzzer = \"Disable\" Then CrossingWarningBuzzer = False ElseIf RuntimeConfig . config . LevelCrossingWarningBuzzer = \"Test\" Then CrossingWarningBuzzer = True End If ' Output to buzzer Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressCrossingWarningBuzzer ) = CrossingWarningBuzzer End Sub ' Tunnel Errors Public Sub TunnelError () ' East Switch Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 1 Then Errors . NewError ( Messages . TunnelInputsBothOn ( \"EastEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOn ( \"EastEnd\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 0 Then Errors . NewError ( Messages . TunnelInputsBothOff ( \"EastEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOff ( \"EastEnd\" )) End If ' West Switch Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 1 Then Errors . NewError ( Messages . TunnelInputsBothOn ( \"WestEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOn ( \"WestEnd\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 0 Then Errors . NewError ( Messages . TunnelInputsBothOff ( \"WestEnd\" )) Else Errors . RemoveError ( Messages . TunnelInputsBothOff ( \"WestEnd\" )) End If End Sub ' Level Crossing Errors Public Sub LevelCrossingError () ' Sensor 1 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"1\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"1\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateOutwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"1\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"1\" )) End If ' Sensor 2 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"2\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"2\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressOuterCrossingGateInwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"2\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"2\" )) End If ' Sensor 3 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"3\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"3\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateOutwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"3\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"3\" )) End If ' Sensor 4 Error Check If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 1 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 1 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsHigh ( \"4\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsHigh ( \"4\" )) End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamMade ) = 0 And DataReadInputsArray ( DigitalDeviceAddress . InputAddressInnerCrossingGateInwardsBeamBroken ) = 0 Then Errors . NewError ( Messages . LevelCrossingSensorBothInputsLow ( \"4\" )) Else Errors . RemoveError ( Messages . LevelCrossingSensorBothInputsLow ( \"4\" )) End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/LogicStart_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/LogicStart.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module LogicStart ' Overides Public AllowDeparting As Boolean = True Public AllowAudio As Boolean = True ' AJ1E Routes Public AJ1EInnerRequest As Boolean = False Public AJ1EInner As Boolean = False Public AJ1EOuterRequest As Boolean = False Public AJ1EOuter As Boolean = False Public AJ1EHeadShuntRequest As Boolean = False Public AJ1EHeadShunt As Boolean = False Public AJ1EExtentionRequest As Boolean = False Public AJ1EExtention As Boolean = False Public AJ1EEngineShedRequest As Boolean = False Public AJ1EEngineShed As Boolean = False Public AJ1EFoxHoleRequest As Boolean = False Public AJ1EFoxHole As Boolean = False ' AJ2E Routes Public AJ2EInnerRequest As Boolean = False Public AJ2EInner As Boolean = False Public AJ2EOuterRequest As Boolean = False Public AJ2EOuter As Boolean = False Public AJ2EExtentionRequest As Boolean = False Public AJ2EExtention As Boolean = False Public AJ2EEngineShedRequest As Boolean = False Public AJ2EEngineShed As Boolean = False Public AJ2EFoxHoleRequest As Boolean = False Public AJ2EFoxHole As Boolean = False ' AJ3E Routes Public AJ3EOuterRequest As Boolean = False Public AJ3EOuter As Boolean = False ' AJ4E Routes Public AJ4EPlatform1Request As Boolean = False Public AJ4EPlatform1 As Boolean = False Public AJ4EPlatform2Request As Boolean = False Public AJ4EPlatform2 As Boolean = False ' AJ7E Routes Public AJ7EOuterRequest As Boolean = False Public AJ7EOuter As Boolean = False ' AJ8E Routes Public AJ8EOuterRequest As Boolean = False Public AJ8EOuter As Boolean = False ' AJ9E Routes Public AJ9EInnerRequest As Boolean = False Public AJ9EInner As Boolean = False Public AJ9EFoxHoleRequest As Boolean = False Public AJ9EFoxHole As Boolean = False ' AJ16E Routes Public AJ16EOuterRequest As Boolean = False Public AJ16EOuter As Boolean = False Public AJ16EExtentionRequest As Boolean = False Public AJ16EExtention As Boolean = False Public AJ16EEngineShedRequest As Boolean = False Public AJ16EEngineShed As Boolean = False ' AJ17E Routes Public AJ17EInnerRequest As Boolean = False Public AJ17EInner As Boolean = False ' AJ18E Routes Public AJ18EInnerRequest As Boolean = False Public AJ18EInner As Boolean = False Public AJ18EFoxHoleRequest As Boolean = False Public AJ18EFoxHole As Boolean = False ' AJ21E Routes Public AJ21EInnerRequest As Boolean = False Public AJ21EInner As Boolean = False Public AJ21EOuterRequest As Boolean = False Public AJ21EOuter As Boolean = False Public AJ21EExtentionRequest As Boolean = False Public AJ21EExtention As Boolean = False Public AJ21EEngineShedRequest As Boolean = False Public AJ21EEngineShed As Boolean = False Public AJ21EFoxHoleRequest As Boolean = False Public AJ21EFoxHole As Boolean = False ' AJ3W Routes Public AJ3WOuterRequest As Boolean = False Public AJ3WOuter As Boolean = False Public AJ3WExtentionRequest As Boolean = False Public AJ3WExtention As Boolean = False ' AJ7W Routes Public AJ7WOuterRequest As Boolean = False Public AJ7WOuter As Boolean = False ' AJ8W Routes Public AJ8WOuterRequest As Boolean = False Public AJ8WOuter As Boolean = False ' AJ9W Routes Public AJ9WInnerRequest As Boolean = False Public AJ9WInner As Boolean = False ' AJ15W Routes Public AJ15WOuterRequest As Boolean = False Public AJ15WOuter As Boolean = False Public AJ15WExtentionRequest As Boolean = False Public AJ15WExtention As Boolean = False Public AJ15WTurnTableRequest As Boolean = False Public AJ15WTurnTable As Boolean = False ' AJ16W Routes Public AJ16WInnerRequest As Boolean = False Public AJ16WInner As Boolean = False Public AJ16WPlatform1Request As Boolean = False Public AJ16WPlatform1 As Boolean = False Public AJ16WPlatform2Request As Boolean = False Public AJ16WPlatform2 As Boolean = False ' AJ17W Routes Public AJ17WInnerRequest As Boolean = False Public AJ17WInner As Boolean = False ' AJ18W Routes Public AJ18WInnerRequest As Boolean = False Public AJ18WInner As Boolean = False Public AJ18WPlatform1Request As Boolean = False Public AJ18WPlatform1 As Boolean = False Public AJ18WPlatform2Request As Boolean = False Public AJ18WPlatform2 As Boolean = False ' AJ22W Routes Public AJ22WOuterRequest As Boolean = False Public AJ22WOuter As Boolean = False Public AJ22WExtentionRequest As Boolean = False Public AJ22WExtention As Boolean = False ' S11 Public S11OutRequest As Boolean = False Public S11Out As Boolean = False ' S12 Public S12OutRequest As Boolean = False Public S12Out As Boolean = False ' S14 Public S14OutRequest As Boolean = False Public S14Out As Boolean = False ' S19 Public S19OutRequest As Boolean = False Public S19Out As Boolean = False Public AJ1EReset As Boolean = False Public AJ2EReset As Boolean = False Public AJ3EReset As Boolean = False Public AJ4EReset As Boolean = False Public AJ7EReset As Boolean = False Public AJ8EReset As Boolean = False Public AJ9EReset As Boolean = False Public AJ16EReset As Boolean = False Public AJ17EReset As Boolean = False Public AJ18EReset As Boolean = False Public AJ21EReset As Boolean = False Public AJ1Reset As Boolean = False Public AJ3WReset As Boolean = False Public AJ7WReset As Boolean = False Public AJ8WReset As Boolean = False Public AJ9WReset As Boolean = False Public AJ15WReset As Boolean = False Public AJ16WReset As Boolean = False Public AJ17WReset As Boolean = False Public AJ18WReset As Boolean = False Public AJ22WReset As Boolean = False Public S11Reset As Boolean = False Public S12Reset As Boolean = False Public S14Reset As Boolean = False Public S19Reset As Boolean = False Public EastBound As Boolean Public WestBound As Boolean Public Mode As String Public ReleaseLevers As Boolean Public AirOn As Boolean Public AirOffsetting As Boolean = False Public RequireButtonInputToClearSignal As Boolean = False Public LastLogicState As String Public Sub MainStartLogic () ' Direction If RuntimeConfig . config . DirectionOveride = \"EastBound\" Then EastBound = True WestBound = False ElseIf RuntimeConfig . config . DirectionOveride = \"WestBound\" Then EastBound = False WestBound = True ElseIf RuntimeConfig . config . DirectionOveride = \"Auto\" Then If RuntimeConfig . config . AllowInputDirection = True And Serial . DataReadInputsArray ( InputAddressEastBound ) = 1 Then EastBound = True WestBound = False ElseIf RuntimeConfig . config . AllowInputDirection = True And Serial . DataReadInputsArray ( InputAddressWestBound ) = 1 Then EastBound = False WestBound = True Else ' DIRECTION by month goes here End If End If ' Mode If RuntimeConfig . config . Mode = \"Computer\" Then Mode = \"Computer\" ElseIf RuntimeConfig . config . Mode = \"External\" Then If Serial . DataReadInputsArray ( InputAddressMode ) = 1 Then Mode = \"Manual\" Else Mode = \"Computer\" End If ElseIf RuntimeConfig . config . Mode = \"Manual\" Then Mode = \"Manual\" End If ' Send message on logic change If SignalsOn = True Then If Mode = LastLogicState Then Else TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Logic Mode set to \" & Mode ) End If End If LastLogicState = Mode ' Release If Serial . DataReadInputsArray ( InputAddressReleaseLevers ) = 1 Then ReleaseLevers = True Else ReleaseLevers = False End If Buttons . ButtonsLogic () Initializations . RunInitializations () ' EStop and logic If Safety . EStopTriggered = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger Initializations . AJ1Initiated = False Initializations . AJ2Initiated = False Initializations . AJ3Initiated = False Initializations . AJ4Initiated = False Initializations . AJ7Initiated = False Initializations . AJ8Initiated = False Initializations . AJ9Initiated = False Initializations . AJ15Initiated = False Initializations . AJ16Initiated = False Initializations . AJ17Initiated = False Initializations . AJ18Initiated = False Initializations . AJ21Initiated = False Initializations . AJ22Initiated = False Initializations . S11Initiated = False Initializations . S12Initiated = False Initializations . S14Initiated = False Initializations . S19Initiated = False Initializations . Point5Initiated = False Initializations . Point6Initiated = False Initializations . Point10Initiated = False Initializations . Point11Initiated = False Initializations . Point12Initiated = False Initializations . Point13Initiated = False Initializations . Point14Initiated = False Initializations . Point19Initiated = False Else If EastBound = True Then ' Eastbound If Mode = LogicModeManual Then ' manual mode Initializations . ModeComputerInitiated = False If Initializations . ModeManualInititated = True Then EastBoundManual . Manual () ' Run manual mode Else Initializations . ModeManualInititated = True Initializations . ResetInitiate () End If ElseIf Mode = LogicModeComputer Then ' Is it in computer mode ? Initializations . ModeManualInititated = False If Initializations . ModeComputerInitiated = True Then EastBoundComputer . Computer () ' Run computer mode LogicStart . LeversChange () EastBoundComputer . Sounds () Else Initializations . ModeComputerInitiated = True Initializations . ResetInitiate () End If Else ' Main . TextBoxError . AppendText ( \"Error: Eastbound.Manual/Computer?\" & Environment . NewLine ) ' If it cannot find the mode run error message End If ElseIf WestBound = True Then ' Is it Westbound ? If Mode = LogicModeManual Then ' Is it in manual mode ? If Initializations . ModeManualInititated = True Then WestBoundManual . Manual () ' Run manual mode Else Initializations . ModeComputerInitiated = False Initializations . ModeManualInititated = True Initializations . ResetInitiate () End If ElseIf Mode = LogicModeComputer Then ' Is it in computer mode ? Initializations . ModeManualInititated = False If Initializations . ModeComputerInitiated = True Then WestBoundComputer . Computer () ' Run computer mode LogicStart . LeversChange () WestBoundComputer . Sounds () Else Initializations . ModeComputerInitiated = True Initializations . ResetInitiate () End If Else ' Main . TextBoxError . AppendText ( \"Error: Westbound.Manual/Computer?\" & Environment . NewLine ) ' If it cannot find the mode run error message End If Else ' Main . TextBoxError . AppendText ( \"Error: EastBound/Westbound?\" & Environment . NewLine ) End If End If If Initializations . SPADInitiated = True And SignalsOn = True And AnalogIOManager . ActualAnalogValue ( 61 ) >= 16 Then SPADDetection . LogicStart () End Sub Public Sub LeversChange () For i As Integer = 0 To LeverCount - 1 If Lever ( i ) = LeverInNormal Then LeverLock ( i ) = True Else LeverLock ( i ) = False Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/LogicStart.vb"},{"location":"mainsystem/Files/LogicStart_8vb/#githubsignallingsystemehmr-signalling-systemlogiclogicstartvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/LogicStart.vb"},{"location":"mainsystem/Files/LogicStart_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module LogicStart ' Overides Public AllowDeparting As Boolean = True Public AllowAudio As Boolean = True ' AJ1E Routes Public AJ1EInnerRequest As Boolean = False Public AJ1EInner As Boolean = False Public AJ1EOuterRequest As Boolean = False Public AJ1EOuter As Boolean = False Public AJ1EHeadShuntRequest As Boolean = False Public AJ1EHeadShunt As Boolean = False Public AJ1EExtentionRequest As Boolean = False Public AJ1EExtention As Boolean = False Public AJ1EEngineShedRequest As Boolean = False Public AJ1EEngineShed As Boolean = False Public AJ1EFoxHoleRequest As Boolean = False Public AJ1EFoxHole As Boolean = False ' AJ2E Routes Public AJ2EInnerRequest As Boolean = False Public AJ2EInner As Boolean = False Public AJ2EOuterRequest As Boolean = False Public AJ2EOuter As Boolean = False Public AJ2EExtentionRequest As Boolean = False Public AJ2EExtention As Boolean = False Public AJ2EEngineShedRequest As Boolean = False Public AJ2EEngineShed As Boolean = False Public AJ2EFoxHoleRequest As Boolean = False Public AJ2EFoxHole As Boolean = False ' AJ3E Routes Public AJ3EOuterRequest As Boolean = False Public AJ3EOuter As Boolean = False ' AJ4E Routes Public AJ4EPlatform1Request As Boolean = False Public AJ4EPlatform1 As Boolean = False Public AJ4EPlatform2Request As Boolean = False Public AJ4EPlatform2 As Boolean = False ' AJ7E Routes Public AJ7EOuterRequest As Boolean = False Public AJ7EOuter As Boolean = False ' AJ8E Routes Public AJ8EOuterRequest As Boolean = False Public AJ8EOuter As Boolean = False ' AJ9E Routes Public AJ9EInnerRequest As Boolean = False Public AJ9EInner As Boolean = False Public AJ9EFoxHoleRequest As Boolean = False Public AJ9EFoxHole As Boolean = False ' AJ16E Routes Public AJ16EOuterRequest As Boolean = False Public AJ16EOuter As Boolean = False Public AJ16EExtentionRequest As Boolean = False Public AJ16EExtention As Boolean = False Public AJ16EEngineShedRequest As Boolean = False Public AJ16EEngineShed As Boolean = False ' AJ17E Routes Public AJ17EInnerRequest As Boolean = False Public AJ17EInner As Boolean = False ' AJ18E Routes Public AJ18EInnerRequest As Boolean = False Public AJ18EInner As Boolean = False Public AJ18EFoxHoleRequest As Boolean = False Public AJ18EFoxHole As Boolean = False ' AJ21E Routes Public AJ21EInnerRequest As Boolean = False Public AJ21EInner As Boolean = False Public AJ21EOuterRequest As Boolean = False Public AJ21EOuter As Boolean = False Public AJ21EExtentionRequest As Boolean = False Public AJ21EExtention As Boolean = False Public AJ21EEngineShedRequest As Boolean = False Public AJ21EEngineShed As Boolean = False Public AJ21EFoxHoleRequest As Boolean = False Public AJ21EFoxHole As Boolean = False ' AJ3W Routes Public AJ3WOuterRequest As Boolean = False Public AJ3WOuter As Boolean = False Public AJ3WExtentionRequest As Boolean = False Public AJ3WExtention As Boolean = False ' AJ7W Routes Public AJ7WOuterRequest As Boolean = False Public AJ7WOuter As Boolean = False ' AJ8W Routes Public AJ8WOuterRequest As Boolean = False Public AJ8WOuter As Boolean = False ' AJ9W Routes Public AJ9WInnerRequest As Boolean = False Public AJ9WInner As Boolean = False ' AJ15W Routes Public AJ15WOuterRequest As Boolean = False Public AJ15WOuter As Boolean = False Public AJ15WExtentionRequest As Boolean = False Public AJ15WExtention As Boolean = False Public AJ15WTurnTableRequest As Boolean = False Public AJ15WTurnTable As Boolean = False ' AJ16W Routes Public AJ16WInnerRequest As Boolean = False Public AJ16WInner As Boolean = False Public AJ16WPlatform1Request As Boolean = False Public AJ16WPlatform1 As Boolean = False Public AJ16WPlatform2Request As Boolean = False Public AJ16WPlatform2 As Boolean = False ' AJ17W Routes Public AJ17WInnerRequest As Boolean = False Public AJ17WInner As Boolean = False ' AJ18W Routes Public AJ18WInnerRequest As Boolean = False Public AJ18WInner As Boolean = False Public AJ18WPlatform1Request As Boolean = False Public AJ18WPlatform1 As Boolean = False Public AJ18WPlatform2Request As Boolean = False Public AJ18WPlatform2 As Boolean = False ' AJ22W Routes Public AJ22WOuterRequest As Boolean = False Public AJ22WOuter As Boolean = False Public AJ22WExtentionRequest As Boolean = False Public AJ22WExtention As Boolean = False ' S11 Public S11OutRequest As Boolean = False Public S11Out As Boolean = False ' S12 Public S12OutRequest As Boolean = False Public S12Out As Boolean = False ' S14 Public S14OutRequest As Boolean = False Public S14Out As Boolean = False ' S19 Public S19OutRequest As Boolean = False Public S19Out As Boolean = False Public AJ1EReset As Boolean = False Public AJ2EReset As Boolean = False Public AJ3EReset As Boolean = False Public AJ4EReset As Boolean = False Public AJ7EReset As Boolean = False Public AJ8EReset As Boolean = False Public AJ9EReset As Boolean = False Public AJ16EReset As Boolean = False Public AJ17EReset As Boolean = False Public AJ18EReset As Boolean = False Public AJ21EReset As Boolean = False Public AJ1Reset As Boolean = False Public AJ3WReset As Boolean = False Public AJ7WReset As Boolean = False Public AJ8WReset As Boolean = False Public AJ9WReset As Boolean = False Public AJ15WReset As Boolean = False Public AJ16WReset As Boolean = False Public AJ17WReset As Boolean = False Public AJ18WReset As Boolean = False Public AJ22WReset As Boolean = False Public S11Reset As Boolean = False Public S12Reset As Boolean = False Public S14Reset As Boolean = False Public S19Reset As Boolean = False Public EastBound As Boolean Public WestBound As Boolean Public Mode As String Public ReleaseLevers As Boolean Public AirOn As Boolean Public AirOffsetting As Boolean = False Public RequireButtonInputToClearSignal As Boolean = False Public LastLogicState As String Public Sub MainStartLogic () ' Direction If RuntimeConfig . config . DirectionOveride = \"EastBound\" Then EastBound = True WestBound = False ElseIf RuntimeConfig . config . DirectionOveride = \"WestBound\" Then EastBound = False WestBound = True ElseIf RuntimeConfig . config . DirectionOveride = \"Auto\" Then If RuntimeConfig . config . AllowInputDirection = True And Serial . DataReadInputsArray ( InputAddressEastBound ) = 1 Then EastBound = True WestBound = False ElseIf RuntimeConfig . config . AllowInputDirection = True And Serial . DataReadInputsArray ( InputAddressWestBound ) = 1 Then EastBound = False WestBound = True Else ' DIRECTION by month goes here End If End If ' Mode If RuntimeConfig . config . Mode = \"Computer\" Then Mode = \"Computer\" ElseIf RuntimeConfig . config . Mode = \"External\" Then If Serial . DataReadInputsArray ( InputAddressMode ) = 1 Then Mode = \"Manual\" Else Mode = \"Computer\" End If ElseIf RuntimeConfig . config . Mode = \"Manual\" Then Mode = \"Manual\" End If ' Send message on logic change If SignalsOn = True Then If Mode = LastLogicState Then Else TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Logic Mode set to \" & Mode ) End If End If LastLogicState = Mode ' Release If Serial . DataReadInputsArray ( InputAddressReleaseLevers ) = 1 Then ReleaseLevers = True Else ReleaseLevers = False End If Buttons . ButtonsLogic () Initializations . RunInitializations () ' EStop and logic If Safety . EStopTriggered = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger Initializations . AJ1Initiated = False Initializations . AJ2Initiated = False Initializations . AJ3Initiated = False Initializations . AJ4Initiated = False Initializations . AJ7Initiated = False Initializations . AJ8Initiated = False Initializations . AJ9Initiated = False Initializations . AJ15Initiated = False Initializations . AJ16Initiated = False Initializations . AJ17Initiated = False Initializations . AJ18Initiated = False Initializations . AJ21Initiated = False Initializations . AJ22Initiated = False Initializations . S11Initiated = False Initializations . S12Initiated = False Initializations . S14Initiated = False Initializations . S19Initiated = False Initializations . Point5Initiated = False Initializations . Point6Initiated = False Initializations . Point10Initiated = False Initializations . Point11Initiated = False Initializations . Point12Initiated = False Initializations . Point13Initiated = False Initializations . Point14Initiated = False Initializations . Point19Initiated = False Else If EastBound = True Then ' Eastbound If Mode = LogicModeManual Then ' manual mode Initializations . ModeComputerInitiated = False If Initializations . ModeManualInititated = True Then EastBoundManual . Manual () ' Run manual mode Else Initializations . ModeManualInititated = True Initializations . ResetInitiate () End If ElseIf Mode = LogicModeComputer Then ' Is it in computer mode ? Initializations . ModeManualInititated = False If Initializations . ModeComputerInitiated = True Then EastBoundComputer . Computer () ' Run computer mode LogicStart . LeversChange () EastBoundComputer . Sounds () Else Initializations . ModeComputerInitiated = True Initializations . ResetInitiate () End If Else ' Main . TextBoxError . AppendText ( \"Error: Eastbound.Manual/Computer?\" & Environment . NewLine ) ' If it cannot find the mode run error message End If ElseIf WestBound = True Then ' Is it Westbound ? If Mode = LogicModeManual Then ' Is it in manual mode ? If Initializations . ModeManualInititated = True Then WestBoundManual . Manual () ' Run manual mode Else Initializations . ModeComputerInitiated = False Initializations . ModeManualInititated = True Initializations . ResetInitiate () End If ElseIf Mode = LogicModeComputer Then ' Is it in computer mode ? Initializations . ModeManualInititated = False If Initializations . ModeComputerInitiated = True Then WestBoundComputer . Computer () ' Run computer mode LogicStart . LeversChange () WestBoundComputer . Sounds () Else Initializations . ModeComputerInitiated = True Initializations . ResetInitiate () End If Else ' Main . TextBoxError . AppendText ( \"Error: Westbound.Manual/Computer?\" & Environment . NewLine ) ' If it cannot find the mode run error message End If Else ' Main . TextBoxError . AppendText ( \"Error: EastBound/Westbound?\" & Environment . NewLine ) End If End If If Initializations . SPADInitiated = True And SignalsOn = True And AnalogIOManager . ActualAnalogValue ( 61 ) >= 16 Then SPADDetection . LogicStart () End Sub Public Sub LeversChange () For i As Integer = 0 To LeverCount - 1 If Lever ( i ) = LeverInNormal Then LeverLock ( i ) = True Else LeverLock ( i ) = False Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/LoginForm_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Users/LoginForm.vb \u00b6 Source code \u00b6 Public Class LoginForm Private Sub OK_Click ( ByVal sender As System . Object , ByVal e As System . EventArgs ) Handles OK . Click Login ( UsernameTextBox . Text , PasswordTextBox . Text ) Me . Close () End Sub Private Sub Cancel_Click ( ByVal sender As System . Object , ByVal e As System . EventArgs ) Handles Cancel . Click Me . Close () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Users/LoginForm.vb"},{"location":"mainsystem/Files/LoginForm_8vb/#githubsignallingsystemehmr-signalling-systemusersloginformvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Users/LoginForm.vb"},{"location":"mainsystem/Files/LoginForm_8vb/#source-code","text":"Public Class LoginForm Private Sub OK_Click ( ByVal sender As System . Object , ByVal e As System . EventArgs ) Handles OK . Click Login ( UsernameTextBox . Text , PasswordTextBox . Text ) Me . Close () End Sub Private Sub Cancel_Click ( ByVal sender As System . Object , ByVal e As System . EventArgs ) Handles Cancel . Click Me . Close () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Main_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Misc/Main.vb \u00b6 Source code \u00b6 Imports System . Threading Imports System . IO Public Class Main Public Path As String Public Shared testModeCount As Integer = 0 Public Shared MimicBoardImagePath As String Public Shared FrameImagePath As String Public Shared SoundFile As String Public Shared ConfigimagesPath As String Public Shared ModernDisplayPath As String Private AnalogIOTimer As Threading . Timer ' MainLogic threads Private MainLogicLogicThread As Threading . Timer Private MainLogicSecondThread As Threading . Timer ' Points threads Private PointsLogicThread As Threading . Timer Private PointsSecondThread As Threading . Timer ' Signals threads Private SignalsLogicThread As Threading . Timer Private SignalsSecondThread As Threading . Timer ' Levers threads Private LeversLogicThread As Threading . Timer Private LeversSecondThread As Threading . Timer ' Track Sections threads Private TrackSectionsLogicThread As Threading . Timer Private TrackSectionsSecondThread As Threading . Timer ' ProxySensors threads Private ErrorLogicThread As Threading . Timer Private LineSideLogicThread As Threading . Timer ' Sounds threads Private SoundsLogicThread As Threading . Timer Private SoundsSecondThread As Threading . Timer ' Buttons threads Private ButtonsLogicThread As Threading . Timer Private ButtonsLogicIndicatorsThread As Threading . Timer Private ButtonsSecondThread As Threading . Timer ' FrameDisplays threads Private FrameDisplaysLogicThread As Threading . Timer Private FrameDisplaysSecondThread As Threading . Timer ' Json threads Private JsonDisplayLogicThread As Threading . Timer ' Update Checker Private UpdateCheckThread As Threading . Timer Public HasUpdate As Boolean = False ' Close the software Private Sub ToolStripMenuClose_Click ( sender As Object , e As EventArgs ) Handles ToolStripMenuClose . Click RuntimeConfig . Save () Serial . SerialClose () Me . Close () ' Exits the software End Sub ' Run when closing software Private Sub Main_FormClosing ( sender As Object , e As FormClosingEventArgs ) Handles Me . FormClosing Sound . StopAudioThread () AppServer . EndThreadTCP () Serial . SerialClose () SerialPixelLeds . SerialClose () AppServer . StopThread () PopUpConfig . Close () PopUpConfig . Dispose () RuntimeConfig . Save () Me . AnalogIOTimer . Change ( Timeout . Infinite , Timeout . Infinite ) Me . MainLogicLogicThread . Dispose () Me . MainLogicSecondThread . Dispose () Me . PointsLogicThread . Dispose () Me . PointsLogicThread . Dispose () Me . SignalsLogicThread . Dispose () Me . SignalsSecondThread . Dispose () Me . LeversLogicThread . Dispose () Me . LeversSecondThread . Dispose () Me . TrackSectionsLogicThread . Dispose () Me . TrackSectionsSecondThread . Dispose () Me . ErrorLogicThread . Dispose () Me . LineSideLogicThread . Dispose () Me . SoundsLogicThread . Dispose () Me . SoundsSecondThread . Dispose () Me . ButtonsLogicThread . Dispose () Me . ButtonsLogicIndicatorsThread . Dispose () Me . ButtonsSecondThread . Dispose () Me . FrameDisplaysLogicThread . Dispose () Me . FrameDisplaysSecondThread . Dispose () Me . SoundsLogicThread . Dispose () Me . UpdateCheckThread . Dispose () Me . Dispose () End Sub ' Run when form first loads Private Sub Main_Load ( sender As Object , e As EventArgs ) Handles MyBase . Load GlobalConfig . loadConfig () RuntimeConfig . LoadConfig () Sound . StartAudioThread () Serial . StartThread () SerialPixelLeds . StartThread () AlarmsAndNotifications . UpdateSystemLog ( \"---------SOFTWARE STARTED AFTER UPDATE OR REBOOT.---------\" ) AppServer . StartThreadTCP () RuntimeConfig . Upgrade () Signals . initialise () Path = GlobalConfig . config . MediaPath MimicBoardImagePath = Path + \"\\Images\\MimicBoard\\\" FrameImagePath = Path + \"\\Images\\Frame\\\" SoundFile = Path + \"\\Sound\\\" ModernDisplayPath = Path + \"\\ModernDisplay\\\" ConfigimagesPath = Path + \"\\Configimages\\\" If Not File . Exists ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) Then GroupBox3 . Visible = False HasUpdate = False End If Dim localVersion As System . UInt64 If Application . ProductVersion . IndexOf ( \"-\" ) = - 1 Then Console . Error . WriteLine ( \"Unable to find suffix version\" ) lblCurrentVersion . Text = \"ERROR\" Else localVersion = Convert . ToUInt64 ( Application . ProductVersion . Substring ( Application . ProductVersion . IndexOf ( \"-\" ) + 1 )) lblCurrentVersion . Text = localVersion End If lblRemoteVersion . Text = \"\" btnCheckUpdate . PerformClick () ' Me . WindowState = FormWindowState . Minimized Me . AnalogIOTimer = New Threading . Timer ( AddressOf TickAnalogIO , Nothing , CInt ( AnalogIOTimerValue ), CInt ( AnalogIOTimerValue )) ' MainLogic threads Me . MainLogicLogicThread = New Threading . Timer ( AddressOf MainLogicLogicThreadCall , Nothing , CInt ( MainLogicLogicThreadValue ), CInt ( MainLogicLogicThreadValue )) Me . MainLogicSecondThread = New Threading . Timer ( AddressOf MainLogicSecondThreadCall , Nothing , CInt ( MainLogicSecondThreadValue ), CInt ( MainLogicSecondThreadValue )) ' Points threads Me . PointsLogicThread = New Threading . Timer ( AddressOf PointsLogicThreadCall , Nothing , CInt ( PointsLogicThreadValue ), CInt ( PointsLogicThreadValue )) Me . PointsSecondThread = New Threading . Timer ( AddressOf PointsSecondThreadCall , Nothing , CInt ( PointsSecondThreadValue ), CInt ( PointsSecondThreadValue )) ' Signals threads Me . SignalsLogicThread = New Threading . Timer ( AddressOf SignalsLogicThreadCall , Nothing , CInt ( SignalsLogicThreadValue ), CInt ( SignalsLogicThreadValue )) Me . SignalsSecondThread = New Threading . Timer ( AddressOf SignalsSecondThreadCall , Nothing , CInt ( SignalsSecondThreadValue ), CInt ( SignalsSecondThreadValue )) ' Levers threads Me . LeversLogicThread = New Threading . Timer ( AddressOf LeversLogicThreadCall , Nothing , CInt ( LeversLogicThreadValue ), CInt ( LeversLogicThreadValue )) Me . LeversSecondThread = New Threading . Timer ( AddressOf LeversSecondThreadCall , Nothing , CInt ( LeversSecondThreadValue ), CInt ( LeversSecondThreadValue )) ' Track Sections threads Me . TrackSectionsLogicThread = New Threading . Timer ( AddressOf TrackSectionsLogicThreadCall , Nothing , CInt ( TrackSectionsLogicThreadValue ), CInt ( TrackSectionsLogicThreadValue )) Me . TrackSectionsSecondThread = New Threading . Timer ( AddressOf TrackSectionsSecondThreadCall , Nothing , CInt ( TrackSectionsSecondThreadValue ), CInt ( TrackSectionsSecondThreadValue )) ' Error Logic threads Me . ErrorLogicThread = New Threading . Timer ( AddressOf ErrorLogicThreadCall , Nothing , CInt ( ErrorLogicThreadValue ), CInt ( ErrorLogicThreadValue )) ' LineSide Me . LineSideLogicThread = New Threading . Timer ( AddressOf LineSideLogicThreadCall , Nothing , CInt ( LineSideLogicThreadValue ), CInt ( LineSideLogicThreadValue )) ' Sounds threads Me . SoundsLogicThread = New Threading . Timer ( AddressOf SoundsLogicThreadCall , Nothing , CInt ( SoundsLogicThreadValue ), CInt ( SoundsLogicThreadValue )) Me . SoundsSecondThread = New Threading . Timer ( AddressOf SoundsSecondThreadCall , Nothing , CInt ( SoundsSecondThreadValue ), CInt ( SoundsSecondThreadValue )) ' Buttons threads Me . ButtonsLogicThread = New Threading . Timer ( AddressOf ButtonsLogicThreadCall , Nothing , CInt ( ButtonsLogicThreadValue ), CInt ( ButtonsLogicThreadValue )) Me . ButtonsLogicIndicatorsThread = New Threading . Timer ( AddressOf ButtonsLogicIndicatorsThreadCall , Nothing , CInt ( ButtonsLogicIndicatorsThreadValue ), CInt ( ButtonsLogicIndicatorsThreadValue )) Me . ButtonsSecondThread = New Threading . Timer ( AddressOf ButtonsSecondThreadCall , Nothing , CInt ( ButtonsSecondThreadValue ), CInt ( ButtonsSecondThreadValue )) ' FrameDisplays threads Me . FrameDisplaysLogicThread = New Threading . Timer ( AddressOf FrameDisplaysLogicThreadCall , Nothing , CInt ( FrameDisplaysLogicThreadValue ), CInt ( FrameDisplaysLogicThreadValue )) Me . FrameDisplaysSecondThread = New Threading . Timer ( AddressOf FrameDisplaysSecondThreadCall , Nothing , CInt ( FrameDisplaysSecondThreadValue ), CInt ( FrameDisplaysSecondThreadValue )) ' Json Display thread Me . JsonDisplayLogicThread = New Threading . Timer ( AddressOf JsonDisplayLogicThreadCall , Nothing , CInt ( JsonDisplayThreadValue ), CInt ( JsonDisplayThreadValue )) ' Update Check thread Me . UpdateCheckThread = New Threading . Timer ( AddressOf UpdateCheckThreadCall , Nothing , CInt ( UpdateCheckThreadValue ), CInt ( UpdateCheckThreadValue )) Me . MinimizeBox = True Me . SendToBack () End Sub Private Sub SystemTime_Tick ( sender As Object , e As EventArgs ) Handles SystemTime . Tick ' display current system time . ToolStripStatusLabelTime . Text = DateTime . Now . ToString ( \"dddd, dd MMMM yyyy, hh:mm:ss\" ) ' ModernDisplay . LableTime . Text = DateTime . Now . ToString ( \"HH:mm:ss\" ) If Serial . SerialStatus = \"Read\" Then RBDataReceive . Checked = True RBDataTransmit . Checked = False ElseIf Serial . SerialStatus = \"Write\" Then RBDataReceive . Checked = False RBDataTransmit . Checked = True Else RBDataReceive . Checked = False RBDataTransmit . Checked = False End If GBSerial . Text = ( Serial . SerialStatusText ) LblSerialTime . Text = ( \"Serial speed: \" & Serial . SerialTime & \"ms\" ) End Sub Private Sub SerialCount_Tick ( sender As Object , e As EventArgs ) Handles SerialCount . Tick LblSerialCount . Text = ( \"Ticks per secound: \" & Serial . SerialCount ) Serial . SerialCount = 0 End Sub Private Sub AuxTimer_Tick ( sender As Object , e As EventArgs ) Handles AuxTimer . Tick ' Restart software Dim now = DateTime . Now Dim date1 = New DateTime ( now . Year , now . Month , now . Day , 6 , 0 , 0 ) If now = date1 Then RuntimeConfig . Save () ' System . Windows . Forms . Application . Restart () End If If EastBound = True Then LableDirection . Text = \"Direction : EastBound\" LableDirection . BackColor = Color . Transparent ElseIf WestBound = True Then LableDirection . Text = \"Direction : WestBound\" LableDirection . BackColor = Color . Transparent Else LableDirection . Text = \"Direction : Unknown\" LableDirection . BackColor = Color . Red End If If Mode = \"Computer\" Then LabelMode . Text = \"Mode : Computer\" LabelMode . BackColor = Color . Transparent ElseIf Mode = \"Manual\" Then LabelMode . Text = \"Mode : Manual\" LabelMode . BackColor = Color . Transparent Else LabelMode . Text = \"Mode : Unknown\" LabelMode . BackColor = Color . Red End If If LoggedInAccessLevel > 0 Then LblUserName . Text = ( \"UserName :\" & LoggedInUserName & \" (\" & LoggedInAccessLevel & \")\" ) Else LblUserName . Text = ( \"UserName :\" ) End If If LoggedInAccessLevel >= 3 Then GroupBox2 . Enabled = True ToolStripMenuConfigurations . Enabled = True UpdateSoftwareToolStripMenuItem . Enabled = HasUpdate ToolStripMenuClose . Enabled = True Else GroupBox2 . Enabled = False ToolStripMenuConfigurations . Enabled = False UpdateSoftwareToolStripMenuItem . Enabled = False ToolStripMenuClose . Enabled = False End If End Sub Private Sub TickAnalogIO ( ByVal state As Object ) AnalogIOManager . Logic () End Sub Private Sub SystemTick_Tick ( sender As Object , e As EventArgs ) Handles SystemTick . Tick ' PlaySound () End Sub ' Threads for main logic Private Sub MainLogicLogicThreadCall ( ByVal state As Object ) LogicStart . MainStartLogic () Safety . Logic () SignalBackLockLogic () Errors . checkRequests () End Sub Private Sub MainLogicSecondThreadCall ( ByVal state As Object ) PowerLogic () SignalBackLockLogicSecoundTick () UserManagmentSecoundTick () End Sub ' Threads for points Private Sub PointsLogicThreadCall ( ByVal state As Object ) Points . Points () End Sub Private Sub PointsSecondThreadCall ( ByVal state As Object ) Points . SecondTick () End Sub ' Threads for Signals Private Sub SignalsLogicThreadCall ( ByVal state As Object ) Signals . Signals () End Sub Private Sub SignalsSecondThreadCall ( ByVal state As Object ) Signals . SecondTick () Initializations . SecondTick () End Sub ' Threads for Levers Private Sub LeversLogicThreadCall ( ByVal state As Object ) Levers . LeversLogic () End Sub Private Sub LeversSecondThreadCall ( ByVal state As Object ) Levers . SecondTick () End Sub ' Threads for ProxySensors Private Sub ErrorLogicThreadCall ( ByVal state As Object ) Errors . DisplayErrorLogic () Errors . DisplayRequestLogic () End Sub Private Sub LineSideLogicThreadCall ( ByVal state As Object ) LineSide . LineSideLogic () End Sub ' Threads for Track sections Private Sub TrackSectionsLogicThreadCall ( ByVal state As Object ) TrackSections . Logic () PointSections . Logic () End Sub Private Sub TrackSectionsSecondThreadCall ( ByVal state As Object ) TrackSections . SecondTick () PointSections . SecondTick () AIStart . AIStart () End Sub ' Threads for sounds Private Sub SoundsLogicThreadCall ( ByVal state As Object ) End Sub Private Sub SoundsSecondThreadCall ( ByVal state As Object ) Sound . SecondTick () End Sub ' Threads for buttons Private Sub ButtonsLogicThreadCall ( ByVal state As Object ) Buttons . ButtonsLogic () End Sub Private Sub ButtonsLogicIndicatorsThreadCall ( ByVal state As Object ) Buttons . ButtonIndicators () Fuses . FuseLogic () End Sub Private Sub ButtonsSecondThreadCall ( ByVal state As Object ) Buttons . SecondTick () End Sub ' Threads for FrameDisplays Private Sub FrameDisplaysLogicThreadCall ( ByVal state As Object ) MimicDiagram . MimicDiagram () FrameIndicatorLights . FrameIndicatorLights () End Sub Private Sub FrameDisplaysSecondThreadCall ( ByVal state As Object ) MimicDiagram . Flash () FrameIndicatorLights . Flash () Json_Values . Flash () End Sub Private Sub JsonDisplayLogicThreadCall ( ByVal state As Object ) JsonDisplay . updateJSon () End Sub ' Testmode Private Sub TimerPointTest_Tick ( sender As Object , e As EventArgs ) Handles TimerPointTest . Tick If Points . testNormal = True Then Points . testNormal = False Else Points . testNormal = True End If Points . TestMode = CBPointTest . Checked If TestMode = True Then If testModeCount = 0 Then ' Sound . CustomSound ( \"Warning!, the signalling System is in it's test mode! Please do not run any rolling stock!\" ) testModeCount = 12 Else testModeCount -= 1 End If End If End Sub Private Sub MemCheck_Tick ( sender As Object , e As EventArgs ) Handles MemCheck . Tick Dim c As Process = Process . GetCurrentProcess () LblMem . Text = \"Mem Usage (Working Set): \" & Math . Round ( c . WorkingSet / 1024 / 1024 , 2 , MidpointRounding . AwayFromZero ) & \" MB Current Memory Usage\" End Sub Private Sub MemAlert_Tick ( sender As Object , e As EventArgs ) Handles MemAlert . Tick Dim c As Process = Process . GetCurrentProcess () Dim MemLavel As Double = Math . Round (( c . WorkingSet / 1024 ) / 1024 , 2 , MidpointRounding . AwayFromZero ) Dim memlevel As Integer If memlevel >= 750 Then Errors . NewError ( \"Warning, aoftware memory is running above the flagged rate, current usage is \" & memlevel & \"MB\" ) Else Errors . RemoveError ( \"Warning, aoftware memory is running above the flagged rate, current usage is \" & memlevel & \"MB\" ) End If If memlevel >= 1024 Then Errors . NewError ( \"CRITICAL ERROR, software is closing due to memory usage being over 1GB\" ) RuntimeConfig . Save () Serial . SerialClose () Me . Close () Else Errors . RemoveError ( \"CRITICAL ERROR, software is closing due to memory usage being over 1GB\" ) End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub Private Sub ToolStripMenuConfigurations_Click ( sender As Object , e As EventArgs ) Handles ToolStripMenuConfigurations . Click PopUpConfig . Show () End Sub Private Sub UpdateSoftwareToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles UpdateSoftwareToolStripMenuItem . Click Updater . UpdateNow () End Sub Private Sub IOMonitorToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles IOMonitorToolStripMenuItem . Click IOMonitor . Show () End Sub Private Sub LogInToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles LogInToolStripMenuItem . Click LoginForm . Show () End Sub ' Thread for update check Private Sub UpdateCheckThreadCall ( ByVal state As Object ) CheckForUpdate () End Sub Private Sub BtnCheckUpdate_Click ( sender As Object , e As EventArgs ) Handles btnCheckUpdate . Click CheckForUpdate () End Sub Private Sub CheckForUpdate () If Not File . Exists ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) Then Exit Sub End If Dim updater As New Process () updater . StartInfo . RedirectStandardOutput = True updater . StartInfo . RedirectStandardError = False updater . StartInfo . UseShellExecute = False updater . StartInfo . CreateNoWindow = True updater . StartInfo . Arguments = \"/remote\" updater . StartInfo . FileName = \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" updater . Start () Dim output As String = Nothing updater . WaitForExit () output = updater . StandardOutput . ReadLine () lblRemoteVersion . Text = output If updater . ExitCode = - 1 Then ' There is an update available HasUpdate = True Errors . NewError ( \"Software update ready for install\" ) Else HasUpdate = False Errors . RemoveError ( \"Software update ready for install\" ) End If updater . Close () End Sub Private Sub NewConfigBetaToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles NewConfigBetaToolStripMenuItem . Click Configs . Show () End Sub Private Sub CheckBox1_CheckedChanged ( sender As Object , e As EventArgs ) Handles CheckBox1 . CheckedChanged If CheckBox1 . Checked = True Then FrameIndicatorLights . RGBMode = True Else FrameIndicatorLights . RGBMode = False End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc/Main.vb"},{"location":"mainsystem/Files/Main_8vb/#githubsignallingsystemehmr-signalling-systemmiscmainvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc/Main.vb"},{"location":"mainsystem/Files/Main_8vb/#source-code","text":"Imports System . Threading Imports System . IO Public Class Main Public Path As String Public Shared testModeCount As Integer = 0 Public Shared MimicBoardImagePath As String Public Shared FrameImagePath As String Public Shared SoundFile As String Public Shared ConfigimagesPath As String Public Shared ModernDisplayPath As String Private AnalogIOTimer As Threading . Timer ' MainLogic threads Private MainLogicLogicThread As Threading . Timer Private MainLogicSecondThread As Threading . Timer ' Points threads Private PointsLogicThread As Threading . Timer Private PointsSecondThread As Threading . Timer ' Signals threads Private SignalsLogicThread As Threading . Timer Private SignalsSecondThread As Threading . Timer ' Levers threads Private LeversLogicThread As Threading . Timer Private LeversSecondThread As Threading . Timer ' Track Sections threads Private TrackSectionsLogicThread As Threading . Timer Private TrackSectionsSecondThread As Threading . Timer ' ProxySensors threads Private ErrorLogicThread As Threading . Timer Private LineSideLogicThread As Threading . Timer ' Sounds threads Private SoundsLogicThread As Threading . Timer Private SoundsSecondThread As Threading . Timer ' Buttons threads Private ButtonsLogicThread As Threading . Timer Private ButtonsLogicIndicatorsThread As Threading . Timer Private ButtonsSecondThread As Threading . Timer ' FrameDisplays threads Private FrameDisplaysLogicThread As Threading . Timer Private FrameDisplaysSecondThread As Threading . Timer ' Json threads Private JsonDisplayLogicThread As Threading . Timer ' Update Checker Private UpdateCheckThread As Threading . Timer Public HasUpdate As Boolean = False ' Close the software Private Sub ToolStripMenuClose_Click ( sender As Object , e As EventArgs ) Handles ToolStripMenuClose . Click RuntimeConfig . Save () Serial . SerialClose () Me . Close () ' Exits the software End Sub ' Run when closing software Private Sub Main_FormClosing ( sender As Object , e As FormClosingEventArgs ) Handles Me . FormClosing Sound . StopAudioThread () AppServer . EndThreadTCP () Serial . SerialClose () SerialPixelLeds . SerialClose () AppServer . StopThread () PopUpConfig . Close () PopUpConfig . Dispose () RuntimeConfig . Save () Me . AnalogIOTimer . Change ( Timeout . Infinite , Timeout . Infinite ) Me . MainLogicLogicThread . Dispose () Me . MainLogicSecondThread . Dispose () Me . PointsLogicThread . Dispose () Me . PointsLogicThread . Dispose () Me . SignalsLogicThread . Dispose () Me . SignalsSecondThread . Dispose () Me . LeversLogicThread . Dispose () Me . LeversSecondThread . Dispose () Me . TrackSectionsLogicThread . Dispose () Me . TrackSectionsSecondThread . Dispose () Me . ErrorLogicThread . Dispose () Me . LineSideLogicThread . Dispose () Me . SoundsLogicThread . Dispose () Me . SoundsSecondThread . Dispose () Me . ButtonsLogicThread . Dispose () Me . ButtonsLogicIndicatorsThread . Dispose () Me . ButtonsSecondThread . Dispose () Me . FrameDisplaysLogicThread . Dispose () Me . FrameDisplaysSecondThread . Dispose () Me . SoundsLogicThread . Dispose () Me . UpdateCheckThread . Dispose () Me . Dispose () End Sub ' Run when form first loads Private Sub Main_Load ( sender As Object , e As EventArgs ) Handles MyBase . Load GlobalConfig . loadConfig () RuntimeConfig . LoadConfig () Sound . StartAudioThread () Serial . StartThread () SerialPixelLeds . StartThread () AlarmsAndNotifications . UpdateSystemLog ( \"---------SOFTWARE STARTED AFTER UPDATE OR REBOOT.---------\" ) AppServer . StartThreadTCP () RuntimeConfig . Upgrade () Signals . initialise () Path = GlobalConfig . config . MediaPath MimicBoardImagePath = Path + \"\\Images\\MimicBoard\\\" FrameImagePath = Path + \"\\Images\\Frame\\\" SoundFile = Path + \"\\Sound\\\" ModernDisplayPath = Path + \"\\ModernDisplay\\\" ConfigimagesPath = Path + \"\\Configimages\\\" If Not File . Exists ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) Then GroupBox3 . Visible = False HasUpdate = False End If Dim localVersion As System . UInt64 If Application . ProductVersion . IndexOf ( \"-\" ) = - 1 Then Console . Error . WriteLine ( \"Unable to find suffix version\" ) lblCurrentVersion . Text = \"ERROR\" Else localVersion = Convert . ToUInt64 ( Application . ProductVersion . Substring ( Application . ProductVersion . IndexOf ( \"-\" ) + 1 )) lblCurrentVersion . Text = localVersion End If lblRemoteVersion . Text = \"\" btnCheckUpdate . PerformClick () ' Me . WindowState = FormWindowState . Minimized Me . AnalogIOTimer = New Threading . Timer ( AddressOf TickAnalogIO , Nothing , CInt ( AnalogIOTimerValue ), CInt ( AnalogIOTimerValue )) ' MainLogic threads Me . MainLogicLogicThread = New Threading . Timer ( AddressOf MainLogicLogicThreadCall , Nothing , CInt ( MainLogicLogicThreadValue ), CInt ( MainLogicLogicThreadValue )) Me . MainLogicSecondThread = New Threading . Timer ( AddressOf MainLogicSecondThreadCall , Nothing , CInt ( MainLogicSecondThreadValue ), CInt ( MainLogicSecondThreadValue )) ' Points threads Me . PointsLogicThread = New Threading . Timer ( AddressOf PointsLogicThreadCall , Nothing , CInt ( PointsLogicThreadValue ), CInt ( PointsLogicThreadValue )) Me . PointsSecondThread = New Threading . Timer ( AddressOf PointsSecondThreadCall , Nothing , CInt ( PointsSecondThreadValue ), CInt ( PointsSecondThreadValue )) ' Signals threads Me . SignalsLogicThread = New Threading . Timer ( AddressOf SignalsLogicThreadCall , Nothing , CInt ( SignalsLogicThreadValue ), CInt ( SignalsLogicThreadValue )) Me . SignalsSecondThread = New Threading . Timer ( AddressOf SignalsSecondThreadCall , Nothing , CInt ( SignalsSecondThreadValue ), CInt ( SignalsSecondThreadValue )) ' Levers threads Me . LeversLogicThread = New Threading . Timer ( AddressOf LeversLogicThreadCall , Nothing , CInt ( LeversLogicThreadValue ), CInt ( LeversLogicThreadValue )) Me . LeversSecondThread = New Threading . Timer ( AddressOf LeversSecondThreadCall , Nothing , CInt ( LeversSecondThreadValue ), CInt ( LeversSecondThreadValue )) ' Track Sections threads Me . TrackSectionsLogicThread = New Threading . Timer ( AddressOf TrackSectionsLogicThreadCall , Nothing , CInt ( TrackSectionsLogicThreadValue ), CInt ( TrackSectionsLogicThreadValue )) Me . TrackSectionsSecondThread = New Threading . Timer ( AddressOf TrackSectionsSecondThreadCall , Nothing , CInt ( TrackSectionsSecondThreadValue ), CInt ( TrackSectionsSecondThreadValue )) ' Error Logic threads Me . ErrorLogicThread = New Threading . Timer ( AddressOf ErrorLogicThreadCall , Nothing , CInt ( ErrorLogicThreadValue ), CInt ( ErrorLogicThreadValue )) ' LineSide Me . LineSideLogicThread = New Threading . Timer ( AddressOf LineSideLogicThreadCall , Nothing , CInt ( LineSideLogicThreadValue ), CInt ( LineSideLogicThreadValue )) ' Sounds threads Me . SoundsLogicThread = New Threading . Timer ( AddressOf SoundsLogicThreadCall , Nothing , CInt ( SoundsLogicThreadValue ), CInt ( SoundsLogicThreadValue )) Me . SoundsSecondThread = New Threading . Timer ( AddressOf SoundsSecondThreadCall , Nothing , CInt ( SoundsSecondThreadValue ), CInt ( SoundsSecondThreadValue )) ' Buttons threads Me . ButtonsLogicThread = New Threading . Timer ( AddressOf ButtonsLogicThreadCall , Nothing , CInt ( ButtonsLogicThreadValue ), CInt ( ButtonsLogicThreadValue )) Me . ButtonsLogicIndicatorsThread = New Threading . Timer ( AddressOf ButtonsLogicIndicatorsThreadCall , Nothing , CInt ( ButtonsLogicIndicatorsThreadValue ), CInt ( ButtonsLogicIndicatorsThreadValue )) Me . ButtonsSecondThread = New Threading . Timer ( AddressOf ButtonsSecondThreadCall , Nothing , CInt ( ButtonsSecondThreadValue ), CInt ( ButtonsSecondThreadValue )) ' FrameDisplays threads Me . FrameDisplaysLogicThread = New Threading . Timer ( AddressOf FrameDisplaysLogicThreadCall , Nothing , CInt ( FrameDisplaysLogicThreadValue ), CInt ( FrameDisplaysLogicThreadValue )) Me . FrameDisplaysSecondThread = New Threading . Timer ( AddressOf FrameDisplaysSecondThreadCall , Nothing , CInt ( FrameDisplaysSecondThreadValue ), CInt ( FrameDisplaysSecondThreadValue )) ' Json Display thread Me . JsonDisplayLogicThread = New Threading . Timer ( AddressOf JsonDisplayLogicThreadCall , Nothing , CInt ( JsonDisplayThreadValue ), CInt ( JsonDisplayThreadValue )) ' Update Check thread Me . UpdateCheckThread = New Threading . Timer ( AddressOf UpdateCheckThreadCall , Nothing , CInt ( UpdateCheckThreadValue ), CInt ( UpdateCheckThreadValue )) Me . MinimizeBox = True Me . SendToBack () End Sub Private Sub SystemTime_Tick ( sender As Object , e As EventArgs ) Handles SystemTime . Tick ' display current system time . ToolStripStatusLabelTime . Text = DateTime . Now . ToString ( \"dddd, dd MMMM yyyy, hh:mm:ss\" ) ' ModernDisplay . LableTime . Text = DateTime . Now . ToString ( \"HH:mm:ss\" ) If Serial . SerialStatus = \"Read\" Then RBDataReceive . Checked = True RBDataTransmit . Checked = False ElseIf Serial . SerialStatus = \"Write\" Then RBDataReceive . Checked = False RBDataTransmit . Checked = True Else RBDataReceive . Checked = False RBDataTransmit . Checked = False End If GBSerial . Text = ( Serial . SerialStatusText ) LblSerialTime . Text = ( \"Serial speed: \" & Serial . SerialTime & \"ms\" ) End Sub Private Sub SerialCount_Tick ( sender As Object , e As EventArgs ) Handles SerialCount . Tick LblSerialCount . Text = ( \"Ticks per secound: \" & Serial . SerialCount ) Serial . SerialCount = 0 End Sub Private Sub AuxTimer_Tick ( sender As Object , e As EventArgs ) Handles AuxTimer . Tick ' Restart software Dim now = DateTime . Now Dim date1 = New DateTime ( now . Year , now . Month , now . Day , 6 , 0 , 0 ) If now = date1 Then RuntimeConfig . Save () ' System . Windows . Forms . Application . Restart () End If If EastBound = True Then LableDirection . Text = \"Direction : EastBound\" LableDirection . BackColor = Color . Transparent ElseIf WestBound = True Then LableDirection . Text = \"Direction : WestBound\" LableDirection . BackColor = Color . Transparent Else LableDirection . Text = \"Direction : Unknown\" LableDirection . BackColor = Color . Red End If If Mode = \"Computer\" Then LabelMode . Text = \"Mode : Computer\" LabelMode . BackColor = Color . Transparent ElseIf Mode = \"Manual\" Then LabelMode . Text = \"Mode : Manual\" LabelMode . BackColor = Color . Transparent Else LabelMode . Text = \"Mode : Unknown\" LabelMode . BackColor = Color . Red End If If LoggedInAccessLevel > 0 Then LblUserName . Text = ( \"UserName :\" & LoggedInUserName & \" (\" & LoggedInAccessLevel & \")\" ) Else LblUserName . Text = ( \"UserName :\" ) End If If LoggedInAccessLevel >= 3 Then GroupBox2 . Enabled = True ToolStripMenuConfigurations . Enabled = True UpdateSoftwareToolStripMenuItem . Enabled = HasUpdate ToolStripMenuClose . Enabled = True Else GroupBox2 . Enabled = False ToolStripMenuConfigurations . Enabled = False UpdateSoftwareToolStripMenuItem . Enabled = False ToolStripMenuClose . Enabled = False End If End Sub Private Sub TickAnalogIO ( ByVal state As Object ) AnalogIOManager . Logic () End Sub Private Sub SystemTick_Tick ( sender As Object , e As EventArgs ) Handles SystemTick . Tick ' PlaySound () End Sub ' Threads for main logic Private Sub MainLogicLogicThreadCall ( ByVal state As Object ) LogicStart . MainStartLogic () Safety . Logic () SignalBackLockLogic () Errors . checkRequests () End Sub Private Sub MainLogicSecondThreadCall ( ByVal state As Object ) PowerLogic () SignalBackLockLogicSecoundTick () UserManagmentSecoundTick () End Sub ' Threads for points Private Sub PointsLogicThreadCall ( ByVal state As Object ) Points . Points () End Sub Private Sub PointsSecondThreadCall ( ByVal state As Object ) Points . SecondTick () End Sub ' Threads for Signals Private Sub SignalsLogicThreadCall ( ByVal state As Object ) Signals . Signals () End Sub Private Sub SignalsSecondThreadCall ( ByVal state As Object ) Signals . SecondTick () Initializations . SecondTick () End Sub ' Threads for Levers Private Sub LeversLogicThreadCall ( ByVal state As Object ) Levers . LeversLogic () End Sub Private Sub LeversSecondThreadCall ( ByVal state As Object ) Levers . SecondTick () End Sub ' Threads for ProxySensors Private Sub ErrorLogicThreadCall ( ByVal state As Object ) Errors . DisplayErrorLogic () Errors . DisplayRequestLogic () End Sub Private Sub LineSideLogicThreadCall ( ByVal state As Object ) LineSide . LineSideLogic () End Sub ' Threads for Track sections Private Sub TrackSectionsLogicThreadCall ( ByVal state As Object ) TrackSections . Logic () PointSections . Logic () End Sub Private Sub TrackSectionsSecondThreadCall ( ByVal state As Object ) TrackSections . SecondTick () PointSections . SecondTick () AIStart . AIStart () End Sub ' Threads for sounds Private Sub SoundsLogicThreadCall ( ByVal state As Object ) End Sub Private Sub SoundsSecondThreadCall ( ByVal state As Object ) Sound . SecondTick () End Sub ' Threads for buttons Private Sub ButtonsLogicThreadCall ( ByVal state As Object ) Buttons . ButtonsLogic () End Sub Private Sub ButtonsLogicIndicatorsThreadCall ( ByVal state As Object ) Buttons . ButtonIndicators () Fuses . FuseLogic () End Sub Private Sub ButtonsSecondThreadCall ( ByVal state As Object ) Buttons . SecondTick () End Sub ' Threads for FrameDisplays Private Sub FrameDisplaysLogicThreadCall ( ByVal state As Object ) MimicDiagram . MimicDiagram () FrameIndicatorLights . FrameIndicatorLights () End Sub Private Sub FrameDisplaysSecondThreadCall ( ByVal state As Object ) MimicDiagram . Flash () FrameIndicatorLights . Flash () Json_Values . Flash () End Sub Private Sub JsonDisplayLogicThreadCall ( ByVal state As Object ) JsonDisplay . updateJSon () End Sub ' Testmode Private Sub TimerPointTest_Tick ( sender As Object , e As EventArgs ) Handles TimerPointTest . Tick If Points . testNormal = True Then Points . testNormal = False Else Points . testNormal = True End If Points . TestMode = CBPointTest . Checked If TestMode = True Then If testModeCount = 0 Then ' Sound . CustomSound ( \"Warning!, the signalling System is in it's test mode! Please do not run any rolling stock!\" ) testModeCount = 12 Else testModeCount -= 1 End If End If End Sub Private Sub MemCheck_Tick ( sender As Object , e As EventArgs ) Handles MemCheck . Tick Dim c As Process = Process . GetCurrentProcess () LblMem . Text = \"Mem Usage (Working Set): \" & Math . Round ( c . WorkingSet / 1024 / 1024 , 2 , MidpointRounding . AwayFromZero ) & \" MB Current Memory Usage\" End Sub Private Sub MemAlert_Tick ( sender As Object , e As EventArgs ) Handles MemAlert . Tick Dim c As Process = Process . GetCurrentProcess () Dim MemLavel As Double = Math . Round (( c . WorkingSet / 1024 ) / 1024 , 2 , MidpointRounding . AwayFromZero ) Dim memlevel As Integer If memlevel >= 750 Then Errors . NewError ( \"Warning, aoftware memory is running above the flagged rate, current usage is \" & memlevel & \"MB\" ) Else Errors . RemoveError ( \"Warning, aoftware memory is running above the flagged rate, current usage is \" & memlevel & \"MB\" ) End If If memlevel >= 1024 Then Errors . NewError ( \"CRITICAL ERROR, software is closing due to memory usage being over 1GB\" ) RuntimeConfig . Save () Serial . SerialClose () Me . Close () Else Errors . RemoveError ( \"CRITICAL ERROR, software is closing due to memory usage being over 1GB\" ) End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub Private Sub ToolStripMenuConfigurations_Click ( sender As Object , e As EventArgs ) Handles ToolStripMenuConfigurations . Click PopUpConfig . Show () End Sub Private Sub UpdateSoftwareToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles UpdateSoftwareToolStripMenuItem . Click Updater . UpdateNow () End Sub Private Sub IOMonitorToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles IOMonitorToolStripMenuItem . Click IOMonitor . Show () End Sub Private Sub LogInToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles LogInToolStripMenuItem . Click LoginForm . Show () End Sub ' Thread for update check Private Sub UpdateCheckThreadCall ( ByVal state As Object ) CheckForUpdate () End Sub Private Sub BtnCheckUpdate_Click ( sender As Object , e As EventArgs ) Handles btnCheckUpdate . Click CheckForUpdate () End Sub Private Sub CheckForUpdate () If Not File . Exists ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) Then Exit Sub End If Dim updater As New Process () updater . StartInfo . RedirectStandardOutput = True updater . StartInfo . RedirectStandardError = False updater . StartInfo . UseShellExecute = False updater . StartInfo . CreateNoWindow = True updater . StartInfo . Arguments = \"/remote\" updater . StartInfo . FileName = \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" updater . Start () Dim output As String = Nothing updater . WaitForExit () output = updater . StandardOutput . ReadLine () lblRemoteVersion . Text = output If updater . ExitCode = - 1 Then ' There is an update available HasUpdate = True Errors . NewError ( \"Software update ready for install\" ) Else HasUpdate = False Errors . RemoveError ( \"Software update ready for install\" ) End If updater . Close () End Sub Private Sub NewConfigBetaToolStripMenuItem_Click ( sender As Object , e As EventArgs ) Handles NewConfigBetaToolStripMenuItem . Click Configs . Show () End Sub Private Sub CheckBox1_CheckedChanged ( sender As Object , e As EventArgs ) Handles CheckBox1 . CheckedChanged If CheckBox1 . Checked = True Then FrameIndicatorLights . RGBMode = True Else FrameIndicatorLights . RGBMode = False End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Messages_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/Messages.vb \u00b6 Source code \u00b6 Module Messages '################################################################################################################################## ' --> Power <-- ' Generic error message for output cards power detection Public Function OutPutCardsSupplyLost ( CardNumber As Integer , ChipNumber As Integer ) As String Return ( \"Critical: Supply Lost to output card \" & CardNumber . ToString & \", Group \" & ChipNumber . ToString & \"!\" ) End Function ' Generic error message for output cards power detection Public Function OutPutCardsSupplyRestored ( CardNumber As Integer , ChipNumber As Integer ) As String Return ( \"Info: Supply restored to output card \" & CardNumber . ToString & \", Group \" & ChipNumber . ToString & \".\" ) End Function '################################################################################################################################## ' --> Points <-- ' Generic error message for points reading normal and reverse at the same time . Public Function PointReadingNormalAndReverseSameTime ( PointName As String ) Return ( \"WARNING: Point \" & PointName & \" is reading 'Normal' and 'Reverse'!\" ) End Function ' Generic error message for points with no return . Public Function PointReadingNoReturn ( PointName As String ) Return ( \"WARNING: Point \" & PointName & \" has not got a return!\" ) End Function ' Generic error message for points not changing . Public Function PointNotChanging ( PointName As String ) Return ( \"Info: Point \" & PointName & \" is not changing!\" ) End Function '################################################################################################################################## ' --> LineSide <-- ' Generic error messages for tunnel not registering as fully up Public Function TunnelNotRegistering ( TunnelEnd As String ) Return ( \"Critical: Tunnel shutter \" & TunnelEnd & \" not registering as open!\" ) End Function ' Generic error messages for tunnel inputs both on Public Function TunnelInputsBothOn ( TunnelEnd As String ) Return ( \"Warning: Tunnel shutter \" & TunnelEnd & \" both inputs high!\" ) End Function ' Generic error messages for tunnel inouts both off Public Function TunnelInputsBothOff ( TunnelEnd As String ) Return ( \"Warning: Tunnel shutter \" & TunnelEnd & \" both inputs low!\" ) End Function ' Level Crossing Train Routed Public Function LevelCrossingTrainRouted ( Line As String ) Return ( \"Warning: Crossing open, train routed on \" & Line & \"!\" ) End Function ' Level Crossing Train Routed Public Function LevelCrossingTrainInSection ( Section As String ) Return ( \"Warning: Crossing open, train in section \" & Section & \"!\" ) End Function ' Level Crossing gate sensor both inputs high Public Function LevelCrossingSensorBothInputsHigh ( Sensor As String ) Return ( \"Warning: Crossing gate sensor \" & Sensor & \" both inputs high!\" ) End Function ' Level Crossing gate sensor both inputs Low Public Function LevelCrossingSensorBothInputsLow ( Sensor As String ) Return ( \"Critical: Crossing gate sensor \" & Sensor & \" both inputs low!\" ) End Function '################################################################################################################################## ' --> LineSide <-- ' Generic error messages for levers reading both positions Public Function LeverReadingBothWays ( LeverNumber As Integer ) Return ( \"WARNING: Lever \" & LeverNumber . ToString & \" is reading Normal/Reverse at the same time!\" ) End Functionnd Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Messages.vb"},{"location":"mainsystem/Files/Messages_8vb/#githubsignallingsystemehmr-signalling-systemlogicmessagesvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Messages.vb"},{"location":"mainsystem/Files/Messages_8vb/#source-code","text":"Module Messages '################################################################################################################################## ' --> Power <-- ' Generic error message for output cards power detection Public Function OutPutCardsSupplyLost ( CardNumber As Integer , ChipNumber As Integer ) As String Return ( \"Critical: Supply Lost to output card \" & CardNumber . ToString & \", Group \" & ChipNumber . ToString & \"!\" ) End Function ' Generic error message for output cards power detection Public Function OutPutCardsSupplyRestored ( CardNumber As Integer , ChipNumber As Integer ) As String Return ( \"Info: Supply restored to output card \" & CardNumber . ToString & \", Group \" & ChipNumber . ToString & \".\" ) End Function '################################################################################################################################## ' --> Points <-- ' Generic error message for points reading normal and reverse at the same time . Public Function PointReadingNormalAndReverseSameTime ( PointName As String ) Return ( \"WARNING: Point \" & PointName & \" is reading 'Normal' and 'Reverse'!\" ) End Function ' Generic error message for points with no return . Public Function PointReadingNoReturn ( PointName As String ) Return ( \"WARNING: Point \" & PointName & \" has not got a return!\" ) End Function ' Generic error message for points not changing . Public Function PointNotChanging ( PointName As String ) Return ( \"Info: Point \" & PointName & \" is not changing!\" ) End Function '################################################################################################################################## ' --> LineSide <-- ' Generic error messages for tunnel not registering as fully up Public Function TunnelNotRegistering ( TunnelEnd As String ) Return ( \"Critical: Tunnel shutter \" & TunnelEnd & \" not registering as open!\" ) End Function ' Generic error messages for tunnel inputs both on Public Function TunnelInputsBothOn ( TunnelEnd As String ) Return ( \"Warning: Tunnel shutter \" & TunnelEnd & \" both inputs high!\" ) End Function ' Generic error messages for tunnel inouts both off Public Function TunnelInputsBothOff ( TunnelEnd As String ) Return ( \"Warning: Tunnel shutter \" & TunnelEnd & \" both inputs low!\" ) End Function ' Level Crossing Train Routed Public Function LevelCrossingTrainRouted ( Line As String ) Return ( \"Warning: Crossing open, train routed on \" & Line & \"!\" ) End Function ' Level Crossing Train Routed Public Function LevelCrossingTrainInSection ( Section As String ) Return ( \"Warning: Crossing open, train in section \" & Section & \"!\" ) End Function ' Level Crossing gate sensor both inputs high Public Function LevelCrossingSensorBothInputsHigh ( Sensor As String ) Return ( \"Warning: Crossing gate sensor \" & Sensor & \" both inputs high!\" ) End Function ' Level Crossing gate sensor both inputs Low Public Function LevelCrossingSensorBothInputsLow ( Sensor As String ) Return ( \"Critical: Crossing gate sensor \" & Sensor & \" both inputs low!\" ) End Function '################################################################################################################################## ' --> LineSide <-- ' Generic error messages for levers reading both positions Public Function LeverReadingBothWays ( LeverNumber As Integer ) Return ( \"WARNING: Lever \" & LeverNumber . ToString & \" is reading Normal/Reverse at the same time!\" ) End Functionnd Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/MimicDiagram_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/MimicDiagram.vb \u00b6 Source code \u00b6 Module MimicDiagram Dim FlashOn As Boolean = False ' Start Public Sub MimicDiagram () MimicDiagramSectionA () MimicDiagramSectionB () MimicDiagramSectionC () MimicDiagramSectionD () MimicDiagramSectionE () MimicDiagramSectionF () MimicDiagramSectionF13 () MimicDiagramSectionG () MimicDiagramSectionH () MimicDiagramSectionI () MimicDiagramSectionJ () MimicDiagramSectionK () MimicDiagramSectionL () MimicDiagramSectionM () MimicDiagramSectionN () MimicDiagramSectionO () MimicDiagramSectionP () MimicDiagramSectionQ () MimicDiagramPoint5a () MimicDiagramPoint5b () MimicDiagramPoint6a () MimicDiagramPoint6b () MimicDiagramPoint10 () MimicDiagramPoint11 () MimicDiagramPoint12 () MimicDiagramPoint13 () MimicDiagramPoint14 () MimicDiagramPoint19 () MimicDiagramDirection () End Sub Public Sub MimicDiagramSectionA () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 0 End If End If End Sub Public Sub MimicDiagramSectionB () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 0 End If End If End Sub Public Sub MimicDiagramSectionC () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 0 End If End If End Sub Public Sub MimicDiagramSectionD () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 0 End If End If End Sub Public Sub MimicDiagramSectionE () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE = True ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 0 End If End If End Sub Public Sub MimicDiagramSectionF () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF = True ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 0 End If End If End Sub Public Sub MimicDiagramSectionF13 () If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And MimicDisplayPower = True Then If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If Else If FlashOn = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If End If Else If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If End If End If End Sub Public Sub MimicDiagramSectionG () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 0 End If End If End Sub Public Sub MimicDiagramSectionH () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 0 End If End If End Sub Public Sub MimicDiagramSectionI () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 0 End If End If End Sub Public Sub MimicDiagramSectionJ () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 0 End If End If End Sub Public Sub MimicDiagramSectionK () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 0 End If End If End Sub Public Sub MimicDiagramSectionL () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 0 End If End If End Sub Public Sub MimicDiagramSectionM () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 0 End If End If End Sub Public Sub MimicDiagramSectionN () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 0 End If End If End Sub Public Sub MimicDiagramSectionO () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 0 End If End If End Sub Public Sub MimicDiagramSectionP () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 0 End If End If End Sub Public Sub MimicDiagramSectionQ () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 0 End If End If End Sub Public Sub MimicDiagramPoint5a () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And Point5Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P5a ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If ElseIf PointReturns ( PointNames . P5a ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If End If End Sub Public Sub MimicDiagramPoint5b () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P5b ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If ElseIf PointReturns ( PointNames . P5b ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If End If End Sub Public Sub MimicDiagramPoint6a () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And Point6Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P6a ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If ElseIf PointReturns ( PointNames . P6a ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If End If End Sub Public Sub MimicDiagramPoint6b () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P6b ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If ElseIf PointReturns ( PointNames . P6b ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If End If End Sub Public Sub MimicDiagramPoint10 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" And Point10Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P10 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If ElseIf PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint11 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" And Point11Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If ElseIf PointReturns ( PointNames . P11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint12 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" And Point12Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If ElseIf PointReturns ( PointNames . P12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint13 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" And Point13Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If ElseIf PointReturns ( PointNames . P13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint14 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" And Point14Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P14 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If ElseIf PointReturns ( PointNames . P14 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint19 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" And Point19Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P19 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If ElseIf PointReturns ( PointNames . P19 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If End If End Sub Public Sub MimicDiagramDirection () If EastBound = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayEB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayEB ) = 0 End If If WestBound = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayWB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayWB ) = 0 End If End Sub ' Flash Public Sub Flash () FlashOn = Not FlashOn End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/MimicDiagram.vb"},{"location":"mainsystem/Files/MimicDiagram_8vb/#githubsignallingsystemehmr-signalling-systemdevicesmimicdiagramvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/MimicDiagram.vb"},{"location":"mainsystem/Files/MimicDiagram_8vb/#source-code","text":"Module MimicDiagram Dim FlashOn As Boolean = False ' Start Public Sub MimicDiagram () MimicDiagramSectionA () MimicDiagramSectionB () MimicDiagramSectionC () MimicDiagramSectionD () MimicDiagramSectionE () MimicDiagramSectionF () MimicDiagramSectionF13 () MimicDiagramSectionG () MimicDiagramSectionH () MimicDiagramSectionI () MimicDiagramSectionJ () MimicDiagramSectionK () MimicDiagramSectionL () MimicDiagramSectionM () MimicDiagramSectionN () MimicDiagramSectionO () MimicDiagramSectionP () MimicDiagramSectionQ () MimicDiagramPoint5a () MimicDiagramPoint5b () MimicDiagramPoint6a () MimicDiagramPoint6b () MimicDiagramPoint10 () MimicDiagramPoint11 () MimicDiagramPoint12 () MimicDiagramPoint13 () MimicDiagramPoint14 () MimicDiagramPoint19 () MimicDiagramDirection () End Sub Public Sub MimicDiagramSectionA () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionA ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionA ) = 0 End If End If End Sub Public Sub MimicDiagramSectionB () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionB ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionB ) = 0 End If End If End Sub Public Sub MimicDiagramSectionC () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionC ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionC ) = 0 End If End If End Sub Public Sub MimicDiagramSectionD () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionD ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionD ) = 0 End If End If End Sub Public Sub MimicDiagramSectionE () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionE ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE = True ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionE ) = 0 End If End If End Sub Public Sub MimicDiagramSectionF () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF = True ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionF ) = 0 End If End If End Sub Public Sub MimicDiagramSectionF13 () If Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And MimicDisplayPower = True Then If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF13 ) = \"Detect\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If Else If FlashOn = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If End If Else If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionF ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionFF13 ) = 0 End If End If End If End Sub Public Sub MimicDiagramSectionG () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionG ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionG ) = 0 End If End If End Sub Public Sub MimicDiagramSectionH () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionH ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionH ) = 0 End If End If End Sub Public Sub MimicDiagramSectionI () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionI ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionI ) = 0 End If End If End Sub Public Sub MimicDiagramSectionJ () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionJ ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionJ ) = 0 End If End If End Sub Public Sub MimicDiagramSectionK () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionK ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionK ) = 0 End If End If End Sub Public Sub MimicDiagramSectionL () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionL ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionL ) = 0 End If End If End Sub Public Sub MimicDiagramSectionM () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionM ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionM ) = 0 End If End If End Sub Public Sub MimicDiagramSectionN () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionN ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionN ) = 0 End If End If End Sub Public Sub MimicDiagramSectionO () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionO ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionO ) = 0 End If End If End Sub Public Sub MimicDiagramSectionP () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionP ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionP ) = 0 End If End If End Sub Public Sub MimicDiagramSectionQ () If RuntimeConfig . config . TrackSectionOverrides ( TrackSectionNames . SectionQ ) = \"Detect\" And MimicDisplayPower = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplaySectionQ ) = 0 End If End If End Sub Public Sub MimicDiagramPoint5a () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = \"System\" And Point5Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P5a ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If ElseIf PointReturns ( PointNames . P5a ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5a ) = 0 End If End If End Sub Public Sub MimicDiagramPoint5b () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = \"System\" And Point5Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P5b ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If ElseIf PointReturns ( PointNames . P5b ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint5b ) = 0 End If End If End Sub Public Sub MimicDiagramPoint6a () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = \"System\" And Point6Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P6a ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If ElseIf PointReturns ( PointNames . P6a ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6a ) = 0 End If End If End Sub Public Sub MimicDiagramPoint6b () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = \"System\" And Point6Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P6b ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If ElseIf PointReturns ( PointNames . P6b ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint6b ) = 0 End If End If End Sub Public Sub MimicDiagramPoint10 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = \"System\" And Point10Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P10 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If ElseIf PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint10 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint11 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = \"System\" And Point11Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If ElseIf PointReturns ( PointNames . P11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint11 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint12 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = \"System\" And Point12Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If ElseIf PointReturns ( PointNames . P12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint12 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint13 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = \"System\" And Point13Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If ElseIf PointReturns ( PointNames . P13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint13 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint14 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = \"System\" And Point14Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P14 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If ElseIf PointReturns ( PointNames . P14 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint14 ) = 0 End If End If End Sub Public Sub MimicDiagramPoint19 () If RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = \"System\" And RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = \"System\" And Point19Initiated = True And MimicDisplayPower = True Then If PointReturns ( PointNames . P19 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If ElseIf PointReturns ( PointNames . P19 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If Else If FlashOn = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayPoint19 ) = 0 End If End If End Sub Public Sub MimicDiagramDirection () If EastBound = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayEB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayEB ) = 0 End If If WestBound = True And MimicDisplayPower = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayWB ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressMimicDisplayWB ) = 0 End If End Sub ' Flash Public Sub Flash () FlashOn = Not FlashOn End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/PointSections_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/PointSections.vb \u00b6 Source code \u00b6 Module PointSections Public ReadOnly PointSectionCount As Integer = 10 Public ReadOnly SectonPointDisplayNames () As String = { \"P5a\" , \"P5b\" , \"P6a\" , \"P6b\" , \"P10\" , \"P11\" , \"P12\" , \"P13\" , \"P14\" , \"P19\" } Public PointSectionAnalogClear () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionError () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionErrorCount () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public PointSectionErrorCheckLock () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionTimer () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public PointSectionField () As String = { \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" } Public PointSectionUnoccupied () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public Sub Logic () For i As Integer = 0 To PointSectionCount - 1 ' Check manually section voltage against set voltage If AnalogIOManager . ActualAnalogValue ( AnalogInputPointSections ( i )) >= RuntimeConfig . config . PointSectionSetPoint ( i ) Then PointSectionAnalogClear ( i ) = True Else PointSectionAnalogClear ( i ) = False End If ' Reset error count and clear error state if point starts detecting again If PointSectionUnoccupied ( i ) = False Then PointSectionErrorCount ( i ) = 0 PointSectionError ( i ) = False Errors . RemoveError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Needs testing!\" ) End If ' When error count matches trigger number then send error message on telegram If PointSectionError ( i ) = False Then If PointSectionErrorCount ( i ) >= SectionPointErrorTriggerCount Then PointSectionError ( i ) = True Errors . NewError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Needs testing!\" ) End If End If ' Voltage too low error If AnalogIOManager . ActualAnalogValue ( AnalogInputPointSections ( i )) <= RuntimeConfig . config . PointSectionSetPointError ( i ) Then Errors . NewError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Under Voltage!\" ) Else Errors . RemoveError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Under Voltage!\" ) End If ' Set timers If PointSectionAnalogClear ( i ) = False Then PointSectionTimer ( i ) = SectionPointDelay End If ' Final output logic If PointSectionAnalogClear ( i ) = True And PointSectionTimer ( i ) = 0 Then PointSectionField ( i ) = \"Non-Occupied\" If RuntimeConfig . config . PointSectionOverrides ( i ) = \"Detect\" Then PointSectionUnoccupied ( i ) = True ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"Occupy\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"UnOccupied\" Then PointSectionUnoccupied ( i ) = True Else PointSectionUnoccupied ( i ) = False End If Else PointSectionField ( i ) = \"Occupied\" If RuntimeConfig . config . PointSectionOverrides ( i ) = \"Detect\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"Occupy\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"UnOccupied\" Then PointSectionUnoccupied ( i ) = True Else PointSectionUnoccupied ( i ) = False End If End If Next ' Error Logic ' PointSectionP5a ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P5a ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP5a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = True ElseIf PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P5a ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP5a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True And PointReturns ( PointNames . P5a ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True And PointReturns ( PointNames . P5a ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False End If ' PointSectionP5b ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointReturns ( PointNames . P5b ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP5b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointReturns ( PointNames . P5b ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP5b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True And PointReturns ( PointNames . P5b ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True And PointReturns ( PointNames . P5b ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False End If ' PointSectionP6a ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P6a ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP6a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P6a ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP6a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True And PointReturns ( PointNames . P6a ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True And PointReturns ( PointNames . P6a ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False End If ' PointSectionP6b ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointReturns ( PointNames . P6b ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP6b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointReturns ( PointNames . P6b ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP6b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True And PointReturns ( PointNames . P6b ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True And PointReturns ( PointNames . P6b ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False End If ' PointSectionP10 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And PointReturns ( PointNames . P10 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP10 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And PointReturns ( PointNames . P10 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP10 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P10 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True And PointReturns ( PointNames . P10 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False End If ' PointSectionP11 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointReturns ( PointNames . P11 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP11 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointReturns ( PointNames . P11 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP11 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P11 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True And PointReturns ( PointNames . P11 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False End If ' PointSectionP12 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointReturns ( PointNames . P12 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP12 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointReturns ( PointNames . P12 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP12 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And PointReturns ( PointNames . P12 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True And PointReturns ( PointNames . P12 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False End If ' PointSectionP13 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointReturns ( PointNames . P13 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP13 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointReturns ( PointNames . P13 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP13 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And PointReturns ( PointNames . P13 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True And PointReturns ( PointNames . P13 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False End If ' PointSectionP14 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And PointReturns ( PointNames . P14 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP14 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And PointReturns ( PointNames . P14 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP14 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True And PointReturns ( PointNames . P14 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True And PointReturns ( PointNames . P14 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False End If ' PointSectionP19 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And PointReturns ( PointNames . P19 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP19 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And PointReturns ( PointNames . P19 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP19 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And PointReturns ( PointNames . P19 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True And PointReturns ( PointNames . P19 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False End If End Sub Public Sub SecondTick () For i As Integer = 0 To PointSectionCount - 1 If Not PointSectionTimer ( i ) = 0 Then PointSectionTimer ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/PointSections.vb"},{"location":"mainsystem/Files/PointSections_8vb/#githubsignallingsystemehmr-signalling-systemdevicespointsectionsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/PointSections.vb"},{"location":"mainsystem/Files/PointSections_8vb/#source-code","text":"Module PointSections Public ReadOnly PointSectionCount As Integer = 10 Public ReadOnly SectonPointDisplayNames () As String = { \"P5a\" , \"P5b\" , \"P6a\" , \"P6b\" , \"P10\" , \"P11\" , \"P12\" , \"P13\" , \"P14\" , \"P19\" } Public PointSectionAnalogClear () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionError () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionErrorCount () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public PointSectionErrorCheckLock () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public PointSectionTimer () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public PointSectionField () As String = { \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" } Public PointSectionUnoccupied () As Boolean = { False , False , False , False , False , False , False , False , False , False } Public Sub Logic () For i As Integer = 0 To PointSectionCount - 1 ' Check manually section voltage against set voltage If AnalogIOManager . ActualAnalogValue ( AnalogInputPointSections ( i )) >= RuntimeConfig . config . PointSectionSetPoint ( i ) Then PointSectionAnalogClear ( i ) = True Else PointSectionAnalogClear ( i ) = False End If ' Reset error count and clear error state if point starts detecting again If PointSectionUnoccupied ( i ) = False Then PointSectionErrorCount ( i ) = 0 PointSectionError ( i ) = False Errors . RemoveError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Needs testing!\" ) End If ' When error count matches trigger number then send error message on telegram If PointSectionError ( i ) = False Then If PointSectionErrorCount ( i ) >= SectionPointErrorTriggerCount Then PointSectionError ( i ) = True Errors . NewError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Needs testing!\" ) End If End If ' Voltage too low error If AnalogIOManager . ActualAnalogValue ( AnalogInputPointSections ( i )) <= RuntimeConfig . config . PointSectionSetPointError ( i ) Then Errors . NewError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Under Voltage!\" ) Else Errors . RemoveError ( \"Section \" & SectonPointDisplayNames ( i ) & \", Under Voltage!\" ) End If ' Set timers If PointSectionAnalogClear ( i ) = False Then PointSectionTimer ( i ) = SectionPointDelay End If ' Final output logic If PointSectionAnalogClear ( i ) = True And PointSectionTimer ( i ) = 0 Then PointSectionField ( i ) = \"Non-Occupied\" If RuntimeConfig . config . PointSectionOverrides ( i ) = \"Detect\" Then PointSectionUnoccupied ( i ) = True ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"Occupy\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"UnOccupied\" Then PointSectionUnoccupied ( i ) = True Else PointSectionUnoccupied ( i ) = False End If Else PointSectionField ( i ) = \"Occupied\" If RuntimeConfig . config . PointSectionOverrides ( i ) = \"Detect\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"Occupy\" Then PointSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . PointSectionOverrides ( i ) = \"UnOccupied\" Then PointSectionUnoccupied ( i ) = True Else PointSectionUnoccupied ( i ) = False End If End If Next ' Error Logic ' PointSectionP5a ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P5a ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP5a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = True ElseIf PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P5a ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP5a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True And PointReturns ( PointNames . P5a ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True And PointReturns ( PointNames . P5a ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5a ) = False End If ' PointSectionP5b ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointReturns ( PointNames . P5b ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP5b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointReturns ( PointNames . P5b ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP5b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True And PointReturns ( PointNames . P5b ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = True And PointReturns ( PointNames . P5b ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP5b ) = False End If ' PointSectionP6a ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P6a ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP6a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P6a ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP6a ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = True And PointReturns ( PointNames . P6a ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True And PointReturns ( PointNames . P6a ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6a ) = False End If ' PointSectionP6b ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointReturns ( PointNames . P6b ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP6b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointReturns ( PointNames . P6b ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP6b ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = True And PointReturns ( PointNames . P6b ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = True And PointReturns ( PointNames . P6b ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP6b ) = False End If ' PointSectionP10 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And PointReturns ( PointNames . P10 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP10 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And PointReturns ( PointNames . P10 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP10 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointReturns ( PointNames . P10 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = True And PointReturns ( PointNames . P10 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP10 ) = False End If ' PointSectionP11 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointReturns ( PointNames . P11 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP11 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointReturns ( PointNames . P11 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP11 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointReturns ( PointNames . P11 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = True And PointReturns ( PointNames . P11 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP11 ) = False End If ' PointSectionP12 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointReturns ( PointNames . P12 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP12 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointReturns ( PointNames . P12 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP12 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And PointReturns ( PointNames . P12 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = True And PointReturns ( PointNames . P12 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP12 ) = False End If ' PointSectionP13 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointReturns ( PointNames . P13 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP13 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointReturns ( PointNames . P13 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP13 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = True And PointReturns ( PointNames . P13 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = True And PointReturns ( PointNames . P13 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP13 ) = False End If ' PointSectionP14 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And PointReturns ( PointNames . P14 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP14 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And PointReturns ( PointNames . P14 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP14 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = True And PointReturns ( PointNames . P14 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = True And PointReturns ( PointNames . P14 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP14 ) = False End If ' PointSectionP19 ' Check if point has not triggered when sections either side have been If PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And PointReturns ( PointNames . P19 ) = PointInNormal Then PointSectionErrorCount ( PointSectionNames . SectionP19 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And PointReturns ( PointNames . P19 ) = PointInReverse Then PointSectionErrorCount ( PointSectionNames . SectionP19 ) = + 1 PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = True End If End If ' if sections around point are clear then clear check lock If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = True And PointReturns ( PointNames . P19 ) = PointInNormal Then PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = True And PointReturns ( PointNames . P19 ) = PointInReverse Then PointSectionErrorCheckLock ( PointSectionNames . SectionP19 ) = False End If End Sub Public Sub SecondTick () For i As Integer = 0 To PointSectionCount - 1 If Not PointSectionTimer ( i ) = 0 Then PointSectionTimer ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Points_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Points.vb \u00b6 Source code \u00b6 Public Module Points Public ReadOnly PointCount As Integer = 10 Public ReadOnly PointDisplayNames () As String = { \"Point5a\" , \"Point5b\" , \"Point6a\" , \"Point6b\" , \"Point10\" , \"Point11\" , \"Point12\" , \"Point13\" , \"Point14\" , \"Point19\" } Public UsingAir As String = \"Disabled\" Public AirInUse As Boolean = False Public PointRequestedOutputs () As String = { PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF } Public PointNoReturnCountdown () As Integer = { 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 } Public PointNotChangingCountdown () As Integer = { 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 } Public PointReturns () As String = { PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn } Public PointFieldStates () As String = { PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn } Public PointOutputs () As String = { PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF } ' Point detection settings Public PointDetectVoltage As Integer = 10 Public PointErrorVoltage As Integer = 5 Public testNormal As Boolean = False Public TestMode As Boolean = False ' Start Public Sub Points () If SignalsOn = True Then PointsErrorDetection () If TestMode = True Then If testNormal = True Then For i As Integer = 0 To PointCount - 1 PointOutputs ( i ) = PointToNormal Next Else For i As Integer = 0 To PointCount - 1 PointOutputs ( i ) = PointToReverse Next End If UsingAir = \"Enabled (Without safety net)\" AirInUse = True Else If RuntimeConfig . config . AirEnabled = True And Safety . EStopTriggered = False Then If RuntimeConfig . config . ForceAir = True Then If Mode = LogicModeManual Then AirOnBypassSafety () ElseIf Mode = LogicModeComputer Then AirOnWithSafetyChecks () End If Else If AirOffsetting = True Then AirOff () Else If Mode = LogicModeManual Then AirOnBypassSafety () ElseIf Mode = LogicModeComputer Then AirOnWithSafetyChecks () End If End If End If Else AirOff () End If End If PointIOUpdate () End Sub ' Operating points Public Sub AirOnWithSafetyChecks () ' Point 5 a If Initializations . Point5Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Then PointOutputs ( PointNames . P5a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Then PointOutputs ( PointNames . P5a ) = PointToReverse Else PointOutputs ( PointNames . P5a ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP5a ) = True Then If PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Then PointOutputs ( PointNames . P5a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Then PointOutputs ( PointNames . P5a ) = PointToReverse Else PointOutputs ( PointNames . P5a ) = PointToOFF End If Else PointOutputs ( PointNames . P5a ) = PointToOFF End If Else PointOutputs ( PointNames . P5a ) = PointToOFF End If ' Point 5 b If Initializations . Point5Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Then PointOutputs ( PointNames . P5b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Then PointOutputs ( PointNames . P5b ) = PointToReverse Else PointOutputs ( PointNames . P5b ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP5b ) = True Then If PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Then PointOutputs ( PointNames . P5b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Then PointOutputs ( PointNames . P5b ) = PointToReverse Else PointOutputs ( PointNames . P5b ) = PointToOFF End If Else PointOutputs ( PointNames . P5b ) = PointToOFF End If Else PointOutputs ( PointNames . P5b ) = PointToOFF End If ' Point 6 a If Initializations . Point6Initiated Then If EastBound And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Then PointOutputs ( PointNames . P6a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Then PointOutputs ( PointNames . P6a ) = PointToReverse Else PointOutputs ( PointNames . P6a ) = PointToOFF End If ElseIf WestBound And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True Then If PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Then PointOutputs ( PointNames . P6a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Then PointOutputs ( PointNames . P6a ) = PointToReverse Else PointOutputs ( PointNames . P6a ) = PointToOFF End If Else PointOutputs ( PointNames . P6a ) = PointToOFF End If Else PointOutputs ( PointNames . P6a ) = PointToOFF End If ' Point 6 b If Initializations . Point6Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 Then If PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Then PointOutputs ( PointNames . P6b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Then PointOutputs ( PointNames . P6b ) = PointToReverse Else PointOutputs ( PointNames . P6b ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP6b ) = True Then If PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Then PointOutputs ( PointNames . P6b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Then PointOutputs ( PointNames . P6b ) = PointToReverse Else PointOutputs ( PointNames . P6b ) = PointToOFF End If Else PointOutputs ( PointNames . P6b ) = PointToOFF End If Else PointOutputs ( PointNames . P6b ) = PointToOFF End If ' Point 10 If Initializations . Point10Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Then PointOutputs ( PointNames . P10 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P10 ) = PointToReverse Then PointOutputs ( PointNames . P10 ) = PointToReverse Else PointOutputs ( PointNames . P10 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP10 ) = True Then If PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Then PointOutputs ( PointNames . P10 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P10 ) = PointToReverse Then PointOutputs ( PointNames . P10 ) = PointToReverse Else PointOutputs ( PointNames . P10 ) = PointToOFF End If Else PointOutputs ( PointNames . P10 ) = PointToOFF End If Else PointOutputs ( PointNames . P10 ) = PointToOFF End If ' Point 11 If Initializations . Point11Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Then PointOutputs ( PointNames . P11 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Then PointOutputs ( PointNames . P11 ) = PointToReverse Else PointOutputs ( PointNames . P11 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP11 ) = True Then If PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Then PointOutputs ( PointNames . P11 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Then PointOutputs ( PointNames . P11 ) = PointToReverse Else PointOutputs ( PointNames . P11 ) = PointToOFF End If Else PointOutputs ( PointNames . P11 ) = PointToOFF End If Else PointOutputs ( PointNames . P11 ) = PointToOFF End If ' Point 12 If Initializations . Point12Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And BackLockAJ4EtoAJ7E = 0 Then If PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Then PointOutputs ( PointNames . P12 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Then PointOutputs ( PointNames . P12 ) = PointToReverse Else PointOutputs ( PointNames . P12 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP12 ) = True Then If PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Then PointOutputs ( PointNames . P12 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Then PointOutputs ( PointNames . P12 ) = PointToReverse Else PointOutputs ( PointNames . P12 ) = PointToOFF End If Else PointOutputs ( PointNames . P12 ) = PointToOFF End If Else PointOutputs ( PointNames . P12 ) = PointToOFF End If ' Point 13 If Initializations . Point13Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And BackLockAJ4EtoAJ7E = 0 And BackLockAJ4EtoAJ21E = 0 Then If PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Then PointOutputs ( PointNames . P13 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P13 ) = PointToReverse Then PointOutputs ( PointNames . P13 ) = PointToReverse Else PointOutputs ( PointNames . P13 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP13 ) = True Then If PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Then PointOutputs ( PointNames . P13 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P13 ) = PointToReverse Then PointOutputs ( PointNames . P13 ) = PointToReverse Else PointOutputs ( PointNames . P13 ) = PointToOFF End If Else PointOutputs ( PointNames . P13 ) = PointToOFF End If Else PointOutputs ( PointNames . P13 ) = PointToOFF End If ' Point 14 If Initializations . Point14Initiated Then If EastBound = True And SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And BackLockAJ9EtoAJ17E = 0 And BackLockAJ9EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P14 ) = PointToNormal Then PointOutputs ( PointNames . P14 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Then PointOutputs ( PointNames . P14 ) = PointToReverse Else PointOutputs ( PointNames . P14 ) = PointToOFF End If ElseIf WestBound = True And SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear And PointSectionUnoccupied ( pointSectionNames . SectionP14 ) = True Then If PointRequestedOutputs ( PointNames . P14 ) = PointToNormal Then PointOutputs ( PointNames . P14 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Then PointOutputs ( PointNames . P14 ) = PointToReverse Else PointOutputs ( PointNames . P14 ) = PointToOFF End If Else PointOutputs ( PointNames . P14 ) = PointToOFF End If Else PointOutputs ( PointNames . P14 ) = PointToOFF End If ' Point 19 If Initializations . Point19Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And BackLockAJ16EtoAJ8E = 0 And BackLockAJ16EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P19 ) = PointToNormal Then PointOutputs ( PointNames . P19 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Then PointOutputs ( PointNames . P19 ) = PointToReverse Else PointOutputs ( PointNames . P19 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True Then If PointRequestedOutputs ( PointNames . P19 ) = PointToNormal Then PointOutputs ( PointNames . P19 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Then PointOutputs ( PointNames . P19 ) = PointToReverse Else PointOutputs ( PointNames . P19 ) = PointToOFF End If Else PointOutputs ( PointNames . P19 ) = PointToOFF End If Else PointOutputs ( PointNames . P19 ) = PointToOFF End If UsingAir = \"Enabled (With safety net)\" AirInUse = True End Sub Public Sub AirOnBypassSafety () For i As Integer = 0 To PointCount - 1 If PointRequestedOutputs ( i ) = PointInNormal Then PointOutputs ( i ) = PointToNormal ElseIf PointRequestedOutputs ( i ) = PointInReverse Then PointOutputs ( i ) = PointToReverse Else PointOutputs ( i ) = PointToOFF End If Next UsingAir = \"Enabled (Without safety net)\" AirInUse = True End Sub Public Sub AirOff () UsingAir = \"Disabled\" AirInUse = False For i As Integer = 0 To PointCount - 1 PointRequestedOutputs ( i ) = PointToOFF Next End Sub ' ERROR Checking Public Sub PointsErrorDetection () For i As Integer = 0 To PointCount - 1 ' Point reading both directions If AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnNormal ( i )) > PointDetectVoltage = True And AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnReverse ( i )) > PointDetectVoltage = True Then Errors . NewError ( Messages . PointReadingNormalAndReverseSameTime ( PointDisplayNames ( i ))) Else Errors . RemoveError ( Messages . PointReadingNormalAndReverseSameTime ( PointDisplayNames ( i ))) End If ' Point reading no return after set timer If ( PointReturns ( i ) = \"Reverse\" Or PointReturns ( i ) = \"Normal\" ) Then PointNoReturnCountdown ( i ) = PointErrorNoReturnCountdownTime If PointNoReturnCountdown ( i ) = 0 Then Errors . NewError ( Messages . PointReadingNoReturn ( PointDisplayNames ( i ))) Else Errors . RemoveError ( Messages . PointReadingNoReturn ( PointDisplayNames ( i ))) End If ' Point not changing when system requesting after set time If ( Not PointReturns ( i ) = PointOutputs ( i )) And ( Not PointOutputs ( i ) = \"Off\" ) Then If PointNotChangingCountdown ( i ) = 0 Then Errors . NewError ( Messages . PointNotChanging ( PointDisplayNames ( i ))) Else PointNotChangingCountdown ( i ) = pointNotChangingCountDownTime Errors . RemoveError ( Messages . PointNotChanging ( PointDisplayNames ( i ))) End If Next End Sub ' Update Points IO ' Update Point Output Private Sub UpdatePointOutputs () For i As Integer = 0 To PointCount - 1 Dim RequestedState As String Dim NewState As PointState ' Check if we have an override from settings If RuntimeConfig . config . PointOutputOverrides ( i ) = \"System\" And PointSupplyPower = True Then RequestedState = PointOutputs ( i ) Else RequestedState = RuntimeConfig . config . PointOutputOverrides ( i ) End If ' Check if we are already in the state - if we are , then we don ' t need to do anything ' If we aren ' t , then actually request a change If RequestedState = \"Normal\" And Not PointReturns ( i ) = PointInNormal Then NewState = PointState . Normal ElseIf RequestedState = \"Reverse\" And Not PointReturns ( i ) = PointInReverse Then NewState = PointState . Reverse Else NewState = PointState . Off End If ' Relay the change to the actual outputs on the Arduino Select Case NewState Case PointState . Normal Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 0 Exit Select Case PointState . Reverse Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 1 Exit Select Case PointState . Off Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 0 Exit Select End Select Next End Sub Private Sub UpdatePointsFromInput () For i As Integer = 0 To PointCount - 1 ' Get current state read from the field If AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnNormal ( i )) >= PointDetectVoltage Then PointFieldStates ( i ) = \"Normal\" ElseIf AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnReverse ( i )) >= PointDetectVoltage Then PointFieldStates ( i ) = \"Reverse\" Else PointFieldStates ( i ) = PointReturnNoReturn End If ' Check the state as defined in the settings If RuntimeConfig . config . PointInputOverrides ( i ) = \"System\" Then ' Return should read what the system reads If PointFieldStates ( i ) = \"Normal\" Then PointReturns ( i ) = \"Normal\" ElseIf PointFieldStates ( i ) = \"Reverse\" Then PointReturns ( i ) = \"Reverse\" Else PointReturns ( i ) = PointReturnNoReturn End If ' Or we are overriden ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = \"Normal\" Then PointReturns ( i ) = \"Normal\" ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = \"Reverse\" Then PointReturns ( i ) = \"Reverse\" ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = PointReturnNoReturn Then PointReturns ( i ) = PointReturnNoReturn End If Next End Sub Public Sub PointIOUpdate () ' Outputs UpdatePointOutputs () UpdatePointsFromInput () End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To PointCount - 1 If Not PointNoReturnCountdown ( i ) = 0 Then PointNoReturnCountdown ( i ) -= 1 If Not PointNotChangingCountdown ( i ) = 0 Then PointNotChangingCountdown ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Points.vb"},{"location":"mainsystem/Files/Points_8vb/#githubsignallingsystemehmr-signalling-systemdevicespointsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Points.vb"},{"location":"mainsystem/Files/Points_8vb/#source-code","text":"Public Module Points Public ReadOnly PointCount As Integer = 10 Public ReadOnly PointDisplayNames () As String = { \"Point5a\" , \"Point5b\" , \"Point6a\" , \"Point6b\" , \"Point10\" , \"Point11\" , \"Point12\" , \"Point13\" , \"Point14\" , \"Point19\" } Public UsingAir As String = \"Disabled\" Public AirInUse As Boolean = False Public PointRequestedOutputs () As String = { PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF } Public PointNoReturnCountdown () As Integer = { 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 } Public PointNotChangingCountdown () As Integer = { 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 , 160 } Public PointReturns () As String = { PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn } Public PointFieldStates () As String = { PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn , PointReturnNoReturn } Public PointOutputs () As String = { PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF , PointToOFF } ' Point detection settings Public PointDetectVoltage As Integer = 10 Public PointErrorVoltage As Integer = 5 Public testNormal As Boolean = False Public TestMode As Boolean = False ' Start Public Sub Points () If SignalsOn = True Then PointsErrorDetection () If TestMode = True Then If testNormal = True Then For i As Integer = 0 To PointCount - 1 PointOutputs ( i ) = PointToNormal Next Else For i As Integer = 0 To PointCount - 1 PointOutputs ( i ) = PointToReverse Next End If UsingAir = \"Enabled (Without safety net)\" AirInUse = True Else If RuntimeConfig . config . AirEnabled = True And Safety . EStopTriggered = False Then If RuntimeConfig . config . ForceAir = True Then If Mode = LogicModeManual Then AirOnBypassSafety () ElseIf Mode = LogicModeComputer Then AirOnWithSafetyChecks () End If Else If AirOffsetting = True Then AirOff () Else If Mode = LogicModeManual Then AirOnBypassSafety () ElseIf Mode = LogicModeComputer Then AirOnWithSafetyChecks () End If End If End If Else AirOff () End If End If PointIOUpdate () End Sub ' Operating points Public Sub AirOnWithSafetyChecks () ' Point 5 a If Initializations . Point5Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Then PointOutputs ( PointNames . P5a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Then PointOutputs ( PointNames . P5a ) = PointToReverse Else PointOutputs ( PointNames . P5a ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP5a ) = True Then If PointRequestedOutputs ( PointNames . P5a ) = PointToNormal Then PointOutputs ( PointNames . P5a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Then PointOutputs ( PointNames . P5a ) = PointToReverse Else PointOutputs ( PointNames . P5a ) = PointToOFF End If Else PointOutputs ( PointNames . P5a ) = PointToOFF End If Else PointOutputs ( PointNames . P5a ) = PointToOFF End If ' Point 5 b If Initializations . Point5Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And BackLockAJ1EtoAJ18E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Then PointOutputs ( PointNames . P5b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Then PointOutputs ( PointNames . P5b ) = PointToReverse Else PointOutputs ( PointNames . P5b ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP5b ) = True Then If PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Then PointOutputs ( PointNames . P5b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Then PointOutputs ( PointNames . P5b ) = PointToReverse Else PointOutputs ( PointNames . P5b ) = PointToOFF End If Else PointOutputs ( PointNames . P5b ) = PointToOFF End If Else PointOutputs ( PointNames . P5b ) = PointToOFF End If ' Point 6 a If Initializations . Point6Initiated Then If EastBound And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ18E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Then PointOutputs ( PointNames . P6a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Then PointOutputs ( PointNames . P6a ) = PointToReverse Else PointOutputs ( PointNames . P6a ) = PointToOFF End If ElseIf WestBound And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True Then If PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Then PointOutputs ( PointNames . P6a ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Then PointOutputs ( PointNames . P6a ) = PointToReverse Else PointOutputs ( PointNames . P6a ) = PointToOFF End If Else PointOutputs ( PointNames . P6a ) = PointToOFF End If Else PointOutputs ( PointNames . P6a ) = PointToOFF End If ' Point 6 b If Initializations . Point6Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 Then If PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Then PointOutputs ( PointNames . P6b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Then PointOutputs ( PointNames . P6b ) = PointToReverse Else PointOutputs ( PointNames . P6b ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP6b ) = True Then If PointRequestedOutputs ( PointNames . P6b ) = PointToNormal Then PointOutputs ( PointNames . P6b ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Then PointOutputs ( PointNames . P6b ) = PointToReverse Else PointOutputs ( PointNames . P6b ) = PointToOFF End If Else PointOutputs ( PointNames . P6b ) = PointToOFF End If Else PointOutputs ( PointNames . P6b ) = PointToOFF End If ' Point 10 If Initializations . Point10Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And BackLockAJ2EtoAJ16E = 0 And BackLockAJ2EtoAJ16E = 0 And BackLockAJ21EtoAJ16E = 0 And BackLockAJ21EtoAJ18E = 0 Then If PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Then PointOutputs ( PointNames . P10 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P10 ) = PointToReverse Then PointOutputs ( PointNames . P10 ) = PointToReverse Else PointOutputs ( PointNames . P10 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP10 ) = True Then If PointRequestedOutputs ( PointNames . P10 ) = PointToNormal Then PointOutputs ( PointNames . P10 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P10 ) = PointToReverse Then PointOutputs ( PointNames . P10 ) = PointToReverse Else PointOutputs ( PointNames . P10 ) = PointToOFF End If Else PointOutputs ( PointNames . P10 ) = PointToOFF End If Else PointOutputs ( PointNames . P10 ) = PointToOFF End If ' Point 11 If Initializations . Point11Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And BackLockAJ1EtoAJ16E = 0 And BackLockAJ1EtoAJ18E = 0 And BackLockAJ1EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Then PointOutputs ( PointNames . P11 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Then PointOutputs ( PointNames . P11 ) = PointToReverse Else PointOutputs ( PointNames . P11 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP11 ) = True Then If PointRequestedOutputs ( PointNames . P11 ) = PointToNormal Then PointOutputs ( PointNames . P11 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Then PointOutputs ( PointNames . P11 ) = PointToReverse Else PointOutputs ( PointNames . P11 ) = PointToOFF End If Else PointOutputs ( PointNames . P11 ) = PointToOFF End If Else PointOutputs ( PointNames . P11 ) = PointToOFF End If ' Point 12 If Initializations . Point12Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And BackLockAJ4EtoAJ7E = 0 Then If PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Then PointOutputs ( PointNames . P12 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Then PointOutputs ( PointNames . P12 ) = PointToReverse Else PointOutputs ( PointNames . P12 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP12 ) = True Then If PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Then PointOutputs ( PointNames . P12 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Then PointOutputs ( PointNames . P12 ) = PointToReverse Else PointOutputs ( PointNames . P12 ) = PointToOFF End If Else PointOutputs ( PointNames . P12 ) = PointToOFF End If Else PointOutputs ( PointNames . P12 ) = PointToOFF End If ' Point 13 If Initializations . Point13Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And BackLockAJ4EtoAJ7E = 0 And BackLockAJ4EtoAJ21E = 0 Then If PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Then PointOutputs ( PointNames . P13 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P13 ) = PointToReverse Then PointOutputs ( PointNames . P13 ) = PointToReverse Else PointOutputs ( PointNames . P13 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( pointSectionNames . SectionP13 ) = True Then If PointRequestedOutputs ( PointNames . P13 ) = PointToNormal Then PointOutputs ( PointNames . P13 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P13 ) = PointToReverse Then PointOutputs ( PointNames . P13 ) = PointToReverse Else PointOutputs ( PointNames . P13 ) = PointToOFF End If Else PointOutputs ( PointNames . P13 ) = PointToOFF End If Else PointOutputs ( PointNames . P13 ) = PointToOFF End If ' Point 14 If Initializations . Point14Initiated Then If EastBound = True And SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And BackLockAJ9EtoAJ17E = 0 And BackLockAJ9EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P14 ) = PointToNormal Then PointOutputs ( PointNames . P14 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Then PointOutputs ( PointNames . P14 ) = PointToReverse Else PointOutputs ( PointNames . P14 ) = PointToOFF End If ElseIf WestBound = True And SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear And PointSectionUnoccupied ( pointSectionNames . SectionP14 ) = True Then If PointRequestedOutputs ( PointNames . P14 ) = PointToNormal Then PointOutputs ( PointNames . P14 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Then PointOutputs ( PointNames . P14 ) = PointToReverse Else PointOutputs ( PointNames . P14 ) = PointToOFF End If Else PointOutputs ( PointNames . P14 ) = PointToOFF End If Else PointOutputs ( PointNames . P14 ) = PointToOFF End If ' Point 19 If Initializations . Point19Initiated Then If EastBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And BackLockAJ16EtoAJ8E = 0 And BackLockAJ16EtoSiding = 0 Then If PointRequestedOutputs ( PointNames . P19 ) = PointToNormal Then PointOutputs ( PointNames . P19 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Then PointOutputs ( PointNames . P19 ) = PointToReverse Else PointOutputs ( PointNames . P19 ) = PointToOFF End If ElseIf WestBound = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsClear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = SectionIsClear And SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True Then If PointRequestedOutputs ( PointNames . P19 ) = PointToNormal Then PointOutputs ( PointNames . P19 ) = PointToNormal ElseIf PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Then PointOutputs ( PointNames . P19 ) = PointToReverse Else PointOutputs ( PointNames . P19 ) = PointToOFF End If Else PointOutputs ( PointNames . P19 ) = PointToOFF End If Else PointOutputs ( PointNames . P19 ) = PointToOFF End If UsingAir = \"Enabled (With safety net)\" AirInUse = True End Sub Public Sub AirOnBypassSafety () For i As Integer = 0 To PointCount - 1 If PointRequestedOutputs ( i ) = PointInNormal Then PointOutputs ( i ) = PointToNormal ElseIf PointRequestedOutputs ( i ) = PointInReverse Then PointOutputs ( i ) = PointToReverse Else PointOutputs ( i ) = PointToOFF End If Next UsingAir = \"Enabled (Without safety net)\" AirInUse = True End Sub Public Sub AirOff () UsingAir = \"Disabled\" AirInUse = False For i As Integer = 0 To PointCount - 1 PointRequestedOutputs ( i ) = PointToOFF Next End Sub ' ERROR Checking Public Sub PointsErrorDetection () For i As Integer = 0 To PointCount - 1 ' Point reading both directions If AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnNormal ( i )) > PointDetectVoltage = True And AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnReverse ( i )) > PointDetectVoltage = True Then Errors . NewError ( Messages . PointReadingNormalAndReverseSameTime ( PointDisplayNames ( i ))) Else Errors . RemoveError ( Messages . PointReadingNormalAndReverseSameTime ( PointDisplayNames ( i ))) End If ' Point reading no return after set timer If ( PointReturns ( i ) = \"Reverse\" Or PointReturns ( i ) = \"Normal\" ) Then PointNoReturnCountdown ( i ) = PointErrorNoReturnCountdownTime If PointNoReturnCountdown ( i ) = 0 Then Errors . NewError ( Messages . PointReadingNoReturn ( PointDisplayNames ( i ))) Else Errors . RemoveError ( Messages . PointReadingNoReturn ( PointDisplayNames ( i ))) End If ' Point not changing when system requesting after set time If ( Not PointReturns ( i ) = PointOutputs ( i )) And ( Not PointOutputs ( i ) = \"Off\" ) Then If PointNotChangingCountdown ( i ) = 0 Then Errors . NewError ( Messages . PointNotChanging ( PointDisplayNames ( i ))) Else PointNotChangingCountdown ( i ) = pointNotChangingCountDownTime Errors . RemoveError ( Messages . PointNotChanging ( PointDisplayNames ( i ))) End If Next End Sub ' Update Points IO ' Update Point Output Private Sub UpdatePointOutputs () For i As Integer = 0 To PointCount - 1 Dim RequestedState As String Dim NewState As PointState ' Check if we have an override from settings If RuntimeConfig . config . PointOutputOverrides ( i ) = \"System\" And PointSupplyPower = True Then RequestedState = PointOutputs ( i ) Else RequestedState = RuntimeConfig . config . PointOutputOverrides ( i ) End If ' Check if we are already in the state - if we are , then we don ' t need to do anything ' If we aren ' t , then actually request a change If RequestedState = \"Normal\" And Not PointReturns ( i ) = PointInNormal Then NewState = PointState . Normal ElseIf RequestedState = \"Reverse\" And Not PointReturns ( i ) = PointInReverse Then NewState = PointState . Reverse Else NewState = PointState . Off End If ' Relay the change to the actual outputs on the Arduino Select Case NewState Case PointState . Normal Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 0 Exit Select Case PointState . Reverse Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 1 Exit Select Case PointState . Off Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsNormal ( i )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressPointsReverse ( i )) = 0 Exit Select End Select Next End Sub Private Sub UpdatePointsFromInput () For i As Integer = 0 To PointCount - 1 ' Get current state read from the field If AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnNormal ( i )) >= PointDetectVoltage Then PointFieldStates ( i ) = \"Normal\" ElseIf AnalogIOManager . ActualAnalogValue ( AnalogIOManager . AnalogInputPointReturnReverse ( i )) >= PointDetectVoltage Then PointFieldStates ( i ) = \"Reverse\" Else PointFieldStates ( i ) = PointReturnNoReturn End If ' Check the state as defined in the settings If RuntimeConfig . config . PointInputOverrides ( i ) = \"System\" Then ' Return should read what the system reads If PointFieldStates ( i ) = \"Normal\" Then PointReturns ( i ) = \"Normal\" ElseIf PointFieldStates ( i ) = \"Reverse\" Then PointReturns ( i ) = \"Reverse\" Else PointReturns ( i ) = PointReturnNoReturn End If ' Or we are overriden ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = \"Normal\" Then PointReturns ( i ) = \"Normal\" ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = \"Reverse\" Then PointReturns ( i ) = \"Reverse\" ElseIf RuntimeConfig . config . PointInputOverrides ( i ) = PointReturnNoReturn Then PointReturns ( i ) = PointReturnNoReturn End If Next End Sub Public Sub PointIOUpdate () ' Outputs UpdatePointOutputs () UpdatePointsFromInput () End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To PointCount - 1 If Not PointNoReturnCountdown ( i ) = 0 Then PointNoReturnCountdown ( i ) -= 1 If Not PointNotChangingCountdown ( i ) = 0 Then PointNotChangingCountdown ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/PopUpConfig_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/PopUpConfig.vb \u00b6 Source code \u00b6 Public Class PopUpConfig Private Sub PopUpConfig_Load ( sender As Object , e As EventArgs ) Handles MyBase . Load LoadValues () End Sub ' Timer Private Sub ConfigUpdateInfo_Tick ( sender As Object , e As EventArgs ) Handles ConfigUpdateInfo . Tick ' Tunnel If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 Then CBEastEndTunnelStateOpen . Checked = True Else CBEastEndTunnelStateOpen . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 1 Then CBEastEndTunnelStateCLose . Checked = True Else CBEastEndTunnelStateCLose . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 Then CBWestEndTunnelStateOpen . Checked = True Else CBWestEndTunnelStateOpen . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 1 Then CBWestEndTunnelStateClose . Checked = True Else CBWestEndTunnelStateClose . Checked = False End If LblTunnelOpen . Text = ( \"Tunnel Open - \" & LineSide . TunnelOpen ) LblTunnelSafe . Text = ( \"Tunnel Safe - \" & LineSide . TunnelSafe ) ' Audio Buttons If RuntimeConfig . config . DepartingP1SoundEnabled = True Then BtnDepartingP1Enabled . Text = \"Enabled\" BtnDepartingPlayP1 . Enabled = True Else BtnDepartingP1Enabled . Text = \"Disabled\" BtnDepartingPlayP1 . Enabled = False End If If RuntimeConfig . config . DepartingP2SoundEnabled = True Then BtnDepartingP2Enabled . Text = \"Enabled\" BtnDepartingPlayP2 . Enabled = True Else BtnDepartingP2Enabled . Text = \"Disabled\" BtnDepartingPlayP2 . Enabled = False End If If RuntimeConfig . config . ArrivingP1SoundEnabled = True Then BtnArrivingP1Enabled . Text = \"Enabled\" BtnArrivingPlayP1 . Enabled = True Else BtnArrivingP1Enabled . Text = \"Disabled\" BtnArrivingPlayP1 . Enabled = False End If If RuntimeConfig . config . ArrivingP2SoundEnabled = True Then BtnArrivingP2Enabled . Text = \"Enabled\" BtnArrivingPlayP2 . Enabled = True Else BtnArrivingP2Enabled . Text = \"Disabled\" BtnArrivingPlayP2 . Enabled = False End If If RuntimeConfig . config . SidingSoundEnabled = True Then BtnSidingEnabled . Text = \"Enabled\" BtnSidingPlay . Enabled = True Else BtnSidingEnabled . Text = \"Disabled\" BtnSidingPlay . Enabled = False End If If RuntimeConfig . config . EventSoundEnabled = True Then BtnEventEnabled . Text = \"Enabled\" BtnEventPlay . Enabled = True Else BtnEventEnabled . Text = \"Disabled\" BtnEventPlay . Enabled = False End If If RuntimeConfig . config . SafetySoundEnabled = True Then BtnSafetyEnabled . Text = \"Enabled\" BtnSafetyPlay . Enabled = True Else BtnSafetyEnabled . Text = \"Disabled\" BtnSafetyPlay . Enabled = False End If If RuntimeConfig . config . AUXSound1Enabled = True Then BtnAUX1Enabled . Text = \"Enabled\" BtnAUX1Play . Enabled = True Else BtnAUX1Enabled . Text = \"Disabled\" BtnAUX1Play . Enabled = False End If If RuntimeConfig . config . AUXSound2Enabled = True Then BtnAUX2Enabled . Text = \"Enabled\" BtnAUX2Play . Enabled = True Else BtnAUX2Enabled . Text = \"Disabled\" BtnAUX2Play . Enabled = False End If If RuntimeConfig . config . AUXSound3Enabled = True Then BtnAUX3Enabled . Text = \"Enabled\" BtnAUX3Play . Enabled = True Else BtnAUX3Enabled . Text = \"Disabled\" BtnAUX3Play . Enabled = False End If If RuntimeConfig . config . BellEnabled = True Then BtnBellEnabled . Text = \"Enabled\" BtnBellTest . Enabled = True Else BtnBellEnabled . Text = \"Disabled\" BtnBellTest . Enabled = False End If ' Overall Air If RuntimeConfig . config . AirEnabled = True Then BtnDisableAir . Text = \"ALL AIR ENABLED\" BtnForceEnableAir . Enabled = True Else BtnDisableAir . Text = \"ALL AIR DISABLED\" BtnForceEnableAir . Enabled = False End If If RuntimeConfig . config . ForceAir = True Then BtnForceEnableAir . Text = \"Air Forced On\" Else BtnForceEnableAir . Text = \"Air Forced Off\" End If ' Initializations If Initializations . AJ1Initiated = True Then BtnInitializationAJ1 . Text = \"Re-Initiate AJ1\" LblInitializationAJ1 . Text = \"AJ1 Is fully initiated!\" LblInitializationAJ1 . ForeColor = Color . Black Else BtnInitializationAJ1 . Text = \"Force Initiate AJ1\" If AJ1InitiatedTimer = InitilizationStart Or AJ1InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ1 . ForeColor = Color . Red LblInitializationAJ1 . Text = \"AJ1 Is being prevented to initiate (\" & AJ1InitiatedTimer & \")\" Else LblInitializationAJ1 . ForeColor = Color . Green LblInitializationAJ1 . Text = \"AJ1 Is still trying to initiate (\" & AJ1InitiatedTimer & \")\" End If End If If Initializations . AJ2Initiated = True Then BtnInitializationAJ2 . Text = \"Re-Initiate AJ2\" LblInitializationAJ2 . Text = \"AJ2 Is fully initiated!\" LblInitializationAJ2 . ForeColor = Color . Black Else BtnInitializationAJ2 . Text = \"Force Initiate AJ2\" If AJ2InitiatedTimer = InitilizationStart Or AJ2InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ2 . ForeColor = Color . Red LblInitializationAJ2 . Text = \"AJ2 Is being prevented to initiate (\" & AJ2InitiatedTimer & \")\" Else LblInitializationAJ2 . ForeColor = Color . Green LblInitializationAJ2 . Text = \"AJ2 Is still trying to initiate (\" & AJ2InitiatedTimer & \")\" End If End If If Initializations . AJ3Initiated = True Then BtnInitializationAJ3 . Text = \"Re-Initiate AJ3\" LblInitializationAJ3 . Text = \"AJ3 Is fully initiated!\" LblInitializationAJ3 . ForeColor = Color . Black Else BtnInitializationAJ3 . Text = \"Force Initiate AJ3\" If AJ3InitiatedTimer = InitilizationStart Or AJ3InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ3 . ForeColor = Color . Red LblInitializationAJ3 . Text = \"AJ3 Is being prevented to initiate (\" & AJ3InitiatedTimer & \")\" Else LblInitializationAJ3 . ForeColor = Color . Green LblInitializationAJ3 . Text = \"AJ3 Is still trying to initiate (\" & AJ3InitiatedTimer & \")\" End If End If If Initializations . AJ4Initiated = True Then BtnInitializationAJ4 . Text = \"Re-Initiate AJ4\" LblInitializationAJ4 . Text = \"AJ4 Is fully initiated!\" LblInitializationAJ4 . ForeColor = Color . Black Else BtnInitializationAJ4 . Text = \"Force Initiate AJ4\" If AJ4InitiatedTimer = InitilizationStart Or AJ4InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ4 . ForeColor = Color . Red LblInitializationAJ4 . Text = \"AJ4 Is being prevented to initiate (\" & AJ4InitiatedTimer & \")\" Else LblInitializationAJ4 . ForeColor = Color . Green LblInitializationAJ4 . Text = \"AJ4 Is still trying to initiate (\" & AJ4InitiatedTimer & \")\" End If End If If Initializations . AJ7Initiated = True Then BtnInitializationAJ7 . Text = \"Re-Initiate AJ7\" LblInitializationAJ7 . Text = \"AJ7 Is fully initiated!\" LblInitializationAJ7 . ForeColor = Color . Black Else BtnInitializationAJ7 . Text = \"Force Initiate AJ7\" If AJ7InitiatedTimer = InitilizationStart Or AJ7InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ7 . ForeColor = Color . Red LblInitializationAJ7 . Text = \"AJ7 Is being prevented to initiate (\" & AJ7InitiatedTimer & \")\" Else LblInitializationAJ7 . ForeColor = Color . Green LblInitializationAJ7 . Text = \"AJ7 Is still trying to initiate (\" & AJ7InitiatedTimer & \")\" End If End If If Initializations . AJ8Initiated = True Then BtnInitializationAJ8 . Text = \"Re-Initiate AJ8\" LblInitializationAJ8 . Text = \"AJ8 Is fully initiated!\" LblInitializationAJ8 . ForeColor = Color . Black Else BtnInitializationAJ8 . Text = \"Force Initiate AJ8\" If AJ8InitiatedTimer = InitilizationStart Or AJ8InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ8 . ForeColor = Color . Red LblInitializationAJ8 . Text = \"AJ8 Is being prevented to initiate (\" & AJ8InitiatedTimer & \")\" Else LblInitializationAJ8 . ForeColor = Color . Green LblInitializationAJ8 . Text = \"AJ8 Is still trying to initiate (\" & AJ8InitiatedTimer & \")\" End If End If If Initializations . AJ9Initiated = True Then BtnInitializationAJ9 . Text = \"Re-Initiate AJ9\" LblInitializationAJ9 . Text = \"AJ9 Is fully initiated!\" LblInitializationAJ9 . ForeColor = Color . Black Else BtnInitializationAJ9 . Text = \"Force Initiate AJ9\" If AJ9InitiatedTimer = InitilizationStart Or AJ9InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ9 . ForeColor = Color . Red LblInitializationAJ9 . Text = \"AJ9 Is being prevented to initiate (\" & AJ9InitiatedTimer & \")\" Else LblInitializationAJ9 . ForeColor = Color . Green LblInitializationAJ9 . Text = \"AJ9 Is still trying to initiate (\" & AJ9InitiatedTimer & \")\" End If End If If Initializations . AJ15Initiated = True Then BtnInitializationAJ15 . Text = \"Re-Initiate AJ15\" LblInitializationAJ15 . Text = \"AJ15 Is fully initiated!\" LblInitializationAJ15 . ForeColor = Color . Black Else BtnInitializationAJ15 . Text = \"Force Initiate AJ15\" If AJ15InitiatedTimer = InitilizationStart Or AJ15InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ15 . ForeColor = Color . Red LblInitializationAJ15 . Text = \"AJ15 Is being prevented to initiate (\" & AJ15InitiatedTimer & \")\" Else LblInitializationAJ15 . ForeColor = Color . Green LblInitializationAJ15 . Text = \"AJ15 Is still trying to initiate (\" & AJ15InitiatedTimer & \")\" End If End If If Initializations . AJ16Initiated = True Then BtnInitializationAJ16 . Text = \"Re-Initiate AJ16\" LblInitializationAJ16 . Text = \"AJ16 Is fully initiated!\" LblInitializationAJ16 . ForeColor = Color . Black Else BtnInitializationAJ16 . Text = \"Force Initiate AJ16\" If AJ16InitiatedTimer = InitilizationStart Or AJ16InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ16 . ForeColor = Color . Red LblInitializationAJ16 . Text = \"AJ16 Is being prevented to initiate (\" & AJ16InitiatedTimer & \")\" Else LblInitializationAJ16 . ForeColor = Color . Green LblInitializationAJ16 . Text = \"AJ16 Is still trying to initiate (\" & AJ16InitiatedTimer & \")\" End If End If If Initializations . AJ17Initiated = True Then BtnInitializationAJ17 . Text = \"Re-Initiate AJ17\" LblInitializationAJ17 . Text = \"AJ17 Is fully initiated!\" LblInitializationAJ17 . ForeColor = Color . Black Else BtnInitializationAJ17 . Text = \"Force Initiate AJ17\" If AJ17InitiatedTimer = InitilizationStart Or AJ17InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ17 . ForeColor = Color . Red LblInitializationAJ17 . Text = \"AJ17 Is being prevented to initiate (\" & AJ17InitiatedTimer & \")\" Else LblInitializationAJ17 . ForeColor = Color . Green LblInitializationAJ17 . Text = \"AJ17 Is still trying to initiate (\" & AJ17InitiatedTimer & \")\" End If End If If Initializations . AJ18Initiated = True Then BtnInitializationAJ18 . Text = \"Re-Initiate AJ18\" LblInitializationAJ18 . Text = \"AJ18 Is fully initiated!\" LblInitializationAJ18 . ForeColor = Color . Black Else BtnInitializationAJ18 . Text = \"Force Initiate AJ18\" If AJ18InitiatedTimer = InitilizationStart Or AJ18InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ18 . ForeColor = Color . Red LblInitializationAJ18 . Text = \"AJ18 Is being prevented to initiate (\" & AJ18InitiatedTimer & \")\" Else LblInitializationAJ18 . ForeColor = Color . Green LblInitializationAJ18 . Text = \"AJ18 Is still trying to initiate (\" & AJ18InitiatedTimer & \")\" End If End If If Initializations . AJ21Initiated = True Then BtnInitializationAJ21 . Text = \"Re-Initiate AJ21\" LblInitializationAJ21 . Text = \"AJ21 Is fully initiated!\" LblInitializationAJ21 . ForeColor = Color . Black Else BtnInitializationAJ21 . Text = \"Force Initiate AJ21\" If AJ21InitiatedTimer = InitilizationStart Or AJ21InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ21 . ForeColor = Color . Red LblInitializationAJ21 . Text = \"AJ21 Is being prevented to initiate (\" & AJ21InitiatedTimer & \")\" Else LblInitializationAJ21 . ForeColor = Color . Green LblInitializationAJ21 . Text = \"AJ21 Is still trying to initiate (\" & AJ21InitiatedTimer & \")\" End If End If If Initializations . AJ22Initiated = True Then BtnInitializationAJ22 . Text = \"Re-Initiate AJ22\" LblInitializationAJ22 . Text = \"AJ22 Is fully initiated!\" LblInitializationAJ22 . ForeColor = Color . Black Else BtnInitializationAJ22 . Text = \"Force Initiate AJ22\" If AJ22InitiatedTimer = InitilizationStart Or AJ22InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ22 . ForeColor = Color . Red LblInitializationAJ22 . Text = \"AJ22 Is being prevented to initiate (\" & AJ22InitiatedTimer & \")\" Else LblInitializationAJ22 . ForeColor = Color . Green LblInitializationAJ22 . Text = \"AJ22 Is still trying to initiate (\" & AJ22InitiatedTimer & \")\" End If End If If Initializations . Point5Initiated = True Then BtnInitializationPoint5 . Text = \"Re-Initiate Point5\" LblInitializationPoint5 . Text = \"Point5 Is fully initiated!\" LblInitializationPoint5 . ForeColor = Color . Black Else BtnInitializationPoint5 . Text = \"Force Initiate Point5\" If Point5InitiatedTimer = InitilizationStart Or Point5InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint5 . ForeColor = Color . Red LblInitializationPoint5 . Text = \"Point5 Is being prevented to initiate (\" & Point5InitiatedTimer & \")\" Else LblInitializationPoint5 . ForeColor = Color . Green LblInitializationPoint5 . Text = \"Point5 Is still trying to initiate (\" & Point5InitiatedTimer & \")\" End If End If If Initializations . Point6Initiated = True Then BtnInitializationPoint6 . Text = \"Re-Initiate Point6\" LblInitializationPoint6 . Text = \"Point6 Is fully initiated!\" LblInitializationPoint6 . ForeColor = Color . Black Else BtnInitializationPoint6 . Text = \"Force Initiate Point6\" If Point6InitiatedTimer = InitilizationStart Or Point6InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint6 . ForeColor = Color . Red LblInitializationPoint6 . Text = \"Point6 Is being prevented to initiate (\" & Point6InitiatedTimer & \")\" Else LblInitializationPoint6 . ForeColor = Color . Green LblInitializationPoint6 . Text = \"Point6 Is still trying to initiate (\" & Point6InitiatedTimer & \")\" End If End If If Initializations . Point10Initiated = True Then BtnInitializationPoint10 . Text = \"Re-Initiate Point10\" LblInitializationPoint10 . Text = \"Point10 Is fully initiated!\" LblInitializationPoint10 . ForeColor = Color . Black Else BtnInitializationPoint10 . Text = \"Force Initiate Point10\" If Point10InitiatedTimer = InitilizationStart Or Point10InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint10 . ForeColor = Color . Red LblInitializationPoint10 . Text = \"Point10 Is being prevented to initiate (\" & Point10InitiatedTimer & \")\" Else LblInitializationPoint10 . ForeColor = Color . Green LblInitializationPoint10 . Text = \"Point10 Is still trying to initiate (\" & Point10InitiatedTimer & \")\" End If End If If Initializations . Point11Initiated = True Then BtnInitializationPoint11 . Text = \"Re-Initiate Point11\" LblInitializationPoint11 . Text = \"Point11 Is fully initiated!\" LblInitializationPoint11 . ForeColor = Color . Black Else BtnInitializationPoint11 . Text = \"Force Initiate Point11\" If Point11InitiatedTimer = InitilizationStart Or Point11InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint11 . ForeColor = Color . Red LblInitializationPoint11 . Text = \"Point11 Is being prevented to initiate (\" & Point11InitiatedTimer & \")\" Else LblInitializationPoint11 . ForeColor = Color . Green LblInitializationPoint11 . Text = \"Point11 Is still trying to initiate (\" & Point11InitiatedTimer & \")\" End If End If If Initializations . Point12Initiated = True Then BtnInitializationPoint12 . Text = \"Re-Initiate Point12\" LblInitializationPoint12 . Text = \"Point12 Is fully initiated!\" LblInitializationPoint12 . ForeColor = Color . Black Else BtnInitializationPoint12 . Text = \"Force Initiate Point12\" If Point12InitiatedTimer = InitilizationStart Or Point12InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint12 . ForeColor = Color . Red LblInitializationPoint12 . Text = \"Point12 Is being prevented to initiate (\" & Point12InitiatedTimer & \")\" Else LblInitializationPoint12 . ForeColor = Color . Green LblInitializationPoint12 . Text = \"Point12 Is still trying to initiate (\" & Point12InitiatedTimer & \")\" End If End If If Initializations . Point13Initiated = True Then BtnInitializationPoint13 . Text = \"Re-Initiate Point13\" LblInitializationPoint13 . Text = \"Point13 Is fully initiated!\" LblInitializationPoint13 . ForeColor = Color . Black Else BtnInitializationPoint13 . Text = \"Force Initiate Point13\" If Point13InitiatedTimer = InitilizationStart Or Point13InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint13 . ForeColor = Color . Red LblInitializationPoint13 . Text = \"Point13 Is being prevented to initiate (\" & Point13InitiatedTimer & \")\" Else LblInitializationPoint13 . ForeColor = Color . Green LblInitializationPoint13 . Text = \"Point13 Is still trying to initiate (\" & Point13InitiatedTimer & \")\" End If End If If Initializations . Point14Initiated = True Then BtnInitializationPoint14 . Text = \"Re-Initiate Point14\" LblInitializationPoint14 . Text = \"Point14 Is fully initiated!\" LblInitializationPoint14 . ForeColor = Color . Black Else BtnInitializationPoint14 . Text = \"Force Initiate Point14\" If Point14InitiatedTimer = InitilizationStart Or Point14InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint14 . ForeColor = Color . Red LblInitializationPoint14 . Text = \"Point14 Is being prevented to initiate (\" & Point14InitiatedTimer & \")\" Else LblInitializationPoint14 . ForeColor = Color . Green LblInitializationPoint14 . Text = \"Point14 Is still trying to initiate (\" & Point14InitiatedTimer & \")\" End If End If If Initializations . Point19Initiated = True Then BtnInitializationPoint19 . Text = \"Re-Initiate Point19\" LblInitializationPoint19 . Text = \"Point19 Is fully initiated!\" LblInitializationPoint19 . ForeColor = Color . Black Else BtnInitializationPoint19 . Text = \"Force Initiate Point19\" If Point19InitiatedTimer = InitilizationStart Or Point19InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint19 . ForeColor = Color . Red LblInitializationPoint19 . Text = \"Point19 Is being prevented to initiate (\" & Point19InitiatedTimer & \")\" Else LblInitializationPoint19 . ForeColor = Color . Green LblInitializationPoint19 . Text = \"Point19 Is still trying to initiate (\" & Point19InitiatedTimer & \")\" End If End If If Initializations . S11Initiated = True Then BtnInitializationS11 . Text = \"Re-Initiate S11\" LblInitializationS11 . Text = \"S11 Is fully initiated!\" LblInitializationS11 . ForeColor = Color . Black Else BtnInitializationS11 . Text = \"Force Initiate S11\" If S11InitiatedTimer = InitilizationStart Or S11InitiatedTimer = InitilizationStart - 1 Then LblInitializationS11 . ForeColor = Color . Red LblInitializationS11 . Text = \"S11 Is being prevented to initiate (\" & S11InitiatedTimer & \")\" Else LblInitializationS11 . ForeColor = Color . Green LblInitializationS11 . Text = \"S11 Is still trying to initiate (\" & S11InitiatedTimer & \")\" End If End If If Initializations . S12Initiated = True Then BtnInitializationS12 . Text = \"Re-Initiate S12\" LblInitializationS12 . Text = \"S12 Is fully initiated!\" LblInitializationS12 . ForeColor = Color . Black Else BtnInitializationS12 . Text = \"Force Initiate S12\" If S12InitiatedTimer = InitilizationStart Or S12InitiatedTimer = InitilizationStart - 1 Then LblInitializationS12 . ForeColor = Color . Red LblInitializationS12 . Text = \"S12 Is being prevented to initiate (\" & S12InitiatedTimer & \")\" Else LblInitializationS12 . ForeColor = Color . Green LblInitializationS12 . Text = \"S12 Is still trying to initiate (\" & S12InitiatedTimer & \")\" End If End If If Initializations . S14Initiated = True Then BtnInitializationS14 . Text = \"Re-Initiate S14\" LblInitializationS14 . Text = \"S14 Is fully initiated!\" LblInitializationS14 . ForeColor = Color . Black Else BtnInitializationS14 . Text = \"Force Initiate S14\" If S14InitiatedTimer = InitilizationStart Or S14InitiatedTimer = InitilizationStart - 1 Then LblInitializationS14 . ForeColor = Color . Red LblInitializationS14 . Text = \"S14 Is being prevented to initiate (\" & S14InitiatedTimer & \")\" Else LblInitializationS14 . ForeColor = Color . Green LblInitializationS14 . Text = \"S14 Is still trying to initiate (\" & S14InitiatedTimer & \")\" End If End If If Initializations . S19Initiated = True Then BtnInitializationS19 . Text = \"Re-Initiate S19\" LblInitializationS19 . Text = \"S19 Is fully initiated!\" LblInitializationS19 . ForeColor = Color . Black Else BtnInitializationS19 . Text = \"Force Initiate S19\" If S19InitiatedTimer = InitilizationStart Or S19InitiatedTimer = InitilizationStart - 1 Then LblInitializationS19 . ForeColor = Color . Red LblInitializationS19 . Text = \"S19 Is being prevented to initiate (\" & S19InitiatedTimer & \")\" Else LblInitializationS19 . ForeColor = Color . Green LblInitializationS19 . Text = \"S19 Is still trying to initiate (\" & S19InitiatedTimer & \")\" End If End If If Initializations . SoundInitiated = True Then BtnInitializationSound . Text = \"Re-Initiate Sound\" LblInitializationSound . Text = \"Sound Is fully initiated!\" LblInitializationSound . ForeColor = Color . Black Else BtnInitializationSound . Text = \"Force Initiate Sound\" If SoundInitiatedTimer = InitilizationStart Or SoundInitiatedTimer = InitilizationStart - 1 Then LblInitializationSound . ForeColor = Color . Red LblInitializationSound . Text = \"Sound Is being prevented to initiate (\" & SoundInitiatedTimer & \")\" Else LblInitializationSound . ForeColor = Color . Green LblInitializationSound . Text = \"Sound Is still trying to initiate (\" & SoundInitiatedTimer & \")\" End If End If If Initializations . ButtonsInitiated = True Then BtnInitializationButtons . Text = \"Re-Initiate Buttons\" LblInitializationButtons . Text = \"Buttons Is fully initiated!\" LblInitializationButtons . ForeColor = Color . Black Else BtnInitializationButtons . Text = \"Force Initiate Buttons\" If ButtonsInitiatedTimer = InitilizationStart Or ButtonsInitiatedTimer = InitilizationStart - 1 Then LblInitializationButtons . ForeColor = Color . Red LblInitializationButtons . Text = \"Buttons Is being prevented to initiate (\" & ButtonsInitiatedTimer & \")\" Else LblInitializationButtons . ForeColor = Color . Green LblInitializationButtons . Text = \"Buttons Is still trying to initiate (\" & ButtonsInitiatedTimer & \")\" End If End If End Sub ' Load Values Private Sub LoadValues () RuntimeConfig . LoadConfig () ' Tunnel If RuntimeConfig . config . WestEndTunnel = \"System\" Then RDWestEndTunnelSetSystem . Checked = True ElseIf RuntimeConfig . config . WestEndTunnel = \"Open\" Then RDWestEndTunnelSetOpen . Checked = True ElseIf RuntimeConfig . config . WestEndTunnel = \"Closed\" Then RDWestEndTunnelSetClosed . Checked = True End If If RuntimeConfig . config . EastEndTunnel = \"System\" Then RDEastEndTunnelSetSystem . Checked = True ElseIf RuntimeConfig . config . EastEndTunnel = \"Open\" Then RDEastEndTunnelSetOpen . Checked = True ElseIf RuntimeConfig . config . EastEndTunnel = \"Closed\" Then RDEastEndTunnelSetClosed . Checked = True End If ' Platform 1 combined If RuntimeConfig . config . P1Combine = True Then BtnCombineP1 . Text = \"Enabled\" Else BtnCombineP1 . Text = \"Disabled\" End If ' Audio TxtboxDepartingP1SoundAmount . Text = RuntimeConfig . config . DepartingP1AmountOfClips TxtboxDepartingP2SoundAmount . Text = RuntimeConfig . config . DepartingP2AmountOfClips TxtboxArrivingP1SoundAmount . Text = RuntimeConfig . config . ArrivingP1AmountOfClips TxtboxArrivingP2SoundAmount . Text = RuntimeConfig . config . ArrivingP2AmountOfClips TxtboxSidingSoundAmount . Text = RuntimeConfig . config . SidingAmountOfClips TxtboxEventSoundAmount . Text = RuntimeConfig . config . EventAmountOfClips TxtboxSafetySoundAmount . Text = RuntimeConfig . config . SafetyAmountOfClips TxtboxAUX1SoundAmount . Text = RuntimeConfig . config . AUXSound1OfClips TxtboxAUX2SoundAmount . Text = RuntimeConfig . config . AUXSound2OfClips TxtboxAUX3SoundAmount . Text = RuntimeConfig . config . AUXSound3OfClips TxtboxEventSoundLoopTime . Text = RuntimeConfig . config . EventLoopTime TxtboxSafetySoundLoopTime . Text = RuntimeConfig . config . SafetyLoopTime ' Lastly start normal timer . ConfigUpdateInfo . Enabled = True End Sub Private Sub BtnDepartingPlayP1_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingPlayP1 . Click Sound . TrainDepartingP1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Deaprting P1)\" End Sub Private Sub BtnDepartingPlayP2_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingPlayP2 . Click Sound . TrainDepartingP2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Deaprting P2)\" End Sub Private Sub BtnArrivingPlayP1_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP1 . Click Sound . TrainApprochingP1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Approching P1)\" End Sub Private Sub BtnArrivingPlayP2_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP2 . Click Sound . TrainApprochingP2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Approching P2)\" End Sub Private Sub BtnSidingPlay_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP1 . Click Sound . TrainEnteringSiding () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Entering Siding)\" End Sub Private Sub BtnEventPlay_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP2 . Click Sound . EventSound () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Event Sound)\" End Sub Private Sub BtnSafetyMessagePlay_Click ( sender As Object , e As EventArgs ) Handles BtnSafetyPlay . Click Sound . SafetySound () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Saftey Message)\" End Sub Private Sub BtnAUX1Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX1Play . Click Sound . AUXSound1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 1)\" End Sub Private Sub BtnAUX2Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX2Play . Click Sound . AUXSound2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 2)\" End Sub Private Sub BtnAUX3Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX3Play . Click Sound . AUXSound3 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 3)\" End Sub Private Sub BtnBellTest_Click ( sender As Object , e As EventArgs ) Handles BtnBellTest . Click Bell = 5 ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Bell) for 5 seconds\" End Sub Private Sub BtnDepartingP1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingP1Enabled . Click If RuntimeConfig . config . DepartingP1SoundEnabled = False Then RuntimeConfig . config . DepartingP1SoundEnabled = True BtnDepartingP1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled Sound (Departing P1)\" Else RuntimeConfig . config . DepartingP1SoundEnabled = False BtnDepartingP1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled Sound (Departing P1)\" End If End Sub Private Sub BtnDepartingP2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingP2Enabled . Click If RuntimeConfig . config . DepartingP2SoundEnabled = False Then RuntimeConfig . config . DepartingP2SoundEnabled = True BtnDepartingP2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Departing P2)\" Else RuntimeConfig . config . DepartingP2SoundEnabled = False BtnDepartingP2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Departing P2)\" End If End Sub Private Sub BtnArrivingP1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingP1Enabled . Click If RuntimeConfig . config . ArrivingP1SoundEnabled = False Then RuntimeConfig . config . ArrivingP1SoundEnabled = True BtnArrivingP1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Arriving P1)\" Else RuntimeConfig . config . ArrivingP1SoundEnabled = False BtnArrivingP1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Arriving P1)\" End If End Sub Private Sub BtnArrivingP2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingP2Enabled . Click If RuntimeConfig . config . ArrivingP2SoundEnabled = False Then RuntimeConfig . config . ArrivingP2SoundEnabled = True BtnArrivingP2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Arriving P2)\" Else RuntimeConfig . config . ArrivingP2SoundEnabled = False BtnArrivingP2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Arriving P2)\" End If End Sub Private Sub BtnSidingEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnSidingEnabled . Click If RuntimeConfig . config . SidingSoundEnabled = False Then RuntimeConfig . config . SidingSoundEnabled = True BtnSidingEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Entering Siding)\" Else RuntimeConfig . config . SidingSoundEnabled = False BtnSidingEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Entering Siding)\" End If End Sub Private Sub BtnEventEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnEventEnabled . Click If RuntimeConfig . config . EventSoundEnabled = False Then RuntimeConfig . config . EventSoundEnabled = True BtnEventEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Event)\" Else RuntimeConfig . config . EventSoundEnabled = False BtnEventEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Event)\" End If End Sub Private Sub BtnSafetyEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnSafetyEnabled . Click If RuntimeConfig . config . SafetySoundEnabled = False Then RuntimeConfig . config . SafetySoundEnabled = True BtnSafetyEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Safety message)\" Else RuntimeConfig . config . SafetySoundEnabled = False BtnSafetyEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Safety message)\" End If End Sub Private Sub BtnAUX1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX1Enabled . Click If RuntimeConfig . config . AUXSound1Enabled = False Then RuntimeConfig . config . AUXSound1Enabled = True BtnAUX1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 1)\" Else RuntimeConfig . config . AUXSound1Enabled = False BtnAUX1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 1)\" End If End Sub Private Sub BtnAUX2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX2Enabled . Click If RuntimeConfig . config . AUXSound2Enabled = False Then RuntimeConfig . config . AUXSound2Enabled = True BtnAUX2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 2)\" Else RuntimeConfig . config . AUXSound2Enabled = False BtnAUX2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 2)\" End If End Sub Private Sub BtnAUX3Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX3Enabled . Click If RuntimeConfig . config . AUXSound3Enabled = False Then RuntimeConfig . config . AUXSound3Enabled = True BtnAUX3Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 3)\" Else RuntimeConfig . config . AUXSound3Enabled = False BtnAUX3Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 3)\" End If End Sub Private Sub BtnBellEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnBellEnabled . Click If RuntimeConfig . config . BellEnabled = False Then RuntimeConfig . config . BellEnabled = True BtnBellEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled the bell\" Else RuntimeConfig . config . BellEnabled = False BtnBellEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled the bell\" End If End Sub Private Sub TxtboxDepartingP1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxDepartingP1SoundAmount . TextChanged RuntimeConfig . config . DepartingP1AmountOfClips = TxtboxDepartingP1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Departing P1) to \" & TxtboxDepartingP1SoundAmount . Text End Sub Private Sub TxtboxDepartingP2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxDepartingP2SoundAmount . TextChanged RuntimeConfig . config . DepartingP2AmountOfClips = TxtboxDepartingP2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Departing P2) to \" & TxtboxDepartingP2SoundAmount . Text End Sub Private Sub TxtboxArrivingP1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxArrivingP1SoundAmount . TextChanged RuntimeConfig . config . ArrivingP1AmountOfClips = TxtboxArrivingP1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Arriving P1) to \" & TxtboxArrivingP1SoundAmount . Text End Sub Private Sub TxtboxArrivingP2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxArrivingP2SoundAmount . TextChanged RuntimeConfig . config . ArrivingP2AmountOfClips = TxtboxArrivingP2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Arriving P2) to \" & TxtboxArrivingP2SoundAmount . Text End Sub Private Sub TxtboxSidingSoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSidingSoundAmount . TextChanged RuntimeConfig . config . SidingAmountOfClips = TxtboxSidingSoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Entering siding) to \" & TxtboxSidingSoundAmount . Text End Sub Private Sub TxtboxEventSoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxEventSoundAmount . TextChanged RuntimeConfig . config . EventAmountOfClips = TxtboxEventSoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Event) to \" & TxtboxEventSoundAmount . Text End Sub Private Sub TxtboxSafetySoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSafetySoundAmount . TextChanged RuntimeConfig . config . SafetyAmountOfClips = TxtboxSafetySoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Safety Message) to \" & TxtboxSafetySoundAmount . Text End Sub Private Sub TxtboxAUX1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX1SoundAmount . TextChanged RuntimeConfig . config . AUXSound1OfClips = TxtboxAUX1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 1) to \" & TxtboxAUX1SoundAmount . Text End Sub Private Sub TxtboxAUX2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX2SoundAmount . TextChanged RuntimeConfig . config . AUXSound2OfClips = TxtboxAUX2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 2) to \" & TxtboxAUX2SoundAmount . Text End Sub Private Sub TxtboxAUX3SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX3SoundAmount . TextChanged RuntimeConfig . config . AUXSound3OfClips = TxtboxAUX3SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 3) to \" & TxtboxAUX3SoundAmount . Text End Sub Private Sub TxtboxEventSoundLoopTime_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxEventSoundLoopTime . TextChanged RuntimeConfig . config . EventLoopTime = TxtboxEventSoundLoopTime . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of secound for the sound to loop (Event) to \" & TxtboxEventSoundLoopTime . Text End Sub Private Sub TxtboxSafetySoundLoopTime_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSafetySoundLoopTime . TextChanged RuntimeConfig . config . SafetyLoopTime = TxtboxSafetySoundLoopTime . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of secound for the sound to loop (Safety Message) to \" & TxtboxSafetySoundLoopTime . Text End Sub ' Save settings Private Sub Save_Tick ( sender As Object , e As EventArgs ) Handles Save . Tick RuntimeConfig . Save () End Sub ' Air controls Private Sub BtnDisableAir_Click ( sender As Object , e As EventArgs ) Handles BtnDisableAir . Click If RuntimeConfig . config . AirEnabled = True Then RuntimeConfig . config . AirEnabled = False RuntimeConfig . config . ForceAir = False ' alarmsandNotifications . SystemEventLog = \"Overall air was disabled \" Else RuntimeConfig . config . AirEnabled = True ' alarmsandNotifications . SystemEventLog = \"Overall air was enabled \" End If End Sub Private Sub BtnForceEnableAir_Click ( sender As Object , e As EventArgs ) Handles BtnForceEnableAir . Click If RuntimeConfig . config . ForceAir = True Then RuntimeConfig . config . ForceAir = False ' alarmsandNotifications . SystemEventLog = \"Force Air was disabled \" Else RuntimeConfig . config . ForceAir = True ' alarmsandNotifications . SystemEventLog = \"Force Air was enabled \" End If End Sub Private Sub BtnEngineeringMode_Click ( sender As Object , e As EventArgs ) ' alarmsandNotifications . EngineerMode () End Sub ' Initializations Private Sub BtnInitializationAJ1_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ1 . Click If Initializations . AJ1Initiated = True Then Initializations . AJ1Initiated = False AJ1InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ1 Has been manually re-initiated \" Else AJ1InitiatedTimer = 0 Initializations . AJ1Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ1 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ2_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ2 . Click If Initializations . AJ2Initiated = True Then Initializations . AJ2Initiated = False AJ2InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ2 Has been manually re-initiated \" Else AJ2InitiatedTimer = 0 Initializations . AJ2Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ2 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ3_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ3 . Click If Initializations . AJ3Initiated = True Then Initializations . AJ3Initiated = False AJ3InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ3 Has been manually re-initiated \" Else AJ3InitiatedTimer = 0 Initializations . AJ3Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ3 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ4_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ4 . Click If Initializations . AJ4Initiated = True Then Initializations . AJ4Initiated = False AJ4InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ4 Has been manually re-initiated \" Else AJ4InitiatedTimer = 0 Initializations . AJ4Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ4 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ7_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ7 . Click If Initializations . AJ7Initiated = True Then Initializations . AJ7Initiated = False AJ7InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ7 Has been manually re-initiated \" Else AJ7InitiatedTimer = 0 Initializations . AJ7Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ7 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ8_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ8 . Click If Initializations . AJ8Initiated = True Then Initializations . AJ8Initiated = False AJ8InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ8 Has been manually re-initiated \" Else AJ8InitiatedTimer = 0 Initializations . AJ8Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ8 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ9_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ9 . Click If Initializations . AJ9Initiated = True Then Initializations . AJ9Initiated = False AJ9InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ9 Has been manually re-initiated \" Else AJ9InitiatedTimer = 0 Initializations . AJ9Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ9 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ15_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ15 . Click If Initializations . AJ15Initiated = True Then Initializations . AJ15Initiated = False AJ15InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ15 Has been manually re-initiated \" Else AJ15InitiatedTimer = 0 Initializations . AJ15Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ15 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ16_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ16 . Click If Initializations . AJ16Initiated = True Then Initializations . AJ16Initiated = False AJ16InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ16 Has been manually re-initiated \" Else AJ16InitiatedTimer = 0 Initializations . AJ16Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ16 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ17_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ17 . Click If Initializations . AJ17Initiated = True Then Initializations . AJ17Initiated = False AJ17InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ17 Has been manually re-initiated \" Else AJ17InitiatedTimer = 0 Initializations . AJ17Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ17 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ18_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ18 . Click If Initializations . AJ18Initiated = True Then Initializations . AJ18Initiated = False AJ18InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ18 Has been manually re-initiated \" Else AJ18InitiatedTimer = 0 Initializations . AJ18Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ18 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ21_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ21 . Click If Initializations . AJ21Initiated = True Then Initializations . AJ21Initiated = False AJ21InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ21 Has been manually re-initiated \" Else AJ21InitiatedTimer = 0 Initializations . AJ21Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ21 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ22_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ22 . Click If Initializations . AJ22Initiated = True Then Initializations . AJ22Initiated = False AJ22InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ22 Has been manually re-initiated \" Else AJ22InitiatedTimer = 0 Initializations . AJ22Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ22 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint5_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint5 . Click If Initializations . Point5Initiated = True Then Initializations . Point5Initiated = False Point5InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point5 Has been manually re-initiated \" Else Point5InitiatedTimer = 0 Initializations . Point5Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point5 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint6_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint6 . Click If Initializations . Point6Initiated = True Then Initializations . Point6Initiated = False Point6InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point6 Has been manually re-initiated \" Else Point6InitiatedTimer = 0 Initializations . Point6Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point6 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint10_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint10 . Click If Initializations . Point10Initiated = True Then Initializations . Point10Initiated = False Point10InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point10 Has been manually re-initiated \" Else Point10InitiatedTimer = 0 Initializations . Point10Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point10 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint11_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint11 . Click If Initializations . Point11Initiated = True Then Initializations . Point11Initiated = False Point11InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point11 Has been manually re-initiated \" Else Point11InitiatedTimer = 0 Initializations . Point11Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point11 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint12_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint12 . Click If Initializations . Point12Initiated = True Then Initializations . Point12Initiated = False Point12InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point12 Has been manually re-initiated \" Else Point12InitiatedTimer = 0 Initializations . Point12Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point12 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint13_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint13 . Click If Initializations . Point13Initiated = True Then Initializations . Point13Initiated = False Point13InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point13 Has been manually re-initiated \" Else Point13InitiatedTimer = 0 Initializations . Point13Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point13 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint14_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint14 . Click If Initializations . Point14Initiated = True Then Initializations . Point14Initiated = False Point14InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point14 Has been manually re-initiated \" Else Point14InitiatedTimer = 0 Initializations . Point14Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point14 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint19_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint19 . Click If Initializations . Point19Initiated = True Then Initializations . Point19Initiated = False Point19InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point19 Has been manually re-initiated \" Else Point19InitiatedTimer = 0 Initializations . Point19Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point19 has been forced initiated \" End If End Sub Private Sub BtnInitializationS11_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS11 . Click If Initializations . S11Initiated = True Then Initializations . S11Initiated = False S11InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S11 Has been manually re-initiated \" Else S11InitiatedTimer = 0 Initializations . S11Initiated = True ' alarmsandNotifications . SystemEventLog = \"S11 has been forced initiated \" End If End Sub Private Sub BtnInitializationS12_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS12 . Click If Initializations . S12Initiated = True Then Initializations . S12Initiated = False S12InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S12 Has been manually re-initiated \" Else S12InitiatedTimer = 0 Initializations . S12Initiated = True ' alarmsandNotifications . SystemEventLog = \"S12 has been forced initiated \" End If End Sub Private Sub BtnInitializationS14_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS14 . Click If Initializations . S14Initiated = True Then Initializations . S14Initiated = False S14InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S14 Has been manually re-initiated \" Else S14InitiatedTimer = 0 Initializations . S14Initiated = True ' alarmsandNotifications . SystemEventLog = \"S14 has been forced initiated \" End If End Sub Private Sub BtnInitializationS19_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS19 . Click If Initializations . S19Initiated = True Then Initializations . S19Initiated = False S19InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S19 Has been manually re-initiated \" Else S19InitiatedTimer = 0 Initializations . S19Initiated = True ' alarmsandNotifications . SystemEventLog = \"S19 has been forced initiated \" End If End Sub Private Sub BtnInitializationSound_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationSound . Click If Initializations . SoundInitiated = True Then Initializations . SoundInitiated = False SoundInitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Sound Has been manually re-initiated \" Else SoundInitiatedTimer = 0 Initializations . SoundInitiated = True ' alarmsandNotifications . SystemEventLog = \"Sound has been forced initiated \" End If End Sub Private Sub BtnInitializationButtons_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationButtons . Click If Initializations . ButtonsInitiated = True Then Initializations . ButtonsInitiated = False ButtonsInitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Buttons Has been manually re-initiated \" Else ButtonsInitiatedTimer = 0 Initializations . ButtonsInitiated = True ' alarmsandNotifications . SystemEventLog = \"Buttons has been forced initiated \" End If End Sub Private Sub BtnSetWestbound_Click ( sender As Object , e As EventArgs ) Handles BtnSetWestbound . Click RuntimeConfig . config . DirectionOveride = \"WestBound\" End Sub Private Sub BtnSetSystem_Click ( sender As Object , e As EventArgs ) Handles BtnSetSystem . Click RuntimeConfig . config . DirectionOveride = \"Auto\" End Sub Private Sub BtnSetEastbound_Click ( sender As Object , e As EventArgs ) Handles BtnSetEastbound . Click RuntimeConfig . config . DirectionOveride = \"EastBound\" End Sub Private Sub BtnAddTrainSectionI_Click ( sender As Object , e As EventArgs ) AIStart . AISectionNOccupie = True End Sub Private Sub BtnAIEnable_Click ( sender As Object , e As EventArgs ) If RuntimeConfig . config . AIEnabled = False Then RuntimeConfig . config . AIEnabled = True Else RuntimeConfig . config . AIEnabled = False End If End Sub Private Sub BtnCombineP1_Click ( sender As Object , e As EventArgs ) Handles BtnCombineP1 . Click If RuntimeConfig . config . P1Combine = True Then RuntimeConfig . config . P1Combine = False BtnCombineP1 . Text = \"Disabled\" Else RuntimeConfig . config . P1Combine = True BtnCombineP1 . Text = \"Enabled\" End If End Sub Private Sub CBAllowAudio_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBAllowAudio . CheckedChanged AllowAudio = CBAllowAudio . CheckState End Sub Private Sub CBAllowDeparting_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBAllowDeparting . CheckedChanged AllowDeparting = CBAllowDeparting . CheckState End Sub Private Sub BtnR3_Click ( sender As Object , e As EventArgs ) Handles BtnR3 . Click Sound . R3Play () End Sub Private Sub BtnR2_Click ( sender As Object , e As EventArgs ) Handles BtnR2 . Click Sound . R2Play () End Sub Private Sub BtnR1_Click ( sender As Object , e As EventArgs ) Handles BtnR1 . Click Sound . R1Play () End Sub Private Sub CBAllowModeInput_CheckedChanged ( sender As Object , e As EventArgs ) End Sub Private Sub BtnModeComputer_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"Computer\" End Sub Private Sub BtnModeExternal_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"External\" End Sub Private Sub BtnModeManual_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"Manual\" End Sub Private Sub CBmanualStationStartedRequestRequired_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBmanualStationStartedRequestRequired . CheckedChanged RequireButtonInputToClearSignal = CBmanualStationStartedRequestRequired . CheckState End Sub ' Tunnel Private Sub RDEastEndTunnelSetOpen_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetOpen . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"Open\" End Sub Private Sub RDEastEndTunnelSetSystem_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetSystem . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"System\" End Sub Private Sub RDEastEndTunnelSetClosed_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetClosed . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"Closed\" End Sub Private Sub RDWestEndTunnelSetOpen_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetOpen . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"Open\" End Sub Private Sub RDWestEndTunnelSetSystem_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetSystem . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"System\" End Sub Private Sub RDWestEndTunnelSetClosed_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetClosed . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"Closed\" End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/PopUpConfig.vb"},{"location":"mainsystem/Files/PopUpConfig_8vb/#githubsignallingsystemehmr-signalling-systemconfigspopupconfigvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/PopUpConfig.vb"},{"location":"mainsystem/Files/PopUpConfig_8vb/#source-code","text":"Public Class PopUpConfig Private Sub PopUpConfig_Load ( sender As Object , e As EventArgs ) Handles MyBase . Load LoadValues () End Sub ' Timer Private Sub ConfigUpdateInfo_Tick ( sender As Object , e As EventArgs ) Handles ConfigUpdateInfo . Tick ' Tunnel If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndOpen ) = 1 Then CBEastEndTunnelStateOpen . Checked = True Else CBEastEndTunnelStateOpen . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelEastEndClose ) = 1 Then CBEastEndTunnelStateCLose . Checked = True Else CBEastEndTunnelStateCLose . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndOpen ) = 1 Then CBWestEndTunnelStateOpen . Checked = True Else CBWestEndTunnelStateOpen . Checked = False End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressTunnelWestEndClose ) = 1 Then CBWestEndTunnelStateClose . Checked = True Else CBWestEndTunnelStateClose . Checked = False End If LblTunnelOpen . Text = ( \"Tunnel Open - \" & LineSide . TunnelOpen ) LblTunnelSafe . Text = ( \"Tunnel Safe - \" & LineSide . TunnelSafe ) ' Audio Buttons If RuntimeConfig . config . DepartingP1SoundEnabled = True Then BtnDepartingP1Enabled . Text = \"Enabled\" BtnDepartingPlayP1 . Enabled = True Else BtnDepartingP1Enabled . Text = \"Disabled\" BtnDepartingPlayP1 . Enabled = False End If If RuntimeConfig . config . DepartingP2SoundEnabled = True Then BtnDepartingP2Enabled . Text = \"Enabled\" BtnDepartingPlayP2 . Enabled = True Else BtnDepartingP2Enabled . Text = \"Disabled\" BtnDepartingPlayP2 . Enabled = False End If If RuntimeConfig . config . ArrivingP1SoundEnabled = True Then BtnArrivingP1Enabled . Text = \"Enabled\" BtnArrivingPlayP1 . Enabled = True Else BtnArrivingP1Enabled . Text = \"Disabled\" BtnArrivingPlayP1 . Enabled = False End If If RuntimeConfig . config . ArrivingP2SoundEnabled = True Then BtnArrivingP2Enabled . Text = \"Enabled\" BtnArrivingPlayP2 . Enabled = True Else BtnArrivingP2Enabled . Text = \"Disabled\" BtnArrivingPlayP2 . Enabled = False End If If RuntimeConfig . config . SidingSoundEnabled = True Then BtnSidingEnabled . Text = \"Enabled\" BtnSidingPlay . Enabled = True Else BtnSidingEnabled . Text = \"Disabled\" BtnSidingPlay . Enabled = False End If If RuntimeConfig . config . EventSoundEnabled = True Then BtnEventEnabled . Text = \"Enabled\" BtnEventPlay . Enabled = True Else BtnEventEnabled . Text = \"Disabled\" BtnEventPlay . Enabled = False End If If RuntimeConfig . config . SafetySoundEnabled = True Then BtnSafetyEnabled . Text = \"Enabled\" BtnSafetyPlay . Enabled = True Else BtnSafetyEnabled . Text = \"Disabled\" BtnSafetyPlay . Enabled = False End If If RuntimeConfig . config . AUXSound1Enabled = True Then BtnAUX1Enabled . Text = \"Enabled\" BtnAUX1Play . Enabled = True Else BtnAUX1Enabled . Text = \"Disabled\" BtnAUX1Play . Enabled = False End If If RuntimeConfig . config . AUXSound2Enabled = True Then BtnAUX2Enabled . Text = \"Enabled\" BtnAUX2Play . Enabled = True Else BtnAUX2Enabled . Text = \"Disabled\" BtnAUX2Play . Enabled = False End If If RuntimeConfig . config . AUXSound3Enabled = True Then BtnAUX3Enabled . Text = \"Enabled\" BtnAUX3Play . Enabled = True Else BtnAUX3Enabled . Text = \"Disabled\" BtnAUX3Play . Enabled = False End If If RuntimeConfig . config . BellEnabled = True Then BtnBellEnabled . Text = \"Enabled\" BtnBellTest . Enabled = True Else BtnBellEnabled . Text = \"Disabled\" BtnBellTest . Enabled = False End If ' Overall Air If RuntimeConfig . config . AirEnabled = True Then BtnDisableAir . Text = \"ALL AIR ENABLED\" BtnForceEnableAir . Enabled = True Else BtnDisableAir . Text = \"ALL AIR DISABLED\" BtnForceEnableAir . Enabled = False End If If RuntimeConfig . config . ForceAir = True Then BtnForceEnableAir . Text = \"Air Forced On\" Else BtnForceEnableAir . Text = \"Air Forced Off\" End If ' Initializations If Initializations . AJ1Initiated = True Then BtnInitializationAJ1 . Text = \"Re-Initiate AJ1\" LblInitializationAJ1 . Text = \"AJ1 Is fully initiated!\" LblInitializationAJ1 . ForeColor = Color . Black Else BtnInitializationAJ1 . Text = \"Force Initiate AJ1\" If AJ1InitiatedTimer = InitilizationStart Or AJ1InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ1 . ForeColor = Color . Red LblInitializationAJ1 . Text = \"AJ1 Is being prevented to initiate (\" & AJ1InitiatedTimer & \")\" Else LblInitializationAJ1 . ForeColor = Color . Green LblInitializationAJ1 . Text = \"AJ1 Is still trying to initiate (\" & AJ1InitiatedTimer & \")\" End If End If If Initializations . AJ2Initiated = True Then BtnInitializationAJ2 . Text = \"Re-Initiate AJ2\" LblInitializationAJ2 . Text = \"AJ2 Is fully initiated!\" LblInitializationAJ2 . ForeColor = Color . Black Else BtnInitializationAJ2 . Text = \"Force Initiate AJ2\" If AJ2InitiatedTimer = InitilizationStart Or AJ2InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ2 . ForeColor = Color . Red LblInitializationAJ2 . Text = \"AJ2 Is being prevented to initiate (\" & AJ2InitiatedTimer & \")\" Else LblInitializationAJ2 . ForeColor = Color . Green LblInitializationAJ2 . Text = \"AJ2 Is still trying to initiate (\" & AJ2InitiatedTimer & \")\" End If End If If Initializations . AJ3Initiated = True Then BtnInitializationAJ3 . Text = \"Re-Initiate AJ3\" LblInitializationAJ3 . Text = \"AJ3 Is fully initiated!\" LblInitializationAJ3 . ForeColor = Color . Black Else BtnInitializationAJ3 . Text = \"Force Initiate AJ3\" If AJ3InitiatedTimer = InitilizationStart Or AJ3InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ3 . ForeColor = Color . Red LblInitializationAJ3 . Text = \"AJ3 Is being prevented to initiate (\" & AJ3InitiatedTimer & \")\" Else LblInitializationAJ3 . ForeColor = Color . Green LblInitializationAJ3 . Text = \"AJ3 Is still trying to initiate (\" & AJ3InitiatedTimer & \")\" End If End If If Initializations . AJ4Initiated = True Then BtnInitializationAJ4 . Text = \"Re-Initiate AJ4\" LblInitializationAJ4 . Text = \"AJ4 Is fully initiated!\" LblInitializationAJ4 . ForeColor = Color . Black Else BtnInitializationAJ4 . Text = \"Force Initiate AJ4\" If AJ4InitiatedTimer = InitilizationStart Or AJ4InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ4 . ForeColor = Color . Red LblInitializationAJ4 . Text = \"AJ4 Is being prevented to initiate (\" & AJ4InitiatedTimer & \")\" Else LblInitializationAJ4 . ForeColor = Color . Green LblInitializationAJ4 . Text = \"AJ4 Is still trying to initiate (\" & AJ4InitiatedTimer & \")\" End If End If If Initializations . AJ7Initiated = True Then BtnInitializationAJ7 . Text = \"Re-Initiate AJ7\" LblInitializationAJ7 . Text = \"AJ7 Is fully initiated!\" LblInitializationAJ7 . ForeColor = Color . Black Else BtnInitializationAJ7 . Text = \"Force Initiate AJ7\" If AJ7InitiatedTimer = InitilizationStart Or AJ7InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ7 . ForeColor = Color . Red LblInitializationAJ7 . Text = \"AJ7 Is being prevented to initiate (\" & AJ7InitiatedTimer & \")\" Else LblInitializationAJ7 . ForeColor = Color . Green LblInitializationAJ7 . Text = \"AJ7 Is still trying to initiate (\" & AJ7InitiatedTimer & \")\" End If End If If Initializations . AJ8Initiated = True Then BtnInitializationAJ8 . Text = \"Re-Initiate AJ8\" LblInitializationAJ8 . Text = \"AJ8 Is fully initiated!\" LblInitializationAJ8 . ForeColor = Color . Black Else BtnInitializationAJ8 . Text = \"Force Initiate AJ8\" If AJ8InitiatedTimer = InitilizationStart Or AJ8InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ8 . ForeColor = Color . Red LblInitializationAJ8 . Text = \"AJ8 Is being prevented to initiate (\" & AJ8InitiatedTimer & \")\" Else LblInitializationAJ8 . ForeColor = Color . Green LblInitializationAJ8 . Text = \"AJ8 Is still trying to initiate (\" & AJ8InitiatedTimer & \")\" End If End If If Initializations . AJ9Initiated = True Then BtnInitializationAJ9 . Text = \"Re-Initiate AJ9\" LblInitializationAJ9 . Text = \"AJ9 Is fully initiated!\" LblInitializationAJ9 . ForeColor = Color . Black Else BtnInitializationAJ9 . Text = \"Force Initiate AJ9\" If AJ9InitiatedTimer = InitilizationStart Or AJ9InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ9 . ForeColor = Color . Red LblInitializationAJ9 . Text = \"AJ9 Is being prevented to initiate (\" & AJ9InitiatedTimer & \")\" Else LblInitializationAJ9 . ForeColor = Color . Green LblInitializationAJ9 . Text = \"AJ9 Is still trying to initiate (\" & AJ9InitiatedTimer & \")\" End If End If If Initializations . AJ15Initiated = True Then BtnInitializationAJ15 . Text = \"Re-Initiate AJ15\" LblInitializationAJ15 . Text = \"AJ15 Is fully initiated!\" LblInitializationAJ15 . ForeColor = Color . Black Else BtnInitializationAJ15 . Text = \"Force Initiate AJ15\" If AJ15InitiatedTimer = InitilizationStart Or AJ15InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ15 . ForeColor = Color . Red LblInitializationAJ15 . Text = \"AJ15 Is being prevented to initiate (\" & AJ15InitiatedTimer & \")\" Else LblInitializationAJ15 . ForeColor = Color . Green LblInitializationAJ15 . Text = \"AJ15 Is still trying to initiate (\" & AJ15InitiatedTimer & \")\" End If End If If Initializations . AJ16Initiated = True Then BtnInitializationAJ16 . Text = \"Re-Initiate AJ16\" LblInitializationAJ16 . Text = \"AJ16 Is fully initiated!\" LblInitializationAJ16 . ForeColor = Color . Black Else BtnInitializationAJ16 . Text = \"Force Initiate AJ16\" If AJ16InitiatedTimer = InitilizationStart Or AJ16InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ16 . ForeColor = Color . Red LblInitializationAJ16 . Text = \"AJ16 Is being prevented to initiate (\" & AJ16InitiatedTimer & \")\" Else LblInitializationAJ16 . ForeColor = Color . Green LblInitializationAJ16 . Text = \"AJ16 Is still trying to initiate (\" & AJ16InitiatedTimer & \")\" End If End If If Initializations . AJ17Initiated = True Then BtnInitializationAJ17 . Text = \"Re-Initiate AJ17\" LblInitializationAJ17 . Text = \"AJ17 Is fully initiated!\" LblInitializationAJ17 . ForeColor = Color . Black Else BtnInitializationAJ17 . Text = \"Force Initiate AJ17\" If AJ17InitiatedTimer = InitilizationStart Or AJ17InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ17 . ForeColor = Color . Red LblInitializationAJ17 . Text = \"AJ17 Is being prevented to initiate (\" & AJ17InitiatedTimer & \")\" Else LblInitializationAJ17 . ForeColor = Color . Green LblInitializationAJ17 . Text = \"AJ17 Is still trying to initiate (\" & AJ17InitiatedTimer & \")\" End If End If If Initializations . AJ18Initiated = True Then BtnInitializationAJ18 . Text = \"Re-Initiate AJ18\" LblInitializationAJ18 . Text = \"AJ18 Is fully initiated!\" LblInitializationAJ18 . ForeColor = Color . Black Else BtnInitializationAJ18 . Text = \"Force Initiate AJ18\" If AJ18InitiatedTimer = InitilizationStart Or AJ18InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ18 . ForeColor = Color . Red LblInitializationAJ18 . Text = \"AJ18 Is being prevented to initiate (\" & AJ18InitiatedTimer & \")\" Else LblInitializationAJ18 . ForeColor = Color . Green LblInitializationAJ18 . Text = \"AJ18 Is still trying to initiate (\" & AJ18InitiatedTimer & \")\" End If End If If Initializations . AJ21Initiated = True Then BtnInitializationAJ21 . Text = \"Re-Initiate AJ21\" LblInitializationAJ21 . Text = \"AJ21 Is fully initiated!\" LblInitializationAJ21 . ForeColor = Color . Black Else BtnInitializationAJ21 . Text = \"Force Initiate AJ21\" If AJ21InitiatedTimer = InitilizationStart Or AJ21InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ21 . ForeColor = Color . Red LblInitializationAJ21 . Text = \"AJ21 Is being prevented to initiate (\" & AJ21InitiatedTimer & \")\" Else LblInitializationAJ21 . ForeColor = Color . Green LblInitializationAJ21 . Text = \"AJ21 Is still trying to initiate (\" & AJ21InitiatedTimer & \")\" End If End If If Initializations . AJ22Initiated = True Then BtnInitializationAJ22 . Text = \"Re-Initiate AJ22\" LblInitializationAJ22 . Text = \"AJ22 Is fully initiated!\" LblInitializationAJ22 . ForeColor = Color . Black Else BtnInitializationAJ22 . Text = \"Force Initiate AJ22\" If AJ22InitiatedTimer = InitilizationStart Or AJ22InitiatedTimer = InitilizationStart - 1 Then LblInitializationAJ22 . ForeColor = Color . Red LblInitializationAJ22 . Text = \"AJ22 Is being prevented to initiate (\" & AJ22InitiatedTimer & \")\" Else LblInitializationAJ22 . ForeColor = Color . Green LblInitializationAJ22 . Text = \"AJ22 Is still trying to initiate (\" & AJ22InitiatedTimer & \")\" End If End If If Initializations . Point5Initiated = True Then BtnInitializationPoint5 . Text = \"Re-Initiate Point5\" LblInitializationPoint5 . Text = \"Point5 Is fully initiated!\" LblInitializationPoint5 . ForeColor = Color . Black Else BtnInitializationPoint5 . Text = \"Force Initiate Point5\" If Point5InitiatedTimer = InitilizationStart Or Point5InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint5 . ForeColor = Color . Red LblInitializationPoint5 . Text = \"Point5 Is being prevented to initiate (\" & Point5InitiatedTimer & \")\" Else LblInitializationPoint5 . ForeColor = Color . Green LblInitializationPoint5 . Text = \"Point5 Is still trying to initiate (\" & Point5InitiatedTimer & \")\" End If End If If Initializations . Point6Initiated = True Then BtnInitializationPoint6 . Text = \"Re-Initiate Point6\" LblInitializationPoint6 . Text = \"Point6 Is fully initiated!\" LblInitializationPoint6 . ForeColor = Color . Black Else BtnInitializationPoint6 . Text = \"Force Initiate Point6\" If Point6InitiatedTimer = InitilizationStart Or Point6InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint6 . ForeColor = Color . Red LblInitializationPoint6 . Text = \"Point6 Is being prevented to initiate (\" & Point6InitiatedTimer & \")\" Else LblInitializationPoint6 . ForeColor = Color . Green LblInitializationPoint6 . Text = \"Point6 Is still trying to initiate (\" & Point6InitiatedTimer & \")\" End If End If If Initializations . Point10Initiated = True Then BtnInitializationPoint10 . Text = \"Re-Initiate Point10\" LblInitializationPoint10 . Text = \"Point10 Is fully initiated!\" LblInitializationPoint10 . ForeColor = Color . Black Else BtnInitializationPoint10 . Text = \"Force Initiate Point10\" If Point10InitiatedTimer = InitilizationStart Or Point10InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint10 . ForeColor = Color . Red LblInitializationPoint10 . Text = \"Point10 Is being prevented to initiate (\" & Point10InitiatedTimer & \")\" Else LblInitializationPoint10 . ForeColor = Color . Green LblInitializationPoint10 . Text = \"Point10 Is still trying to initiate (\" & Point10InitiatedTimer & \")\" End If End If If Initializations . Point11Initiated = True Then BtnInitializationPoint11 . Text = \"Re-Initiate Point11\" LblInitializationPoint11 . Text = \"Point11 Is fully initiated!\" LblInitializationPoint11 . ForeColor = Color . Black Else BtnInitializationPoint11 . Text = \"Force Initiate Point11\" If Point11InitiatedTimer = InitilizationStart Or Point11InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint11 . ForeColor = Color . Red LblInitializationPoint11 . Text = \"Point11 Is being prevented to initiate (\" & Point11InitiatedTimer & \")\" Else LblInitializationPoint11 . ForeColor = Color . Green LblInitializationPoint11 . Text = \"Point11 Is still trying to initiate (\" & Point11InitiatedTimer & \")\" End If End If If Initializations . Point12Initiated = True Then BtnInitializationPoint12 . Text = \"Re-Initiate Point12\" LblInitializationPoint12 . Text = \"Point12 Is fully initiated!\" LblInitializationPoint12 . ForeColor = Color . Black Else BtnInitializationPoint12 . Text = \"Force Initiate Point12\" If Point12InitiatedTimer = InitilizationStart Or Point12InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint12 . ForeColor = Color . Red LblInitializationPoint12 . Text = \"Point12 Is being prevented to initiate (\" & Point12InitiatedTimer & \")\" Else LblInitializationPoint12 . ForeColor = Color . Green LblInitializationPoint12 . Text = \"Point12 Is still trying to initiate (\" & Point12InitiatedTimer & \")\" End If End If If Initializations . Point13Initiated = True Then BtnInitializationPoint13 . Text = \"Re-Initiate Point13\" LblInitializationPoint13 . Text = \"Point13 Is fully initiated!\" LblInitializationPoint13 . ForeColor = Color . Black Else BtnInitializationPoint13 . Text = \"Force Initiate Point13\" If Point13InitiatedTimer = InitilizationStart Or Point13InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint13 . ForeColor = Color . Red LblInitializationPoint13 . Text = \"Point13 Is being prevented to initiate (\" & Point13InitiatedTimer & \")\" Else LblInitializationPoint13 . ForeColor = Color . Green LblInitializationPoint13 . Text = \"Point13 Is still trying to initiate (\" & Point13InitiatedTimer & \")\" End If End If If Initializations . Point14Initiated = True Then BtnInitializationPoint14 . Text = \"Re-Initiate Point14\" LblInitializationPoint14 . Text = \"Point14 Is fully initiated!\" LblInitializationPoint14 . ForeColor = Color . Black Else BtnInitializationPoint14 . Text = \"Force Initiate Point14\" If Point14InitiatedTimer = InitilizationStart Or Point14InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint14 . ForeColor = Color . Red LblInitializationPoint14 . Text = \"Point14 Is being prevented to initiate (\" & Point14InitiatedTimer & \")\" Else LblInitializationPoint14 . ForeColor = Color . Green LblInitializationPoint14 . Text = \"Point14 Is still trying to initiate (\" & Point14InitiatedTimer & \")\" End If End If If Initializations . Point19Initiated = True Then BtnInitializationPoint19 . Text = \"Re-Initiate Point19\" LblInitializationPoint19 . Text = \"Point19 Is fully initiated!\" LblInitializationPoint19 . ForeColor = Color . Black Else BtnInitializationPoint19 . Text = \"Force Initiate Point19\" If Point19InitiatedTimer = InitilizationStart Or Point19InitiatedTimer = InitilizationStart - 1 Then LblInitializationPoint19 . ForeColor = Color . Red LblInitializationPoint19 . Text = \"Point19 Is being prevented to initiate (\" & Point19InitiatedTimer & \")\" Else LblInitializationPoint19 . ForeColor = Color . Green LblInitializationPoint19 . Text = \"Point19 Is still trying to initiate (\" & Point19InitiatedTimer & \")\" End If End If If Initializations . S11Initiated = True Then BtnInitializationS11 . Text = \"Re-Initiate S11\" LblInitializationS11 . Text = \"S11 Is fully initiated!\" LblInitializationS11 . ForeColor = Color . Black Else BtnInitializationS11 . Text = \"Force Initiate S11\" If S11InitiatedTimer = InitilizationStart Or S11InitiatedTimer = InitilizationStart - 1 Then LblInitializationS11 . ForeColor = Color . Red LblInitializationS11 . Text = \"S11 Is being prevented to initiate (\" & S11InitiatedTimer & \")\" Else LblInitializationS11 . ForeColor = Color . Green LblInitializationS11 . Text = \"S11 Is still trying to initiate (\" & S11InitiatedTimer & \")\" End If End If If Initializations . S12Initiated = True Then BtnInitializationS12 . Text = \"Re-Initiate S12\" LblInitializationS12 . Text = \"S12 Is fully initiated!\" LblInitializationS12 . ForeColor = Color . Black Else BtnInitializationS12 . Text = \"Force Initiate S12\" If S12InitiatedTimer = InitilizationStart Or S12InitiatedTimer = InitilizationStart - 1 Then LblInitializationS12 . ForeColor = Color . Red LblInitializationS12 . Text = \"S12 Is being prevented to initiate (\" & S12InitiatedTimer & \")\" Else LblInitializationS12 . ForeColor = Color . Green LblInitializationS12 . Text = \"S12 Is still trying to initiate (\" & S12InitiatedTimer & \")\" End If End If If Initializations . S14Initiated = True Then BtnInitializationS14 . Text = \"Re-Initiate S14\" LblInitializationS14 . Text = \"S14 Is fully initiated!\" LblInitializationS14 . ForeColor = Color . Black Else BtnInitializationS14 . Text = \"Force Initiate S14\" If S14InitiatedTimer = InitilizationStart Or S14InitiatedTimer = InitilizationStart - 1 Then LblInitializationS14 . ForeColor = Color . Red LblInitializationS14 . Text = \"S14 Is being prevented to initiate (\" & S14InitiatedTimer & \")\" Else LblInitializationS14 . ForeColor = Color . Green LblInitializationS14 . Text = \"S14 Is still trying to initiate (\" & S14InitiatedTimer & \")\" End If End If If Initializations . S19Initiated = True Then BtnInitializationS19 . Text = \"Re-Initiate S19\" LblInitializationS19 . Text = \"S19 Is fully initiated!\" LblInitializationS19 . ForeColor = Color . Black Else BtnInitializationS19 . Text = \"Force Initiate S19\" If S19InitiatedTimer = InitilizationStart Or S19InitiatedTimer = InitilizationStart - 1 Then LblInitializationS19 . ForeColor = Color . Red LblInitializationS19 . Text = \"S19 Is being prevented to initiate (\" & S19InitiatedTimer & \")\" Else LblInitializationS19 . ForeColor = Color . Green LblInitializationS19 . Text = \"S19 Is still trying to initiate (\" & S19InitiatedTimer & \")\" End If End If If Initializations . SoundInitiated = True Then BtnInitializationSound . Text = \"Re-Initiate Sound\" LblInitializationSound . Text = \"Sound Is fully initiated!\" LblInitializationSound . ForeColor = Color . Black Else BtnInitializationSound . Text = \"Force Initiate Sound\" If SoundInitiatedTimer = InitilizationStart Or SoundInitiatedTimer = InitilizationStart - 1 Then LblInitializationSound . ForeColor = Color . Red LblInitializationSound . Text = \"Sound Is being prevented to initiate (\" & SoundInitiatedTimer & \")\" Else LblInitializationSound . ForeColor = Color . Green LblInitializationSound . Text = \"Sound Is still trying to initiate (\" & SoundInitiatedTimer & \")\" End If End If If Initializations . ButtonsInitiated = True Then BtnInitializationButtons . Text = \"Re-Initiate Buttons\" LblInitializationButtons . Text = \"Buttons Is fully initiated!\" LblInitializationButtons . ForeColor = Color . Black Else BtnInitializationButtons . Text = \"Force Initiate Buttons\" If ButtonsInitiatedTimer = InitilizationStart Or ButtonsInitiatedTimer = InitilizationStart - 1 Then LblInitializationButtons . ForeColor = Color . Red LblInitializationButtons . Text = \"Buttons Is being prevented to initiate (\" & ButtonsInitiatedTimer & \")\" Else LblInitializationButtons . ForeColor = Color . Green LblInitializationButtons . Text = \"Buttons Is still trying to initiate (\" & ButtonsInitiatedTimer & \")\" End If End If End Sub ' Load Values Private Sub LoadValues () RuntimeConfig . LoadConfig () ' Tunnel If RuntimeConfig . config . WestEndTunnel = \"System\" Then RDWestEndTunnelSetSystem . Checked = True ElseIf RuntimeConfig . config . WestEndTunnel = \"Open\" Then RDWestEndTunnelSetOpen . Checked = True ElseIf RuntimeConfig . config . WestEndTunnel = \"Closed\" Then RDWestEndTunnelSetClosed . Checked = True End If If RuntimeConfig . config . EastEndTunnel = \"System\" Then RDEastEndTunnelSetSystem . Checked = True ElseIf RuntimeConfig . config . EastEndTunnel = \"Open\" Then RDEastEndTunnelSetOpen . Checked = True ElseIf RuntimeConfig . config . EastEndTunnel = \"Closed\" Then RDEastEndTunnelSetClosed . Checked = True End If ' Platform 1 combined If RuntimeConfig . config . P1Combine = True Then BtnCombineP1 . Text = \"Enabled\" Else BtnCombineP1 . Text = \"Disabled\" End If ' Audio TxtboxDepartingP1SoundAmount . Text = RuntimeConfig . config . DepartingP1AmountOfClips TxtboxDepartingP2SoundAmount . Text = RuntimeConfig . config . DepartingP2AmountOfClips TxtboxArrivingP1SoundAmount . Text = RuntimeConfig . config . ArrivingP1AmountOfClips TxtboxArrivingP2SoundAmount . Text = RuntimeConfig . config . ArrivingP2AmountOfClips TxtboxSidingSoundAmount . Text = RuntimeConfig . config . SidingAmountOfClips TxtboxEventSoundAmount . Text = RuntimeConfig . config . EventAmountOfClips TxtboxSafetySoundAmount . Text = RuntimeConfig . config . SafetyAmountOfClips TxtboxAUX1SoundAmount . Text = RuntimeConfig . config . AUXSound1OfClips TxtboxAUX2SoundAmount . Text = RuntimeConfig . config . AUXSound2OfClips TxtboxAUX3SoundAmount . Text = RuntimeConfig . config . AUXSound3OfClips TxtboxEventSoundLoopTime . Text = RuntimeConfig . config . EventLoopTime TxtboxSafetySoundLoopTime . Text = RuntimeConfig . config . SafetyLoopTime ' Lastly start normal timer . ConfigUpdateInfo . Enabled = True End Sub Private Sub BtnDepartingPlayP1_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingPlayP1 . Click Sound . TrainDepartingP1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Deaprting P1)\" End Sub Private Sub BtnDepartingPlayP2_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingPlayP2 . Click Sound . TrainDepartingP2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Deaprting P2)\" End Sub Private Sub BtnArrivingPlayP1_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP1 . Click Sound . TrainApprochingP1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Approching P1)\" End Sub Private Sub BtnArrivingPlayP2_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP2 . Click Sound . TrainApprochingP2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Approching P2)\" End Sub Private Sub BtnSidingPlay_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP1 . Click Sound . TrainEnteringSiding () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Train Entering Siding)\" End Sub Private Sub BtnEventPlay_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingPlayP2 . Click Sound . EventSound () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Event Sound)\" End Sub Private Sub BtnSafetyMessagePlay_Click ( sender As Object , e As EventArgs ) Handles BtnSafetyPlay . Click Sound . SafetySound () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Saftey Message)\" End Sub Private Sub BtnAUX1Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX1Play . Click Sound . AUXSound1 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 1)\" End Sub Private Sub BtnAUX2Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX2Play . Click Sound . AUXSound2 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 2)\" End Sub Private Sub BtnAUX3Play_Click ( sender As Object , e As EventArgs ) Handles BtnAUX3Play . Click Sound . AUXSound3 () ' alarmsandNotifications . SystemEventLog = \"Manually triggered (AUX 3)\" End Sub Private Sub BtnBellTest_Click ( sender As Object , e As EventArgs ) Handles BtnBellTest . Click Bell = 5 ' alarmsandNotifications . SystemEventLog = \"Manually triggered (Bell) for 5 seconds\" End Sub Private Sub BtnDepartingP1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingP1Enabled . Click If RuntimeConfig . config . DepartingP1SoundEnabled = False Then RuntimeConfig . config . DepartingP1SoundEnabled = True BtnDepartingP1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled Sound (Departing P1)\" Else RuntimeConfig . config . DepartingP1SoundEnabled = False BtnDepartingP1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled Sound (Departing P1)\" End If End Sub Private Sub BtnDepartingP2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnDepartingP2Enabled . Click If RuntimeConfig . config . DepartingP2SoundEnabled = False Then RuntimeConfig . config . DepartingP2SoundEnabled = True BtnDepartingP2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Departing P2)\" Else RuntimeConfig . config . DepartingP2SoundEnabled = False BtnDepartingP2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Departing P2)\" End If End Sub Private Sub BtnArrivingP1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingP1Enabled . Click If RuntimeConfig . config . ArrivingP1SoundEnabled = False Then RuntimeConfig . config . ArrivingP1SoundEnabled = True BtnArrivingP1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Arriving P1)\" Else RuntimeConfig . config . ArrivingP1SoundEnabled = False BtnArrivingP1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Arriving P1)\" End If End Sub Private Sub BtnArrivingP2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnArrivingP2Enabled . Click If RuntimeConfig . config . ArrivingP2SoundEnabled = False Then RuntimeConfig . config . ArrivingP2SoundEnabled = True BtnArrivingP2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Arriving P2)\" Else RuntimeConfig . config . ArrivingP2SoundEnabled = False BtnArrivingP2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Arriving P2)\" End If End Sub Private Sub BtnSidingEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnSidingEnabled . Click If RuntimeConfig . config . SidingSoundEnabled = False Then RuntimeConfig . config . SidingSoundEnabled = True BtnSidingEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Entering Siding)\" Else RuntimeConfig . config . SidingSoundEnabled = False BtnSidingEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Entering Siding)\" End If End Sub Private Sub BtnEventEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnEventEnabled . Click If RuntimeConfig . config . EventSoundEnabled = False Then RuntimeConfig . config . EventSoundEnabled = True BtnEventEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Event)\" Else RuntimeConfig . config . EventSoundEnabled = False BtnEventEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Event)\" End If End Sub Private Sub BtnSafetyEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnSafetyEnabled . Click If RuntimeConfig . config . SafetySoundEnabled = False Then RuntimeConfig . config . SafetySoundEnabled = True BtnSafetyEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (Safety message)\" Else RuntimeConfig . config . SafetySoundEnabled = False BtnSafetyEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (Safety message)\" End If End Sub Private Sub BtnAUX1Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX1Enabled . Click If RuntimeConfig . config . AUXSound1Enabled = False Then RuntimeConfig . config . AUXSound1Enabled = True BtnAUX1Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 1)\" Else RuntimeConfig . config . AUXSound1Enabled = False BtnAUX1Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 1)\" End If End Sub Private Sub BtnAUX2Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX2Enabled . Click If RuntimeConfig . config . AUXSound2Enabled = False Then RuntimeConfig . config . AUXSound2Enabled = True BtnAUX2Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 2)\" Else RuntimeConfig . config . AUXSound2Enabled = False BtnAUX2Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 2)\" End If End Sub Private Sub BtnAUX3Enabled_Click ( sender As Object , e As EventArgs ) Handles BtnAUX3Enabled . Click If RuntimeConfig . config . AUXSound3Enabled = False Then RuntimeConfig . config . AUXSound3Enabled = True BtnAUX3Enabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled sound (AUX 3)\" Else RuntimeConfig . config . AUXSound3Enabled = False BtnAUX3Enabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled sound (AUX 3)\" End If End Sub Private Sub BtnBellEnabled_Click ( sender As Object , e As EventArgs ) Handles BtnBellEnabled . Click If RuntimeConfig . config . BellEnabled = False Then RuntimeConfig . config . BellEnabled = True BtnBellEnabled . Text = \"Enabled\" ' alarmsandNotifications . SystemEventLog = \"Enabled the bell\" Else RuntimeConfig . config . BellEnabled = False BtnBellEnabled . Text = \"Disabled\" ' alarmsandNotifications . SystemEventLog = \"Disabled the bell\" End If End Sub Private Sub TxtboxDepartingP1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxDepartingP1SoundAmount . TextChanged RuntimeConfig . config . DepartingP1AmountOfClips = TxtboxDepartingP1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Departing P1) to \" & TxtboxDepartingP1SoundAmount . Text End Sub Private Sub TxtboxDepartingP2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxDepartingP2SoundAmount . TextChanged RuntimeConfig . config . DepartingP2AmountOfClips = TxtboxDepartingP2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Departing P2) to \" & TxtboxDepartingP2SoundAmount . Text End Sub Private Sub TxtboxArrivingP1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxArrivingP1SoundAmount . TextChanged RuntimeConfig . config . ArrivingP1AmountOfClips = TxtboxArrivingP1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Arriving P1) to \" & TxtboxArrivingP1SoundAmount . Text End Sub Private Sub TxtboxArrivingP2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxArrivingP2SoundAmount . TextChanged RuntimeConfig . config . ArrivingP2AmountOfClips = TxtboxArrivingP2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Arriving P2) to \" & TxtboxArrivingP2SoundAmount . Text End Sub Private Sub TxtboxSidingSoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSidingSoundAmount . TextChanged RuntimeConfig . config . SidingAmountOfClips = TxtboxSidingSoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Entering siding) to \" & TxtboxSidingSoundAmount . Text End Sub Private Sub TxtboxEventSoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxEventSoundAmount . TextChanged RuntimeConfig . config . EventAmountOfClips = TxtboxEventSoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Event) to \" & TxtboxEventSoundAmount . Text End Sub Private Sub TxtboxSafetySoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSafetySoundAmount . TextChanged RuntimeConfig . config . SafetyAmountOfClips = TxtboxSafetySoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (Safety Message) to \" & TxtboxSafetySoundAmount . Text End Sub Private Sub TxtboxAUX1SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX1SoundAmount . TextChanged RuntimeConfig . config . AUXSound1OfClips = TxtboxAUX1SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 1) to \" & TxtboxAUX1SoundAmount . Text End Sub Private Sub TxtboxAUX2SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX2SoundAmount . TextChanged RuntimeConfig . config . AUXSound2OfClips = TxtboxAUX2SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 2) to \" & TxtboxAUX2SoundAmount . Text End Sub Private Sub TxtboxAUX3SoundAmount_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxAUX3SoundAmount . TextChanged RuntimeConfig . config . AUXSound3OfClips = TxtboxAUX3SoundAmount . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of sounds for (AUX 3) to \" & TxtboxAUX3SoundAmount . Text End Sub Private Sub TxtboxEventSoundLoopTime_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxEventSoundLoopTime . TextChanged RuntimeConfig . config . EventLoopTime = TxtboxEventSoundLoopTime . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of secound for the sound to loop (Event) to \" & TxtboxEventSoundLoopTime . Text End Sub Private Sub TxtboxSafetySoundLoopTime_TextChanged ( sender As Object , e As EventArgs ) Handles TxtboxSafetySoundLoopTime . TextChanged RuntimeConfig . config . SafetyLoopTime = TxtboxSafetySoundLoopTime . Text ' alarmsandNotifications . SystemEventLog = \"Adjusted amount of secound for the sound to loop (Safety Message) to \" & TxtboxSafetySoundLoopTime . Text End Sub ' Save settings Private Sub Save_Tick ( sender As Object , e As EventArgs ) Handles Save . Tick RuntimeConfig . Save () End Sub ' Air controls Private Sub BtnDisableAir_Click ( sender As Object , e As EventArgs ) Handles BtnDisableAir . Click If RuntimeConfig . config . AirEnabled = True Then RuntimeConfig . config . AirEnabled = False RuntimeConfig . config . ForceAir = False ' alarmsandNotifications . SystemEventLog = \"Overall air was disabled \" Else RuntimeConfig . config . AirEnabled = True ' alarmsandNotifications . SystemEventLog = \"Overall air was enabled \" End If End Sub Private Sub BtnForceEnableAir_Click ( sender As Object , e As EventArgs ) Handles BtnForceEnableAir . Click If RuntimeConfig . config . ForceAir = True Then RuntimeConfig . config . ForceAir = False ' alarmsandNotifications . SystemEventLog = \"Force Air was disabled \" Else RuntimeConfig . config . ForceAir = True ' alarmsandNotifications . SystemEventLog = \"Force Air was enabled \" End If End Sub Private Sub BtnEngineeringMode_Click ( sender As Object , e As EventArgs ) ' alarmsandNotifications . EngineerMode () End Sub ' Initializations Private Sub BtnInitializationAJ1_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ1 . Click If Initializations . AJ1Initiated = True Then Initializations . AJ1Initiated = False AJ1InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ1 Has been manually re-initiated \" Else AJ1InitiatedTimer = 0 Initializations . AJ1Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ1 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ2_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ2 . Click If Initializations . AJ2Initiated = True Then Initializations . AJ2Initiated = False AJ2InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ2 Has been manually re-initiated \" Else AJ2InitiatedTimer = 0 Initializations . AJ2Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ2 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ3_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ3 . Click If Initializations . AJ3Initiated = True Then Initializations . AJ3Initiated = False AJ3InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ3 Has been manually re-initiated \" Else AJ3InitiatedTimer = 0 Initializations . AJ3Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ3 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ4_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ4 . Click If Initializations . AJ4Initiated = True Then Initializations . AJ4Initiated = False AJ4InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ4 Has been manually re-initiated \" Else AJ4InitiatedTimer = 0 Initializations . AJ4Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ4 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ7_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ7 . Click If Initializations . AJ7Initiated = True Then Initializations . AJ7Initiated = False AJ7InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ7 Has been manually re-initiated \" Else AJ7InitiatedTimer = 0 Initializations . AJ7Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ7 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ8_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ8 . Click If Initializations . AJ8Initiated = True Then Initializations . AJ8Initiated = False AJ8InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ8 Has been manually re-initiated \" Else AJ8InitiatedTimer = 0 Initializations . AJ8Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ8 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ9_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ9 . Click If Initializations . AJ9Initiated = True Then Initializations . AJ9Initiated = False AJ9InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ9 Has been manually re-initiated \" Else AJ9InitiatedTimer = 0 Initializations . AJ9Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ9 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ15_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ15 . Click If Initializations . AJ15Initiated = True Then Initializations . AJ15Initiated = False AJ15InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ15 Has been manually re-initiated \" Else AJ15InitiatedTimer = 0 Initializations . AJ15Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ15 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ16_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ16 . Click If Initializations . AJ16Initiated = True Then Initializations . AJ16Initiated = False AJ16InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ16 Has been manually re-initiated \" Else AJ16InitiatedTimer = 0 Initializations . AJ16Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ16 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ17_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ17 . Click If Initializations . AJ17Initiated = True Then Initializations . AJ17Initiated = False AJ17InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ17 Has been manually re-initiated \" Else AJ17InitiatedTimer = 0 Initializations . AJ17Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ17 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ18_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ18 . Click If Initializations . AJ18Initiated = True Then Initializations . AJ18Initiated = False AJ18InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ18 Has been manually re-initiated \" Else AJ18InitiatedTimer = 0 Initializations . AJ18Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ18 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ21_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ21 . Click If Initializations . AJ21Initiated = True Then Initializations . AJ21Initiated = False AJ21InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ21 Has been manually re-initiated \" Else AJ21InitiatedTimer = 0 Initializations . AJ21Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ21 has been forced initiated \" End If End Sub Private Sub BtnInitializationAJ22_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationAJ22 . Click If Initializations . AJ22Initiated = True Then Initializations . AJ22Initiated = False AJ22InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"AJ22 Has been manually re-initiated \" Else AJ22InitiatedTimer = 0 Initializations . AJ22Initiated = True ' alarmsandNotifications . SystemEventLog = \"AJ22 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint5_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint5 . Click If Initializations . Point5Initiated = True Then Initializations . Point5Initiated = False Point5InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point5 Has been manually re-initiated \" Else Point5InitiatedTimer = 0 Initializations . Point5Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point5 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint6_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint6 . Click If Initializations . Point6Initiated = True Then Initializations . Point6Initiated = False Point6InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point6 Has been manually re-initiated \" Else Point6InitiatedTimer = 0 Initializations . Point6Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point6 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint10_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint10 . Click If Initializations . Point10Initiated = True Then Initializations . Point10Initiated = False Point10InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point10 Has been manually re-initiated \" Else Point10InitiatedTimer = 0 Initializations . Point10Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point10 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint11_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint11 . Click If Initializations . Point11Initiated = True Then Initializations . Point11Initiated = False Point11InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point11 Has been manually re-initiated \" Else Point11InitiatedTimer = 0 Initializations . Point11Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point11 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint12_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint12 . Click If Initializations . Point12Initiated = True Then Initializations . Point12Initiated = False Point12InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point12 Has been manually re-initiated \" Else Point12InitiatedTimer = 0 Initializations . Point12Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point12 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint13_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint13 . Click If Initializations . Point13Initiated = True Then Initializations . Point13Initiated = False Point13InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point13 Has been manually re-initiated \" Else Point13InitiatedTimer = 0 Initializations . Point13Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point13 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint14_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint14 . Click If Initializations . Point14Initiated = True Then Initializations . Point14Initiated = False Point14InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point14 Has been manually re-initiated \" Else Point14InitiatedTimer = 0 Initializations . Point14Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point14 has been forced initiated \" End If End Sub Private Sub BtnInitializationPoint19_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationPoint19 . Click If Initializations . Point19Initiated = True Then Initializations . Point19Initiated = False Point19InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Point19 Has been manually re-initiated \" Else Point19InitiatedTimer = 0 Initializations . Point19Initiated = True ' alarmsandNotifications . SystemEventLog = \"Point19 has been forced initiated \" End If End Sub Private Sub BtnInitializationS11_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS11 . Click If Initializations . S11Initiated = True Then Initializations . S11Initiated = False S11InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S11 Has been manually re-initiated \" Else S11InitiatedTimer = 0 Initializations . S11Initiated = True ' alarmsandNotifications . SystemEventLog = \"S11 has been forced initiated \" End If End Sub Private Sub BtnInitializationS12_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS12 . Click If Initializations . S12Initiated = True Then Initializations . S12Initiated = False S12InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S12 Has been manually re-initiated \" Else S12InitiatedTimer = 0 Initializations . S12Initiated = True ' alarmsandNotifications . SystemEventLog = \"S12 has been forced initiated \" End If End Sub Private Sub BtnInitializationS14_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS14 . Click If Initializations . S14Initiated = True Then Initializations . S14Initiated = False S14InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S14 Has been manually re-initiated \" Else S14InitiatedTimer = 0 Initializations . S14Initiated = True ' alarmsandNotifications . SystemEventLog = \"S14 has been forced initiated \" End If End Sub Private Sub BtnInitializationS19_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationS19 . Click If Initializations . S19Initiated = True Then Initializations . S19Initiated = False S19InitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"S19 Has been manually re-initiated \" Else S19InitiatedTimer = 0 Initializations . S19Initiated = True ' alarmsandNotifications . SystemEventLog = \"S19 has been forced initiated \" End If End Sub Private Sub BtnInitializationSound_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationSound . Click If Initializations . SoundInitiated = True Then Initializations . SoundInitiated = False SoundInitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Sound Has been manually re-initiated \" Else SoundInitiatedTimer = 0 Initializations . SoundInitiated = True ' alarmsandNotifications . SystemEventLog = \"Sound has been forced initiated \" End If End Sub Private Sub BtnInitializationButtons_Click ( sender As Object , e As EventArgs ) Handles BtnInitializationButtons . Click If Initializations . ButtonsInitiated = True Then Initializations . ButtonsInitiated = False ButtonsInitiatedTimer = InitilizationStart ' alarmsandNotifications . SystemEventLog = \"Buttons Has been manually re-initiated \" Else ButtonsInitiatedTimer = 0 Initializations . ButtonsInitiated = True ' alarmsandNotifications . SystemEventLog = \"Buttons has been forced initiated \" End If End Sub Private Sub BtnSetWestbound_Click ( sender As Object , e As EventArgs ) Handles BtnSetWestbound . Click RuntimeConfig . config . DirectionOveride = \"WestBound\" End Sub Private Sub BtnSetSystem_Click ( sender As Object , e As EventArgs ) Handles BtnSetSystem . Click RuntimeConfig . config . DirectionOveride = \"Auto\" End Sub Private Sub BtnSetEastbound_Click ( sender As Object , e As EventArgs ) Handles BtnSetEastbound . Click RuntimeConfig . config . DirectionOveride = \"EastBound\" End Sub Private Sub BtnAddTrainSectionI_Click ( sender As Object , e As EventArgs ) AIStart . AISectionNOccupie = True End Sub Private Sub BtnAIEnable_Click ( sender As Object , e As EventArgs ) If RuntimeConfig . config . AIEnabled = False Then RuntimeConfig . config . AIEnabled = True Else RuntimeConfig . config . AIEnabled = False End If End Sub Private Sub BtnCombineP1_Click ( sender As Object , e As EventArgs ) Handles BtnCombineP1 . Click If RuntimeConfig . config . P1Combine = True Then RuntimeConfig . config . P1Combine = False BtnCombineP1 . Text = \"Disabled\" Else RuntimeConfig . config . P1Combine = True BtnCombineP1 . Text = \"Enabled\" End If End Sub Private Sub CBAllowAudio_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBAllowAudio . CheckedChanged AllowAudio = CBAllowAudio . CheckState End Sub Private Sub CBAllowDeparting_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBAllowDeparting . CheckedChanged AllowDeparting = CBAllowDeparting . CheckState End Sub Private Sub BtnR3_Click ( sender As Object , e As EventArgs ) Handles BtnR3 . Click Sound . R3Play () End Sub Private Sub BtnR2_Click ( sender As Object , e As EventArgs ) Handles BtnR2 . Click Sound . R2Play () End Sub Private Sub BtnR1_Click ( sender As Object , e As EventArgs ) Handles BtnR1 . Click Sound . R1Play () End Sub Private Sub CBAllowModeInput_CheckedChanged ( sender As Object , e As EventArgs ) End Sub Private Sub BtnModeComputer_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"Computer\" End Sub Private Sub BtnModeExternal_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"External\" End Sub Private Sub BtnModeManual_Click ( sender As Object , e As EventArgs ) RuntimeConfig . config . Mode = \"Manual\" End Sub Private Sub CBmanualStationStartedRequestRequired_CheckedChanged ( sender As Object , e As EventArgs ) Handles CBmanualStationStartedRequestRequired . CheckedChanged RequireButtonInputToClearSignal = CBmanualStationStartedRequestRequired . CheckState End Sub ' Tunnel Private Sub RDEastEndTunnelSetOpen_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetOpen . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"Open\" End Sub Private Sub RDEastEndTunnelSetSystem_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetSystem . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"System\" End Sub Private Sub RDEastEndTunnelSetClosed_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDEastEndTunnelSetClosed . CheckedChanged RuntimeConfig . config . EastEndTunnel = \"Closed\" End Sub Private Sub RDWestEndTunnelSetOpen_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetOpen . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"Open\" End Sub Private Sub RDWestEndTunnelSetSystem_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetSystem . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"System\" End Sub Private Sub RDWestEndTunnelSetClosed_CheckedChanged ( sender As Object , e As EventArgs ) Handles RDWestEndTunnelSetClosed . CheckedChanged RuntimeConfig . config . WestEndTunnel = \"Closed\" End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Power_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/Power.vb \u00b6 Source code \u00b6 Module Power Public SignalAspectPower As Boolean = False Public FrameDisplayPower As Boolean = False Public MimicDisplayPower As Boolean = False Public PointSupplyPower As Boolean = False Public ACLatch As Boolean = False Public PowerUpCounter As Integer = 0 Public PowerState As String = \"System\" Public SystemOnTime As Boolean = False Public TunnelOpen As Boolean = False Public TunnelClose As Boolean = False Public SignalsOn As Boolean = False Public Sub PowerLogic () If DataReadInputsArray ( DigitalDeviceAddress . InputAddressACMonitor ) = 0 Then ACLatch = False Errors . RemoveError ( \"WARNING: AC has been lost to the frame please restore power)\" ) Else If ACLatch = False Then ACLatch = True Errors . NewError ( \"WARNING: AC has been lost to the frame please restore power)\" ) End If End If ' Is time between two times 09 : 00 - 18 : 00 Dim current As DateTime = DateTime . Now Dim currentHr As Integer = current . Hour Dim currentday As String = Date . Today . DayOfWeek . ToString () If currentday = \"Saturday\" Or currentday = \"Sunday\" Then If currentHr >= 10 And currentHr <= 16 Then SystemOnTime = True Else SystemOnTime = False End If Else SystemOnTime = False End If ' Contactor control If PowerState = \"System\" Then ' Turn System on if not already on when either tunnel is open or in running hours If ( SystemOnTime = True ) Or ( LineSide . TunnelOpen = True ) Then SignalsOn = True If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 0 Then Errors . NewError ( \"System Powering On!\" ) DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 1 Safety . EStopReset = True Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 Errors . RemoveError ( \"System Powering On!\" ) End If Else SignalsOn = False If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 1 Errors . NewError ( \"System Powering Off!\" ) Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 Errors . RemoveError ( \"System Powering Off!\" ) End If End If ElseIf PowerState = \"Off\" Then SignalsOn = False ' Make sure the \"on\" relay is already off DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 ' Turn system off if not already off If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 1 Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 End If Else SignalsOn = True ' Make sure the \"off\" relay is already off DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 ' Turn System on if not already on If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 0 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 1 Safety . EStopReset = True Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 End If End If If SignalsOn = False Then SignalAspectPower = False FrameDisplayPower = False MimicDisplayPower = False PointSupplyPower = False PowerUpCounter = 0 End If If SignalsOn = True And ( Not PowerUpCounter = 200 ) Then ' PowerUpCounter += 1 End If If SignalsOn = True And PowerUpCounter > 5 Then SignalAspectPower = True If SignalsOn = True And PowerUpCounter > 10 Then FrameDisplayPower = True If SignalsOn = True And PowerUpCounter > 20 Then MimicDisplayPower = True If SignalsOn = True And PowerUpCounter > 40 Then PointSupplyPower = True End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Power.vb"},{"location":"mainsystem/Files/Power_8vb/#githubsignallingsystemehmr-signalling-systemlogicpowervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Power.vb"},{"location":"mainsystem/Files/Power_8vb/#source-code","text":"Module Power Public SignalAspectPower As Boolean = False Public FrameDisplayPower As Boolean = False Public MimicDisplayPower As Boolean = False Public PointSupplyPower As Boolean = False Public ACLatch As Boolean = False Public PowerUpCounter As Integer = 0 Public PowerState As String = \"System\" Public SystemOnTime As Boolean = False Public TunnelOpen As Boolean = False Public TunnelClose As Boolean = False Public SignalsOn As Boolean = False Public Sub PowerLogic () If DataReadInputsArray ( DigitalDeviceAddress . InputAddressACMonitor ) = 0 Then ACLatch = False Errors . RemoveError ( \"WARNING: AC has been lost to the frame please restore power)\" ) Else If ACLatch = False Then ACLatch = True Errors . NewError ( \"WARNING: AC has been lost to the frame please restore power)\" ) End If End If ' Is time between two times 09 : 00 - 18 : 00 Dim current As DateTime = DateTime . Now Dim currentHr As Integer = current . Hour Dim currentday As String = Date . Today . DayOfWeek . ToString () If currentday = \"Saturday\" Or currentday = \"Sunday\" Then If currentHr >= 10 And currentHr <= 16 Then SystemOnTime = True Else SystemOnTime = False End If Else SystemOnTime = False End If ' Contactor control If PowerState = \"System\" Then ' Turn System on if not already on when either tunnel is open or in running hours If ( SystemOnTime = True ) Or ( LineSide . TunnelOpen = True ) Then SignalsOn = True If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 0 Then Errors . NewError ( \"System Powering On!\" ) DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 1 Safety . EStopReset = True Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 Errors . RemoveError ( \"System Powering On!\" ) End If Else SignalsOn = False If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 1 Errors . NewError ( \"System Powering Off!\" ) Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 Errors . RemoveError ( \"System Powering Off!\" ) End If End If ElseIf PowerState = \"Off\" Then SignalsOn = False ' Make sure the \"on\" relay is already off DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 ' Turn system off if not already off If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 1 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 1 Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 End If Else SignalsOn = True ' Make sure the \"off\" relay is already off DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 ' Turn System on if not already on If DataReadInputsArray ( DigitalDeviceAddress . InputAddressAUXContactorDetection ) = 0 Then DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 1 Safety . EStopReset = True Else ' Turn relays off if no need to update system power DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorOFF ) = 0 DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAUXContactorON ) = 0 End If End If If SignalsOn = False Then SignalAspectPower = False FrameDisplayPower = False MimicDisplayPower = False PointSupplyPower = False PowerUpCounter = 0 End If If SignalsOn = True And ( Not PowerUpCounter = 200 ) Then ' PowerUpCounter += 1 End If If SignalsOn = True And PowerUpCounter > 5 Then SignalAspectPower = True If SignalsOn = True And PowerUpCounter > 10 Then FrameDisplayPower = True If SignalsOn = True And PowerUpCounter > 20 Then MimicDisplayPower = True If SignalsOn = True And PowerUpCounter > 40 Then PointSupplyPower = True End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/RuntimeConfig_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/RuntimeConfig.vb \u00b6 Source code \u00b6 Imports YamlDotNet . Serialization Imports YamlDotNet . Serialization . NamingConventions Imports System . IO Module RuntimeConfig Public config As RuntimeConfigObj Private ReadOnly defaultYaml = \"MonthDirection:\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"AllowInputDirection: True\" & Environment . NewLine & \"DirectionOveride: Auto\" & Environment . NewLine & \"PointInputOverrides:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"PointOutputOverrides:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"LeverLock:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"LeverRestroke:\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"LeverState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"Mode: Computer\" & Environment . NewLine & \"SignalState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"TrackSectionOverrides:\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"TrackSectionSetPoint:\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"TrackSectionSetPointError:\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"PointSectionOverrides:\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"PointSectionSetPoint:\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"PointSectionSetPointError:\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"DepartingP1SoundEnabled: True\" & Environment . NewLine & \"DepartingP2SoundEnabled: True\" & Environment . NewLine & \"ArrivingP1SoundEnabled: True\" & Environment . NewLine & \"ArrivingP2SoundEnabled: True\" & Environment . NewLine & \"SidingSoundEnabled: True\" & Environment . NewLine & \"EventSoundEnabled: False\" & Environment . NewLine & \"SafetySoundEnabled: False\" & Environment . NewLine & \"AUXSound1Enabled: True\" & Environment . NewLine & \"AUXSound2Enabled: True\" & Environment . NewLine & \"AUXSound3Enabled: True\" & Environment . NewLine & \"DepartingP1AmountOfClips: 3\" & Environment . NewLine & \"DepartingP2AmountOfClips: 3\" & Environment . NewLine & \"ArrivingP1AmountOfClips: 3\" & Environment . NewLine & \"ArrivingP2AmountOfClips: 3\" & Environment . NewLine & \"SidingAmountOfClips: 1\" & Environment . NewLine & \"EventAmountOfClips: 1\" & Environment . NewLine & \"SafetyAmountOfClips: 1\" & Environment . NewLine & \"AUXSound1OfClips: 1\" & Environment . NewLine & \"AUXSound2OfClips: 1\" & Environment . NewLine & \"AUXSound3OfClips: 1\" & Environment . NewLine & \"BellEnabled: True\" & Environment . NewLine & \"EventLoopTime: 300\" & Environment . NewLine & \"SafetyLoopTime: 300\" & Environment . NewLine & \"ButtonEnabled:\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"ButtonIndicatorState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"PointReturnFaultTime: 60\" & Environment . NewLine & \"ButtonRequestFaultTime: 480\" & Environment . NewLine & \"AirEnabled: True\" & Environment . NewLine & \"ForceAir: False\" & Environment . NewLine & \"SignalSpadDetection: \" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"AIEnabled: False\" & Environment . NewLine & \"P1Combine: False\" & Environment . NewLine & \"WestEndTunnel: System\" & Environment . NewLine & \"EastEndTunnel: System\" & Environment . NewLine & \"OutterGateOutSensor: System\" & Environment . NewLine & \"OutterGateInSensor: System\" & Environment . NewLine & \"InnerGateOutSensor: System\" & Environment . NewLine & \"InnerGateInSensor: System\" & Environment . NewLine & \"LevelCrossingWarningBuzzer: System\" & Environment . NewLine Sub LoadConfig () RuntimeConfig . Upgrade () Dim deserializer As New Deserializer () Using reader As New StreamReader ( GlobalConfig . config . RuntimePath ) config = deserializer . Deserialize ( Of RuntimeConfigObj )( reader ) End Using End Sub Sub Save () Dim serializer As New Serializer () Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( serializer . Serialize ( RuntimeConfig . config )) End Using End Sub Sub Upgrade () If Not System . IO . File . Exists ( GlobalConfig . config . RuntimePath ) Then ' Create the file from empty Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( defaultYaml ) End Using Return End If Dim deserializer As New Deserializer () Try Using reader As New StreamReader ( GlobalConfig . config . RuntimePath ) config = deserializer . Deserialize ( Of RuntimeConfigObj )( reader ) End Using Catch e As YamlDotNet . Core . YamlException ' Failed to read config file - back up this one and regenerate System . IO . File . Copy ( GlobalConfig . config . RuntimePath , GlobalConfig . config . RuntimePath & \".\" & DateTime . Now . ToString ( \"yyyyMMddHHmm\" )) Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( defaultYaml ) End Using End Try End Sub End Module Class RuntimeConfigObj Public MonthDirection () As String Public AllowInputDirection As String Public DirectionOveride As String Public PointInputOverrides () As String Public PointOutputOverrides () As String Public LeverLock () As String Public LeverRestroke () As Boolean Public LeverState () As String Public Mode As String Public SignalState () As String Public TrackSectionOverrides () As String Public TrackSectionSetPoint () As String Public TrackSectionSetPointError () As String Public PointSectionOverrides () As String Public PointSectionSetPoint () As String Public PointSectionSetPointError () As String Public DepartingP1SoundEnabled As String Public DepartingP2SoundEnabled As String Public ArrivingP1SoundEnabled As String Public ArrivingP2SoundEnabled As String Public SidingSoundEnabled As String Public EventSoundEnabled As String Public SafetySoundEnabled As String Public AUXSound1Enabled As String Public AUXSound2Enabled As String Public AUXSound3Enabled As String Public DepartingP1AmountOfClips As String Public DepartingP2AmountOfClips As String Public ArrivingP1AmountOfClips As String Public ArrivingP2AmountOfClips As String Public SidingAmountOfClips As String Public EventAmountOfClips As String Public SafetyAmountOfClips As String Public AUXSound1OfClips As String Public AUXSound2OfClips As String Public AUXSound3OfClips As String Public BellEnabled As String Public EventLoopTime As String Public SafetyLoopTime As String Public ButtonEnabled () As String Public ButtonIndicatorState () As String Public PointReturnFaultTime As String Public ButtonRequestFaultTime As String Public AirEnabled As String Public ForceAir As String Public SignalSpadDetection () As Boolean Public AIEnabled As String Public P1Combine As String Public WestEndTunnel As String Public EastEndTunnel As String Public OutterGateOutSensor As String Public OutterGateInSensor As String Public InnerGateOutSensor As String Public InnerGateInSensor As String Public LevelCrossingWarningBuzzer As String End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/RuntimeConfig.vb"},{"location":"mainsystem/Files/RuntimeConfig_8vb/#githubsignallingsystemehmr-signalling-systemconfigsruntimeconfigvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/RuntimeConfig.vb"},{"location":"mainsystem/Files/RuntimeConfig_8vb/#source-code","text":"Imports YamlDotNet . Serialization Imports YamlDotNet . Serialization . NamingConventions Imports System . IO Module RuntimeConfig Public config As RuntimeConfigObj Private ReadOnly defaultYaml = \"MonthDirection:\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"- Eastbound\" & Environment . NewLine & \"AllowInputDirection: True\" & Environment . NewLine & \"DirectionOveride: Auto\" & Environment . NewLine & \"PointInputOverrides:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"PointOutputOverrides:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"LeverLock:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"LeverRestroke:\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"- False\" & Environment . NewLine & \"LeverState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"Mode: Computer\" & Environment . NewLine & \"SignalState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"TrackSectionOverrides:\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"TrackSectionSetPoint:\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"- 18\" & Environment . NewLine & \"TrackSectionSetPointError:\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"PointSectionOverrides:\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"- Detect\" & Environment . NewLine & \"PointSectionSetPoint:\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"- 20\" & Environment . NewLine & \"PointSectionSetPointError:\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"- 1\" & Environment . NewLine & \"DepartingP1SoundEnabled: True\" & Environment . NewLine & \"DepartingP2SoundEnabled: True\" & Environment . NewLine & \"ArrivingP1SoundEnabled: True\" & Environment . NewLine & \"ArrivingP2SoundEnabled: True\" & Environment . NewLine & \"SidingSoundEnabled: True\" & Environment . NewLine & \"EventSoundEnabled: False\" & Environment . NewLine & \"SafetySoundEnabled: False\" & Environment . NewLine & \"AUXSound1Enabled: True\" & Environment . NewLine & \"AUXSound2Enabled: True\" & Environment . NewLine & \"AUXSound3Enabled: True\" & Environment . NewLine & \"DepartingP1AmountOfClips: 3\" & Environment . NewLine & \"DepartingP2AmountOfClips: 3\" & Environment . NewLine & \"ArrivingP1AmountOfClips: 3\" & Environment . NewLine & \"ArrivingP2AmountOfClips: 3\" & Environment . NewLine & \"SidingAmountOfClips: 1\" & Environment . NewLine & \"EventAmountOfClips: 1\" & Environment . NewLine & \"SafetyAmountOfClips: 1\" & Environment . NewLine & \"AUXSound1OfClips: 1\" & Environment . NewLine & \"AUXSound2OfClips: 1\" & Environment . NewLine & \"AUXSound3OfClips: 1\" & Environment . NewLine & \"BellEnabled: True\" & Environment . NewLine & \"EventLoopTime: 300\" & Environment . NewLine & \"SafetyLoopTime: 300\" & Environment . NewLine & \"ButtonEnabled:\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"ButtonIndicatorState:\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"- System\" & Environment . NewLine & \"PointReturnFaultTime: 60\" & Environment . NewLine & \"ButtonRequestFaultTime: 480\" & Environment . NewLine & \"AirEnabled: True\" & Environment . NewLine & \"ForceAir: False\" & Environment . NewLine & \"SignalSpadDetection: \" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"- True\" & Environment . NewLine & \"AIEnabled: False\" & Environment . NewLine & \"P1Combine: False\" & Environment . NewLine & \"WestEndTunnel: System\" & Environment . NewLine & \"EastEndTunnel: System\" & Environment . NewLine & \"OutterGateOutSensor: System\" & Environment . NewLine & \"OutterGateInSensor: System\" & Environment . NewLine & \"InnerGateOutSensor: System\" & Environment . NewLine & \"InnerGateInSensor: System\" & Environment . NewLine & \"LevelCrossingWarningBuzzer: System\" & Environment . NewLine Sub LoadConfig () RuntimeConfig . Upgrade () Dim deserializer As New Deserializer () Using reader As New StreamReader ( GlobalConfig . config . RuntimePath ) config = deserializer . Deserialize ( Of RuntimeConfigObj )( reader ) End Using End Sub Sub Save () Dim serializer As New Serializer () Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( serializer . Serialize ( RuntimeConfig . config )) End Using End Sub Sub Upgrade () If Not System . IO . File . Exists ( GlobalConfig . config . RuntimePath ) Then ' Create the file from empty Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( defaultYaml ) End Using Return End If Dim deserializer As New Deserializer () Try Using reader As New StreamReader ( GlobalConfig . config . RuntimePath ) config = deserializer . Deserialize ( Of RuntimeConfigObj )( reader ) End Using Catch e As YamlDotNet . Core . YamlException ' Failed to read config file - back up this one and regenerate System . IO . File . Copy ( GlobalConfig . config . RuntimePath , GlobalConfig . config . RuntimePath & \".\" & DateTime . Now . ToString ( \"yyyyMMddHHmm\" )) Using writer As New StreamWriter ( GlobalConfig . config . RuntimePath ) writer . Write ( defaultYaml ) End Using End Try End Sub End Module Class RuntimeConfigObj Public MonthDirection () As String Public AllowInputDirection As String Public DirectionOveride As String Public PointInputOverrides () As String Public PointOutputOverrides () As String Public LeverLock () As String Public LeverRestroke () As Boolean Public LeverState () As String Public Mode As String Public SignalState () As String Public TrackSectionOverrides () As String Public TrackSectionSetPoint () As String Public TrackSectionSetPointError () As String Public PointSectionOverrides () As String Public PointSectionSetPoint () As String Public PointSectionSetPointError () As String Public DepartingP1SoundEnabled As String Public DepartingP2SoundEnabled As String Public ArrivingP1SoundEnabled As String Public ArrivingP2SoundEnabled As String Public SidingSoundEnabled As String Public EventSoundEnabled As String Public SafetySoundEnabled As String Public AUXSound1Enabled As String Public AUXSound2Enabled As String Public AUXSound3Enabled As String Public DepartingP1AmountOfClips As String Public DepartingP2AmountOfClips As String Public ArrivingP1AmountOfClips As String Public ArrivingP2AmountOfClips As String Public SidingAmountOfClips As String Public EventAmountOfClips As String Public SafetyAmountOfClips As String Public AUXSound1OfClips As String Public AUXSound2OfClips As String Public AUXSound3OfClips As String Public BellEnabled As String Public EventLoopTime As String Public SafetyLoopTime As String Public ButtonEnabled () As String Public ButtonIndicatorState () As String Public PointReturnFaultTime As String Public ButtonRequestFaultTime As String Public AirEnabled As String Public ForceAir As String Public SignalSpadDetection () As Boolean Public AIEnabled As String Public P1Combine As String Public WestEndTunnel As String Public EastEndTunnel As String Public OutterGateOutSensor As String Public OutterGateInSensor As String Public InnerGateOutSensor As String Public InnerGateInSensor As String Public LevelCrossingWarningBuzzer As String End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/SPADDetection_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/SPADDetection.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module SPADDetection Enum SPADSignalNames AJ1E = 0 AJ2E = 1 AJ3E = 2 AJ4E = 3 AJ7E = 4 AJ8E = 5 AJ9E = 6 AJ16E = 7 AJ17E = 8 AJ18E = 9 AJ21E = 10 AJ3W = 11 AJ7W = 12 AJ8W = 13 AJ9W = 14 AJ15W = 15 AJ16W = 16 AJ17W = 17 AJ18W = 18 AJ22W = 19 S11 = 20 S12 = 21 S14 = 22 S19 = 23 End Enum Public SignalNamesForSPADMessage () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" , \"AJ3W \" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" , \"S11\" , \"S12\" , \"S14\" , \"S19\" } Public SignalClearLatch () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public SignalLockOut () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True } Public SignalReverseLatch () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True } Public SignalSPADAlert () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub LogicStart () ' Signal | Signal | Section Before | Section After CheckIfSPAD ( SPADSignalNames . AJ1E , Definitions . SignalNames . AJ1E , TrackSectionUnoccupied ( TrackSectionNames . SectionH ), PointSectionUnoccupied ( PointNames . P11 )) If EastBound Then CheckIfSPAD ( SPADSignalNames . AJ2E , Definitions . SignalNames . AJ2E , TrackSectionUnoccupied ( TrackSectionNames . SectionP ), TrackSectionUnoccupied ( TrackSectionNames . SectionQ )) CheckIfSPAD ( SPADSignalNames . AJ3E , Definitions . SignalNames . AJ3E , TrackSectionUnoccupied ( TrackSectionNames . SectionDE ), TrackSectionUnoccupied ( TrackSectionNames . SectionE )) CheckIfSPAD ( SPADSignalNames . AJ4E , Definitions . SignalNames . AJ4E , TrackSectionUnoccupied ( TrackSectionNames . SectionE ), PointSectionUnoccupied ( PointNames . P13 )) End If CheckIfSPAD ( SPADSignalNames . AJ7E , Definitions . SignalNames . AJ7E , TrackSectionUnoccupied ( TrackSectionNames . SectionG ), TrackSectionUnoccupied ( TrackSectionNames . SectionH )) CheckIfSPAD ( SPADSignalNames . AJ8E , Definitions . SignalNames . AJ8E , TrackSectionUnoccupied ( TrackSectionNames . SectionCD ), TrackSectionUnoccupied ( TrackSectionNames . SectionD )) CheckIfSPAD ( SPADSignalNames . AJ9E , Definitions . SignalNames . AJ9E , TrackSectionUnoccupied ( TrackSectionNames . SectionN ), PointSectionUnoccupied ( PointNames . P14 )) CheckIfSPAD ( SPADSignalNames . AJ16E , Definitions . SignalNames . AJ16E , TrackSectionUnoccupied ( TrackSectionNames . SectionB ), TrackSectionUnoccupied ( TrackSectionNames . SectionC )) CheckIfSPAD ( SPADSignalNames . AJ17E , Definitions . SignalNames . AJ17E , TrackSectionUnoccupied ( TrackSectionNames . SectionO ), TrackSectionUnoccupied ( TrackSectionNames . SectionOP )) CheckIfSPAD ( SPADSignalNames . AJ18E , Definitions . SignalNames . AJ18E , TrackSectionUnoccupied ( TrackSectionNames . SectionM ), TrackSectionUnoccupied ( TrackSectionNames . SectionN )) CheckIfSPAD ( SPADSignalNames . AJ21E , Definitions . SignalNames . AJ21E , TrackSectionUnoccupied ( TrackSectionNames . SectionI ), TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 )) CheckIfSPAD ( SPADSignalNames . AJ3W , Definitions . SignalNames . AJ3W , TrackSectionUnoccupied ( TrackSectionNames . SectionDE ), TrackSectionUnoccupied ( TrackSectionNames . SectionD )) CheckIfSPAD ( SPADSignalNames . AJ7W , Definitions . SignalNames . AJ7W , TrackSectionUnoccupied ( TrackSectionNames . SectionH ), TrackSectionUnoccupied ( TrackSectionNames . SectionG )) CheckIfSPAD ( SPADSignalNames . AJ8W , Definitions . SignalNames . AJ8W , TrackSectionUnoccupied ( TrackSectionNames . SectionD ), TrackSectionUnoccupied ( TrackSectionNames . SectionCD )) CheckIfSPAD ( SPADSignalNames . AJ9W , Definitions . SignalNames . AJ9W , TrackSectionUnoccupied ( TrackSectionNames . SectionO ), TrackSectionUnoccupied ( TrackSectionNames . SectionNO )) If WestBound Or ( Points . PointReturns ( PointNames . P12 ) = PointInReverse ) Then CheckIfSPAD ( SPADSignalNames . AJ15W , Definitions . SignalNames . AJ15W , TrackSectionUnoccupied ( TrackSectionNames . SectionG ), PointSectionUnoccupied ( PointNames . P12 )) End If CheckIfSPAD ( SPADSignalNames . AJ16W , Definitions . SignalNames . AJ16W , TrackSectionUnoccupied ( TrackSectionNames . SectionC ), TrackSectionUnoccupied ( TrackSectionNames . SectionB )) CheckIfSPAD ( SPADSignalNames . AJ17W , Definitions . SignalNames . AJ17W , TrackSectionUnoccupied ( TrackSectionNames . SectionP ), TrackSectionUnoccupied ( TrackSectionNames . SectionOP )) CheckIfSPAD ( SPADSignalNames . AJ18W , Definitions . SignalNames . AJ18W , TrackSectionUnoccupied ( TrackSectionNames . SectionN ), TrackSectionUnoccupied ( TrackSectionNames . SectionM )) CheckIfSPAD ( SPADSignalNames . AJ22W , Definitions . SignalNames . AJ22W , TrackSectionUnoccupied ( TrackSectionNames . SectionI ), TrackSectionUnoccupied ( TrackSectionNames . SectionF13 )) CheckIfSPAD ( SPADSignalNames . S11 , Definitions . SignalNames . S11 , TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ), PointSectionUnoccupied ( PointNames . P11 )) CheckIfSPAD ( SPADSignalNames . S12 , Definitions . SignalNames . S12 , TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ), PointSectionUnoccupied ( PointNames . P12 )) CheckIfSPAD ( SPADSignalNames . S14 , Definitions . SignalNames . S14 , TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ), PointSectionUnoccupied ( PointNames . P14 )) CheckIfSPAD ( SPADSignalNames . S19 , Definitions . SignalNames . S19 , TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ), PointSectionUnoccupied ( PointNames . P19 )) End Sub Private Sub CheckIfSPAD ( Signal As Integer , SignalState As Integer , SectionBefore As Boolean , SectionAfter As Boolean ) ' Stops SPAD detection if train reverse into tracksection ( sectionnames . section If SectionAfter = False And SectionBefore = True Then SignalReverseLatch ( Signal ) = True End If If SignalReverseLatch ( Signal ) = True And SectionAfter = True And SectionBefore = True Then SignalReverseLatch ( Signal ) = False SignalSPADAlert ( Signal ) = False End If ' Reset following SPAD If SectionAfter = True And SectionBefore = True Then SignalSPADAlert ( Signal ) = False End If ' Main SPAD code If SignalLockOut ( Signal ) = False And SignalReverseLatch ( Signal ) = False Then ' Sets signal latch i . e . to say its safe to pass If Not SignalOutputState ( SignalState ) = SignalAtDanger Then SignalClearLatch ( Signal ) = True End If ' detects train passing signal If SectionAfter = False And SectionBefore = False Then ' sees if train was safe to pass signal If SignalClearLatch ( Signal ) = False And SignalSPADAlert ( Signal ) = False Then SignalSPADAlert ( Signal ) = True TelegramMessageSender . sendMessage ( ChatGroups . SPADsGroup , \"SPAD Detected \" & SignalNamesForSPADMessage ( Signal ) & \" at \" & DateTime . Now . ToString ( \"HH:mm:ss\" )) End If ' locks out code no matter if train was safe to pass or not to prevent spamming and reduce false triggers SignalLockOut ( Signal ) = True SignalClearLatch ( Signal ) = False End If ' detects if the signal gets returned to danger before train was able to pass If SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger Then SignalClearLatch ( Signal ) = False End If ' Waits until the tracksection ( sectionnames . sections are clear to remove the lockout code which was used earlier to prevent spamming ElseIf SectionAfter = True And SectionBefore = True Then SignalLockOut ( Signal ) = False SignalClearLatch ( Signal ) = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/SPADDetection.vb"},{"location":"mainsystem/Files/SPADDetection_8vb/#githubsignallingsystemehmr-signalling-systemlogicspaddetectionvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/SPADDetection.vb"},{"location":"mainsystem/Files/SPADDetection_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module SPADDetection Enum SPADSignalNames AJ1E = 0 AJ2E = 1 AJ3E = 2 AJ4E = 3 AJ7E = 4 AJ8E = 5 AJ9E = 6 AJ16E = 7 AJ17E = 8 AJ18E = 9 AJ21E = 10 AJ3W = 11 AJ7W = 12 AJ8W = 13 AJ9W = 14 AJ15W = 15 AJ16W = 16 AJ17W = 17 AJ18W = 18 AJ22W = 19 S11 = 20 S12 = 21 S14 = 22 S19 = 23 End Enum Public SignalNamesForSPADMessage () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" , \"AJ3W \" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" , \"S11\" , \"S12\" , \"S14\" , \"S19\" } Public SignalClearLatch () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public SignalLockOut () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True } Public SignalReverseLatch () As Boolean = { True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True , True } Public SignalSPADAlert () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub LogicStart () ' Signal | Signal | Section Before | Section After CheckIfSPAD ( SPADSignalNames . AJ1E , Definitions . SignalNames . AJ1E , TrackSectionUnoccupied ( TrackSectionNames . SectionH ), PointSectionUnoccupied ( PointNames . P11 )) If EastBound Then CheckIfSPAD ( SPADSignalNames . AJ2E , Definitions . SignalNames . AJ2E , TrackSectionUnoccupied ( TrackSectionNames . SectionP ), TrackSectionUnoccupied ( TrackSectionNames . SectionQ )) CheckIfSPAD ( SPADSignalNames . AJ3E , Definitions . SignalNames . AJ3E , TrackSectionUnoccupied ( TrackSectionNames . SectionDE ), TrackSectionUnoccupied ( TrackSectionNames . SectionE )) CheckIfSPAD ( SPADSignalNames . AJ4E , Definitions . SignalNames . AJ4E , TrackSectionUnoccupied ( TrackSectionNames . SectionE ), PointSectionUnoccupied ( PointNames . P13 )) End If CheckIfSPAD ( SPADSignalNames . AJ7E , Definitions . SignalNames . AJ7E , TrackSectionUnoccupied ( TrackSectionNames . SectionG ), TrackSectionUnoccupied ( TrackSectionNames . SectionH )) CheckIfSPAD ( SPADSignalNames . AJ8E , Definitions . SignalNames . AJ8E , TrackSectionUnoccupied ( TrackSectionNames . SectionCD ), TrackSectionUnoccupied ( TrackSectionNames . SectionD )) CheckIfSPAD ( SPADSignalNames . AJ9E , Definitions . SignalNames . AJ9E , TrackSectionUnoccupied ( TrackSectionNames . SectionN ), PointSectionUnoccupied ( PointNames . P14 )) CheckIfSPAD ( SPADSignalNames . AJ16E , Definitions . SignalNames . AJ16E , TrackSectionUnoccupied ( TrackSectionNames . SectionB ), TrackSectionUnoccupied ( TrackSectionNames . SectionC )) CheckIfSPAD ( SPADSignalNames . AJ17E , Definitions . SignalNames . AJ17E , TrackSectionUnoccupied ( TrackSectionNames . SectionO ), TrackSectionUnoccupied ( TrackSectionNames . SectionOP )) CheckIfSPAD ( SPADSignalNames . AJ18E , Definitions . SignalNames . AJ18E , TrackSectionUnoccupied ( TrackSectionNames . SectionM ), TrackSectionUnoccupied ( TrackSectionNames . SectionN )) CheckIfSPAD ( SPADSignalNames . AJ21E , Definitions . SignalNames . AJ21E , TrackSectionUnoccupied ( TrackSectionNames . SectionI ), TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 )) CheckIfSPAD ( SPADSignalNames . AJ3W , Definitions . SignalNames . AJ3W , TrackSectionUnoccupied ( TrackSectionNames . SectionDE ), TrackSectionUnoccupied ( TrackSectionNames . SectionD )) CheckIfSPAD ( SPADSignalNames . AJ7W , Definitions . SignalNames . AJ7W , TrackSectionUnoccupied ( TrackSectionNames . SectionH ), TrackSectionUnoccupied ( TrackSectionNames . SectionG )) CheckIfSPAD ( SPADSignalNames . AJ8W , Definitions . SignalNames . AJ8W , TrackSectionUnoccupied ( TrackSectionNames . SectionD ), TrackSectionUnoccupied ( TrackSectionNames . SectionCD )) CheckIfSPAD ( SPADSignalNames . AJ9W , Definitions . SignalNames . AJ9W , TrackSectionUnoccupied ( TrackSectionNames . SectionO ), TrackSectionUnoccupied ( TrackSectionNames . SectionNO )) If WestBound Or ( Points . PointReturns ( PointNames . P12 ) = PointInReverse ) Then CheckIfSPAD ( SPADSignalNames . AJ15W , Definitions . SignalNames . AJ15W , TrackSectionUnoccupied ( TrackSectionNames . SectionG ), PointSectionUnoccupied ( PointNames . P12 )) End If CheckIfSPAD ( SPADSignalNames . AJ16W , Definitions . SignalNames . AJ16W , TrackSectionUnoccupied ( TrackSectionNames . SectionC ), TrackSectionUnoccupied ( TrackSectionNames . SectionB )) CheckIfSPAD ( SPADSignalNames . AJ17W , Definitions . SignalNames . AJ17W , TrackSectionUnoccupied ( TrackSectionNames . SectionP ), TrackSectionUnoccupied ( TrackSectionNames . SectionOP )) CheckIfSPAD ( SPADSignalNames . AJ18W , Definitions . SignalNames . AJ18W , TrackSectionUnoccupied ( TrackSectionNames . SectionN ), TrackSectionUnoccupied ( TrackSectionNames . SectionM )) CheckIfSPAD ( SPADSignalNames . AJ22W , Definitions . SignalNames . AJ22W , TrackSectionUnoccupied ( TrackSectionNames . SectionI ), TrackSectionUnoccupied ( TrackSectionNames . SectionF13 )) CheckIfSPAD ( SPADSignalNames . S11 , Definitions . SignalNames . S11 , TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ), PointSectionUnoccupied ( PointNames . P11 )) CheckIfSPAD ( SPADSignalNames . S12 , Definitions . SignalNames . S12 , TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ), PointSectionUnoccupied ( PointNames . P12 )) CheckIfSPAD ( SPADSignalNames . S14 , Definitions . SignalNames . S14 , TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ), PointSectionUnoccupied ( PointNames . P14 )) CheckIfSPAD ( SPADSignalNames . S19 , Definitions . SignalNames . S19 , TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ), PointSectionUnoccupied ( PointNames . P19 )) End Sub Private Sub CheckIfSPAD ( Signal As Integer , SignalState As Integer , SectionBefore As Boolean , SectionAfter As Boolean ) ' Stops SPAD detection if train reverse into tracksection ( sectionnames . section If SectionAfter = False And SectionBefore = True Then SignalReverseLatch ( Signal ) = True End If If SignalReverseLatch ( Signal ) = True And SectionAfter = True And SectionBefore = True Then SignalReverseLatch ( Signal ) = False SignalSPADAlert ( Signal ) = False End If ' Reset following SPAD If SectionAfter = True And SectionBefore = True Then SignalSPADAlert ( Signal ) = False End If ' Main SPAD code If SignalLockOut ( Signal ) = False And SignalReverseLatch ( Signal ) = False Then ' Sets signal latch i . e . to say its safe to pass If Not SignalOutputState ( SignalState ) = SignalAtDanger Then SignalClearLatch ( Signal ) = True End If ' detects train passing signal If SectionAfter = False And SectionBefore = False Then ' sees if train was safe to pass signal If SignalClearLatch ( Signal ) = False And SignalSPADAlert ( Signal ) = False Then SignalSPADAlert ( Signal ) = True TelegramMessageSender . sendMessage ( ChatGroups . SPADsGroup , \"SPAD Detected \" & SignalNamesForSPADMessage ( Signal ) & \" at \" & DateTime . Now . ToString ( \"HH:mm:ss\" )) End If ' locks out code no matter if train was safe to pass or not to prevent spamming and reduce false triggers SignalLockOut ( Signal ) = True SignalClearLatch ( Signal ) = False End If ' detects if the signal gets returned to danger before train was able to pass If SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger Then SignalClearLatch ( Signal ) = False End If ' Waits until the tracksection ( sectionnames . sections are clear to remove the lockout code which was used earlier to prevent spamming ElseIf SectionAfter = True And SectionBefore = True Then SignalLockOut ( Signal ) = False SignalClearLatch ( Signal ) = False End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Safety_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/Safety.vb \u00b6 Source code \u00b6 Public Class Safety Public Shared SafetyRunningMode As String = \"Safe Mode\" Public Shared SafetySerialConnected As Boolean = False Public Shared SafetySerialTimeout As Boolean = True ' E - Stop Public Shared EStopTriggered As Boolean = False Public Shared EStopReset As Boolean = True Public Shared EStopSoftware As Boolean = False Public Shared EStopnotification As Boolean = False Shared AirPulse As Boolean Public Shared Sub Logic () ' air safety relay If EStopSoftware = False And PointSupplyPower = True And Points . AirInUse = True Then AirRelayOn = True If AirPulse = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 0 End If AirPulse = Not AirPulse SafetyRunningMode = \"Normal\" Else AirRelayOn = False Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 0 SafetyRunningMode = \"Safe Mode\" End If ' E - Stop Logic If EStopSoftware = False Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopTrigger ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopTrigger ) = 0 End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressEStopMonitor ) = 1 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 0 EStopSoftware = False EStopTriggered = False EStopReset = False Else EStopTriggered = True If EStopReset = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 1 EStopSoftware = False Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 0 End If End If ' Notification If Safety . EStopTriggered = True And Safety . EStopReset = False And SignalsOn = True Then Errors . NewError ( \"E-STOP ACTIVATED! - Cause = unknown\" ) If EStopnotification = False Then EStopnotification = True End If Else Errors . RemoveError ( \"E-STOP ACTIVATED! - Cause = unknown\" ) EStopnotification = False End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Safety.vb"},{"location":"mainsystem/Files/Safety_8vb/#githubsignallingsystemehmr-signalling-systemlogicsafetyvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/Safety.vb"},{"location":"mainsystem/Files/Safety_8vb/#source-code","text":"Public Class Safety Public Shared SafetyRunningMode As String = \"Safe Mode\" Public Shared SafetySerialConnected As Boolean = False Public Shared SafetySerialTimeout As Boolean = True ' E - Stop Public Shared EStopTriggered As Boolean = False Public Shared EStopReset As Boolean = True Public Shared EStopSoftware As Boolean = False Public Shared EStopnotification As Boolean = False Shared AirPulse As Boolean Public Shared Sub Logic () ' air safety relay If EStopSoftware = False And PointSupplyPower = True And Points . AirInUse = True Then AirRelayOn = True If AirPulse = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 0 End If AirPulse = Not AirPulse SafetyRunningMode = \"Normal\" Else AirRelayOn = False Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressAirRelay ) = 0 SafetyRunningMode = \"Safe Mode\" End If ' E - Stop Logic If EStopSoftware = False Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopTrigger ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopTrigger ) = 0 End If If DataReadInputsArray ( DigitalDeviceAddress . InputAddressEStopMonitor ) = 1 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 0 EStopSoftware = False EStopTriggered = False EStopReset = False Else EStopTriggered = True If EStopReset = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 1 EStopSoftware = False Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEStopReset ) = 0 End If End If ' Notification If Safety . EStopTriggered = True And Safety . EStopReset = False And SignalsOn = True Then Errors . NewError ( \"E-STOP ACTIVATED! - Cause = unknown\" ) If EStopnotification = False Then EStopnotification = True End If Else Errors . RemoveError ( \"E-STOP ACTIVATED! - Cause = unknown\" ) EStopnotification = False End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/SendMail_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Misc/SendMail.vb \u00b6 Source code \u00b6 Imports System . Net . Mail # Disable Warning CA1707 ' Identifiers should not contain underscores Public Class GGSMTP_GMAIL # Enable Warning CA1707 ' Identifiers should not contain underscores Dim Temp_GmailAccount As String Dim Temp_GmailPassword As String Dim Temp_SMTPSERVER As String Dim Temp_ServerPort As Int32 Dim Temp_ErrorText As String = \"\" Dim Temp_EnableSSl As Boolean = True Public ReadOnly Property ErrorText () As String Get Return Temp_ErrorText End Get End Property Public Property EnableSSL () As Boolean Get Return Temp_EnableSSl End Get Set ( ByVal value As Boolean ) Temp_EnableSSl = value End Set End Property Public Property GmailAccount () As String Get Return Temp_GmailAccount End Get Set ( ByVal value As String ) Temp_GmailAccount = value End Set End Property Public Property GmailPassword () As String Get Return Temp_GmailPassword End Get Set ( ByVal value As String ) Temp_GmailPassword = value End Set End Property Public Property SMTPSERVER () As String Get Return Temp_SMTPSERVER End Get Set ( ByVal value As String ) Temp_SMTPSERVER = value End Set End Property Public Property ServerPort () As Int32 Get Return Temp_ServerPort End Get Set ( ByVal value As Int32 ) Temp_ServerPort = value End Set End Property Public Sub New ( ByVal GmailAccount As String , ByVal GmailPassword As String , Optional ByVal SMTPSERVER As String = \"smtp.gmail.com\" , Optional ByVal ServerPort As Int32 = 587 , Optional ByVal EnableSSl As Boolean = True ) Temp_GmailAccount = GmailAccount Temp_GmailPassword = GmailPassword Temp_SMTPSERVER = SMTPSERVER Temp_ServerPort = ServerPort Temp_EnableSSl = EnableSSl End Sub Public Function SendMail ( ByVal ToAddressies As String (), ByVal Subject As String , ByVal BodyText As String , Optional ByVal AttachedFiles As String () = Nothing ) As Boolean Temp_ErrorText = \"\" Dim Mail As New MailMessage Dim SMTP As New SmtpClient ( \"smtp.ionos.co.uk\" ) ' ( Temp_SMTPSERVER ) Mail . Subject = Subject Mail . From = New MailAddress ( \"SignallingSystem@ehmr.org.uk\" ) ' ( Temp_GmailAccount ) SMTP . Credentials = New System . Net . NetworkCredential ( \"signallingsystem@ehmr.org.uk\" , \"Hertford.81\" ) ' ( Temp_GmailAccount , Temp_GmailPassword ) ' <-- Password Here Mail . To . Clear () For i As Int16 = 0 To ToAddressies . Length - 1 Mail . To . Add ( ToAddressies ( i )) Next i Mail . Body = BodyText Mail . Attachments . Clear () If AttachedFiles IsNot Nothing Then For i As Int16 = 0 To AttachedFiles . Length - 1 Mail . Attachments . Add ( New Attachment ( AttachedFiles ( i ))) Next End If SMTP . EnableSsl = Temp_EnableSSl SMTP . Port = 587 ' Temp_ServerPort Try SMTP . Send ( Mail ) Return True Catch ex As Exception Me . Temp_ErrorText = ex . Message . ToString TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) Return False End Try End Function Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc/SendMail.vb"},{"location":"mainsystem/Files/SendMail_8vb/#githubsignallingsystemehmr-signalling-systemmiscsendmailvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc/SendMail.vb"},{"location":"mainsystem/Files/SendMail_8vb/#source-code","text":"Imports System . Net . Mail # Disable Warning CA1707 ' Identifiers should not contain underscores Public Class GGSMTP_GMAIL # Enable Warning CA1707 ' Identifiers should not contain underscores Dim Temp_GmailAccount As String Dim Temp_GmailPassword As String Dim Temp_SMTPSERVER As String Dim Temp_ServerPort As Int32 Dim Temp_ErrorText As String = \"\" Dim Temp_EnableSSl As Boolean = True Public ReadOnly Property ErrorText () As String Get Return Temp_ErrorText End Get End Property Public Property EnableSSL () As Boolean Get Return Temp_EnableSSl End Get Set ( ByVal value As Boolean ) Temp_EnableSSl = value End Set End Property Public Property GmailAccount () As String Get Return Temp_GmailAccount End Get Set ( ByVal value As String ) Temp_GmailAccount = value End Set End Property Public Property GmailPassword () As String Get Return Temp_GmailPassword End Get Set ( ByVal value As String ) Temp_GmailPassword = value End Set End Property Public Property SMTPSERVER () As String Get Return Temp_SMTPSERVER End Get Set ( ByVal value As String ) Temp_SMTPSERVER = value End Set End Property Public Property ServerPort () As Int32 Get Return Temp_ServerPort End Get Set ( ByVal value As Int32 ) Temp_ServerPort = value End Set End Property Public Sub New ( ByVal GmailAccount As String , ByVal GmailPassword As String , Optional ByVal SMTPSERVER As String = \"smtp.gmail.com\" , Optional ByVal ServerPort As Int32 = 587 , Optional ByVal EnableSSl As Boolean = True ) Temp_GmailAccount = GmailAccount Temp_GmailPassword = GmailPassword Temp_SMTPSERVER = SMTPSERVER Temp_ServerPort = ServerPort Temp_EnableSSl = EnableSSl End Sub Public Function SendMail ( ByVal ToAddressies As String (), ByVal Subject As String , ByVal BodyText As String , Optional ByVal AttachedFiles As String () = Nothing ) As Boolean Temp_ErrorText = \"\" Dim Mail As New MailMessage Dim SMTP As New SmtpClient ( \"smtp.ionos.co.uk\" ) ' ( Temp_SMTPSERVER ) Mail . Subject = Subject Mail . From = New MailAddress ( \"SignallingSystem@ehmr.org.uk\" ) ' ( Temp_GmailAccount ) SMTP . Credentials = New System . Net . NetworkCredential ( \"signallingsystem@ehmr.org.uk\" , \"Hertford.81\" ) ' ( Temp_GmailAccount , Temp_GmailPassword ) ' <-- Password Here Mail . To . Clear () For i As Int16 = 0 To ToAddressies . Length - 1 Mail . To . Add ( ToAddressies ( i )) Next i Mail . Body = BodyText Mail . Attachments . Clear () If AttachedFiles IsNot Nothing Then For i As Int16 = 0 To AttachedFiles . Length - 1 Mail . Attachments . Add ( New Attachment ( AttachedFiles ( i ))) Next End If SMTP . EnableSsl = Temp_EnableSSl SMTP . Port = 587 ' Temp_ServerPort Try SMTP . Send ( Mail ) Return True Catch ex As Exception Me . Temp_ErrorText = ex . Message . ToString TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) Return False End Try End Function Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/SerialPixelLeds_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Serial/SerialPixelLeds.vb \u00b6 Source code \u00b6 Imports System . Threading Module SerialPixelLeds Public SerialConnected As Boolean = False Public SerialTime As Long Public SerialCount As Integer = 0 Public SerialStatusText As String = \"Disconnected\" Public SerialPortNumber As String = \"COM200\" Public SerialSpeed As Integer = 9600 Sub MyBackgroundThread () Do Dim SerialTimerCount As Stopwatch = Stopwatch . StartNew If PixelSerialPort . IsOpen = True Then Write () SerialStatusText = SerialPortNumber & \" = Connected\" Errors . RemoveError ( \"Failed to start serial \" & SerialPortNumber & \" : \" & SerialSpeed & \" - \" & PixelSerialPort . ToString ()) Else SerialStatusText = SerialPortNumber & \" = Disconnected\" SerialPixelLeds . SerialOpen () End If SerialCount = SerialCount + 1 SerialTime = ( SerialTimerCount . ElapsedMilliseconds ) ' Report error If ReadTimeout = True Then Errors . NewError ( \"Serial for Arduino has timed out.\" ) Else Errors . RemoveError ( \"Serial for Arduino has timed out.\" ) End If Loop End Sub Dim ThreadSerial As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThread () ThreadSerial . Start () End Sub Public Sub SerialClose () PixelSerialPort . Close () SerialConnected = False SerialStatusText = SerialPortNumber & \" = Disconnected\" ThreadSerial . Suspend () End Sub ' ----> CONFIG START <---- ' Public ReadOnly AmountDataIn As Integer = 1 ' How many bytes are to be received . Public ReadOnly PixelQuanitiy As Integer = 48 Public TimeOutValue As Integer = 8000 ' ----> CONFIG END <---- ' Dim WithEvents PixelSerialPort As New IO . Ports . SerialPort ' Set up the serial port . Public pixelRed () As Integer = { 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 } Public pixelGreen () As Integer = { 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 } Public pixelBlue () As Integer = { 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 } Public pixelWhite () As Integer = { 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 } Public data As Integer Public ReadTimeout As Boolean = False Public WriteTimeout As Boolean = False Public SerialStatus As String = \"\" Public Sub SerialOpen () ' Try to open serial If PixelSerialPort . IsOpen = True Then PixelSerialPort . Close () End If Thread . Sleep ( 100 ) Try ' Try statement to open the serial port with the following parts . PixelSerialPort . BaudRate = SerialSpeed ' BaudRate . PixelSerialPort . PortName = SerialPortNumber ' ComPort . PixelSerialPort . Open () ' Open port . ReadTimeout = False Catch ' If it fails . PixelSerialPort . Close () ' Close port if failed . Errors . NewError ( \"Failed to start serial \" & SerialPortNumber & \" : \" & SerialSpeed ) ' MsgBox ( \"Error, Could not open serial port please check device is on port \" & SerialPortNumber & \" : \" & SerialSpeed ) ' Display message stating that opening the port has failed . End Try ' End of try statement to open the serial port . End Sub Public Sub ReadInData () ' Reading the data . Try ' PixelSerialPort . ReadTimeout = TimeOutValue ' If PixelSerialPort . IsOpen Then ' Read the data only if the serial port is established and open . SerialStatus = \"Read\" Dim DataRead As Byte = PixelSerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . ReadTimeout = False End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) ReadTimeout = True SerialStatus = \"None\" End Try End Sub ' End sub . Public Sub Write () ' Writing the data . Try If PixelSerialPort . IsOpen Then ' Write the data only if the serial port is established and open . SerialStatus = \"Write\" Dim DataIndex As Integer = 0 ' follows what point of transmission it is at . Do While DataIndex <= PixelQuanitiy - 1 ' checks which point of transmission it is at . Try ' try to send or give error . PixelSerialPort . WriteLine ( DataIndex + 1 ) PixelSerialPort . WriteLine ( pixelRed ( DataIndex )) PixelSerialPort . WriteLine ( pixelGreen ( DataIndex )) PixelSerialPort . WriteLine ( pixelBlue ( DataIndex )) PixelSerialPort . WriteLine ( pixelWhite ( DataIndex )) ' Thread . Sleep ( 10 ) Catch ex As TimeoutException ' if error TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try ' end trying to send the data . DataIndex += 1 ' increase the data index . Loop ' loop to keep alive the data transmission . PixelSerialPort . DiscardOutBuffer () ' ReadInData () ' once all data has been sent trigger the software to read the data from the inputs . End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try End Sub ' end sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Serial/SerialPixelLeds.vb"},{"location":"mainsystem/Files/SerialPixelLeds_8vb/#githubsignallingsystemehmr-signalling-systemserialserialpixelledsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Serial/SerialPixelLeds.vb"},{"location":"mainsystem/Files/SerialPixelLeds_8vb/#source-code","text":"Imports System . Threading Module SerialPixelLeds Public SerialConnected As Boolean = False Public SerialTime As Long Public SerialCount As Integer = 0 Public SerialStatusText As String = \"Disconnected\" Public SerialPortNumber As String = \"COM200\" Public SerialSpeed As Integer = 9600 Sub MyBackgroundThread () Do Dim SerialTimerCount As Stopwatch = Stopwatch . StartNew If PixelSerialPort . IsOpen = True Then Write () SerialStatusText = SerialPortNumber & \" = Connected\" Errors . RemoveError ( \"Failed to start serial \" & SerialPortNumber & \" : \" & SerialSpeed & \" - \" & PixelSerialPort . ToString ()) Else SerialStatusText = SerialPortNumber & \" = Disconnected\" SerialPixelLeds . SerialOpen () End If SerialCount = SerialCount + 1 SerialTime = ( SerialTimerCount . ElapsedMilliseconds ) ' Report error If ReadTimeout = True Then Errors . NewError ( \"Serial for Arduino has timed out.\" ) Else Errors . RemoveError ( \"Serial for Arduino has timed out.\" ) End If Loop End Sub Dim ThreadSerial As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThread () ThreadSerial . Start () End Sub Public Sub SerialClose () PixelSerialPort . Close () SerialConnected = False SerialStatusText = SerialPortNumber & \" = Disconnected\" ThreadSerial . Suspend () End Sub ' ----> CONFIG START <---- ' Public ReadOnly AmountDataIn As Integer = 1 ' How many bytes are to be received . Public ReadOnly PixelQuanitiy As Integer = 48 Public TimeOutValue As Integer = 8000 ' ----> CONFIG END <---- ' Dim WithEvents PixelSerialPort As New IO . Ports . SerialPort ' Set up the serial port . Public pixelRed () As Integer = { 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 } Public pixelGreen () As Integer = { 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 } Public pixelBlue () As Integer = { 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 } Public pixelWhite () As Integer = { 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 } Public data As Integer Public ReadTimeout As Boolean = False Public WriteTimeout As Boolean = False Public SerialStatus As String = \"\" Public Sub SerialOpen () ' Try to open serial If PixelSerialPort . IsOpen = True Then PixelSerialPort . Close () End If Thread . Sleep ( 100 ) Try ' Try statement to open the serial port with the following parts . PixelSerialPort . BaudRate = SerialSpeed ' BaudRate . PixelSerialPort . PortName = SerialPortNumber ' ComPort . PixelSerialPort . Open () ' Open port . ReadTimeout = False Catch ' If it fails . PixelSerialPort . Close () ' Close port if failed . Errors . NewError ( \"Failed to start serial \" & SerialPortNumber & \" : \" & SerialSpeed ) ' MsgBox ( \"Error, Could not open serial port please check device is on port \" & SerialPortNumber & \" : \" & SerialSpeed ) ' Display message stating that opening the port has failed . End Try ' End of try statement to open the serial port . End Sub Public Sub ReadInData () ' Reading the data . Try ' PixelSerialPort . ReadTimeout = TimeOutValue ' If PixelSerialPort . IsOpen Then ' Read the data only if the serial port is established and open . SerialStatus = \"Read\" Dim DataRead As Byte = PixelSerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . ReadTimeout = False End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) ReadTimeout = True SerialStatus = \"None\" End Try End Sub ' End sub . Public Sub Write () ' Writing the data . Try If PixelSerialPort . IsOpen Then ' Write the data only if the serial port is established and open . SerialStatus = \"Write\" Dim DataIndex As Integer = 0 ' follows what point of transmission it is at . Do While DataIndex <= PixelQuanitiy - 1 ' checks which point of transmission it is at . Try ' try to send or give error . PixelSerialPort . WriteLine ( DataIndex + 1 ) PixelSerialPort . WriteLine ( pixelRed ( DataIndex )) PixelSerialPort . WriteLine ( pixelGreen ( DataIndex )) PixelSerialPort . WriteLine ( pixelBlue ( DataIndex )) PixelSerialPort . WriteLine ( pixelWhite ( DataIndex )) ' Thread . Sleep ( 10 ) Catch ex As TimeoutException ' if error TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try ' end trying to send the data . DataIndex += 1 ' increase the data index . Loop ' loop to keep alive the data transmission . PixelSerialPort . DiscardOutBuffer () ' ReadInData () ' once all data has been sent trigger the software to read the data from the inputs . End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try End Sub ' end sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Serial_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Serial/Serial.vb \u00b6 Source code \u00b6 Imports System . Threading Public Module Serial Public SerialConnected As Boolean = False Public SerialTime As Long Public SerialCount As Integer = 0 Public SerialStatusText As String = \"Disconnected\" Sub MyBackgroundThread () Do Dim SerialTimerCount As Stopwatch = Stopwatch . StartNew If SerialPort . IsOpen = True Then Write () SerialStatusText = GlobalConfig . config . serial . port & \" = Connected\" Errors . RemoveError ( \"Failed to start serial \" & GlobalConfig . config . serial . port & \" : \" & GlobalConfig . config . serial . baudrate & \" - \" & SerialPort . ToString ()) Else SerialStatusText = GlobalConfig . config . serial . port & \" = Disconnected\" Serial . SerialOpen () safety . EStopReset = true End If SerialCount = SerialCount + 1 SerialTime = ( SerialTimerCount . ElapsedMilliseconds ) ' Report error If ReadTimeout = True Then Errors . NewError ( \"Serial for Arduino has timed out.\" ) safety . EStopReset = true Else Errors . RemoveError ( \"Serial for Arduino has timed out.\" ) End If Loop End Sub Dim ThreadSerial As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThread () ThreadSerial . Start () End Sub Public Sub SerialClose () SerialPort . Close () SerialConnected = False SerialStatusText = GlobalConfig . config . serial . port & \" = Disconnected\" ThreadSerial . Suspend () End Sub ' ----> CONFIG START <---- ' Public ReadOnly AmountDataIn As Integer = 192 ' How many bytes are to be received . Public ReadOnly AmountDataOut As Integer = 384 ' How many bytes are to be sent . Public AmountDatainAnalog As Integer = 128 ' How many bytes are to be received . Public TimeOutValue As Integer = 10000 ' ----> CONFIG END <---- ' Dim WithEvents SerialPort As New IO . Ports . SerialPort ' Set up the serial port . Public DataReadInputsArray ( AmountDataIn ) As Integer ' Array of bytes what have been read . Public DataWriteOutputsOutArray ( AmountDataOut ) As Integer ' Array of bytes what are to be sent . Public DataReadInputAnalogArray ( AmountDatainAnalog ) As Byte ' Array of bytes what are to be read . Public data As Integer Public ReadTimeout As Boolean = False Public WriteTimeout As Boolean = False Public SerialStatus As String = \"\" Public Sub SerialOpen () ' Try to open serial If SerialPort . IsOpen = True Then SerialPort . Close () End If Thread . Sleep ( 100 ) Try ' Try statement to open the serial port with the following parts . SerialPort . BaudRate = GlobalConfig . config . serial . baudrate ' BaudRate . SerialPort . PortName = GlobalConfig . config . serial . port ' ComPort . SerialPort . Open () ' Open port . Serial . ReadTimeout = False safety . EStopReset = true Catch ' If it fails . SerialPort . Close () ' Close port if failed . Errors . NewError ( \"Failed to start serial \" & GlobalConfig . config . serial . port & \" : \" & GlobalConfig . config . serial . baudrate ) '' msgBox ( \"Error, Could not open serial port please check device is on port \" & ComPort & \" : \" & BaudRate ) ' Display message stating that opening the port has failed . End Try ' End of try statement to open the serial port . End Sub Public Sub ReadInData () ' Reading the data . Try ' SerialPort . ReadTimeout = TimeOutValue ' If SerialPort . IsOpen Then ' Read the data only if the serial port is established and open . Safety . SafetySerialConnected = True SerialStatus = \"Read\" Dim DataReadIn As Integer = 1 ' Keeps track of which byte it is reading . Do While DataReadIn <= AmountDataIn ' Loop to read all the data . If DataReadIn > AmountDataIn Then ' Check if the correct amount of data has been read and end the loop if it has . Exit Do ' Command to end loop . End If Dim DataRead As Byte = SerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . DataReadInputsArray ( DataReadIn ) = DataRead ' Store the data in the array using the \"DataReadIn\" Value . DataReadIn = DataReadIn + 1 ' Add a Step to the \"DataReadIn\" Value . Loop ' Loop . ' Dim DataReadInAnalog As Integer = 1 ' Keeps track of which byte it is reading . Do While DataReadInAnalog <= AmountDatainAnalog ' Loop to read all the data . If DataReadInAnalog > AmountDatainAnalog Then ' Check if the correct amount of data has been read and end the loop if it has . Exit Do ' Command to end loop . End If Dim DataReadAnalog As Byte = SerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . DataReadInputAnalogArray ( DataReadInAnalog ) = DataReadAnalog ' Store the data in the array using the \"DataReadIn\" Value . DataReadInAnalog = DataReadInAnalog + 1 ' Add a Step to the \"DataReadIn\" Value . Loop ' Loop . ' SerialPort . DiscardInBuffer () ReadTimeout = False Safety . SafetySerialTimeout = False Else Safety . SafetySerialConnected = False End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) ReadTimeout = True SerialStatus = \"None\" Safety . SafetySerialTimeout = True End Try End Sub ' End sub . Public Sub Write () ' Writing the data . Try If SerialPort . IsOpen Then ' Write the data only if the serial port is established and open . SerialStatus = \"Write\" Dim DataIndex As Integer = 1 ' follows what point of transmission it is at . Do While DataIndex <= AmountDataOut ' checks which point of transmission it is at . data = DataWriteOutputsOutArray ( DataIndex ) ' access the data from the array . Try ' try to send or give error . ' If Not data = 1 Or data = 0 Then data = 1 If data = 1 Then SerialPort . Write ( 1 ) Else SerialPort . Write ( 0 ) ' send the data . End If Catch ex As TimeoutException ' if error TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try ' end trying to send the data . DataIndex = DataIndex + 1 ' increase the data index . Loop ' loop to keep alive the data transmission . SerialPort . DiscardOutBuffer () Serial . ReadInData () ' once all data has been sent trigger the software to read the data from the inputs . End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try End Sub ' end sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Serial/Serial.vb"},{"location":"mainsystem/Files/Serial_8vb/#githubsignallingsystemehmr-signalling-systemserialserialvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Serial/Serial.vb"},{"location":"mainsystem/Files/Serial_8vb/#source-code","text":"Imports System . Threading Public Module Serial Public SerialConnected As Boolean = False Public SerialTime As Long Public SerialCount As Integer = 0 Public SerialStatusText As String = \"Disconnected\" Sub MyBackgroundThread () Do Dim SerialTimerCount As Stopwatch = Stopwatch . StartNew If SerialPort . IsOpen = True Then Write () SerialStatusText = GlobalConfig . config . serial . port & \" = Connected\" Errors . RemoveError ( \"Failed to start serial \" & GlobalConfig . config . serial . port & \" : \" & GlobalConfig . config . serial . baudrate & \" - \" & SerialPort . ToString ()) Else SerialStatusText = GlobalConfig . config . serial . port & \" = Disconnected\" Serial . SerialOpen () safety . EStopReset = true End If SerialCount = SerialCount + 1 SerialTime = ( SerialTimerCount . ElapsedMilliseconds ) ' Report error If ReadTimeout = True Then Errors . NewError ( \"Serial for Arduino has timed out.\" ) safety . EStopReset = true Else Errors . RemoveError ( \"Serial for Arduino has timed out.\" ) End If Loop End Sub Dim ThreadSerial As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartThread () ThreadSerial . Start () End Sub Public Sub SerialClose () SerialPort . Close () SerialConnected = False SerialStatusText = GlobalConfig . config . serial . port & \" = Disconnected\" ThreadSerial . Suspend () End Sub ' ----> CONFIG START <---- ' Public ReadOnly AmountDataIn As Integer = 192 ' How many bytes are to be received . Public ReadOnly AmountDataOut As Integer = 384 ' How many bytes are to be sent . Public AmountDatainAnalog As Integer = 128 ' How many bytes are to be received . Public TimeOutValue As Integer = 10000 ' ----> CONFIG END <---- ' Dim WithEvents SerialPort As New IO . Ports . SerialPort ' Set up the serial port . Public DataReadInputsArray ( AmountDataIn ) As Integer ' Array of bytes what have been read . Public DataWriteOutputsOutArray ( AmountDataOut ) As Integer ' Array of bytes what are to be sent . Public DataReadInputAnalogArray ( AmountDatainAnalog ) As Byte ' Array of bytes what are to be read . Public data As Integer Public ReadTimeout As Boolean = False Public WriteTimeout As Boolean = False Public SerialStatus As String = \"\" Public Sub SerialOpen () ' Try to open serial If SerialPort . IsOpen = True Then SerialPort . Close () End If Thread . Sleep ( 100 ) Try ' Try statement to open the serial port with the following parts . SerialPort . BaudRate = GlobalConfig . config . serial . baudrate ' BaudRate . SerialPort . PortName = GlobalConfig . config . serial . port ' ComPort . SerialPort . Open () ' Open port . Serial . ReadTimeout = False safety . EStopReset = true Catch ' If it fails . SerialPort . Close () ' Close port if failed . Errors . NewError ( \"Failed to start serial \" & GlobalConfig . config . serial . port & \" : \" & GlobalConfig . config . serial . baudrate ) '' msgBox ( \"Error, Could not open serial port please check device is on port \" & ComPort & \" : \" & BaudRate ) ' Display message stating that opening the port has failed . End Try ' End of try statement to open the serial port . End Sub Public Sub ReadInData () ' Reading the data . Try ' SerialPort . ReadTimeout = TimeOutValue ' If SerialPort . IsOpen Then ' Read the data only if the serial port is established and open . Safety . SafetySerialConnected = True SerialStatus = \"Read\" Dim DataReadIn As Integer = 1 ' Keeps track of which byte it is reading . Do While DataReadIn <= AmountDataIn ' Loop to read all the data . If DataReadIn > AmountDataIn Then ' Check if the correct amount of data has been read and end the loop if it has . Exit Do ' Command to end loop . End If Dim DataRead As Byte = SerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . DataReadInputsArray ( DataReadIn ) = DataRead ' Store the data in the array using the \"DataReadIn\" Value . DataReadIn = DataReadIn + 1 ' Add a Step to the \"DataReadIn\" Value . Loop ' Loop . ' Dim DataReadInAnalog As Integer = 1 ' Keeps track of which byte it is reading . Do While DataReadInAnalog <= AmountDatainAnalog ' Loop to read all the data . If DataReadInAnalog > AmountDatainAnalog Then ' Check if the correct amount of data has been read and end the loop if it has . Exit Do ' Command to end loop . End If Dim DataReadAnalog As Byte = SerialPort . ReadByte ' Read the data and store the byte as \"DataRead\" . DataReadInputAnalogArray ( DataReadInAnalog ) = DataReadAnalog ' Store the data in the array using the \"DataReadIn\" Value . DataReadInAnalog = DataReadInAnalog + 1 ' Add a Step to the \"DataReadIn\" Value . Loop ' Loop . ' SerialPort . DiscardInBuffer () ReadTimeout = False Safety . SafetySerialTimeout = False Else Safety . SafetySerialConnected = False End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) ReadTimeout = True SerialStatus = \"None\" Safety . SafetySerialTimeout = True End Try End Sub ' End sub . Public Sub Write () ' Writing the data . Try If SerialPort . IsOpen Then ' Write the data only if the serial port is established and open . SerialStatus = \"Write\" Dim DataIndex As Integer = 1 ' follows what point of transmission it is at . Do While DataIndex <= AmountDataOut ' checks which point of transmission it is at . data = DataWriteOutputsOutArray ( DataIndex ) ' access the data from the array . Try ' try to send or give error . ' If Not data = 1 Or data = 0 Then data = 1 If data = 1 Then SerialPort . Write ( 1 ) Else SerialPort . Write ( 0 ) ' send the data . End If Catch ex As TimeoutException ' if error TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try ' end trying to send the data . DataIndex = DataIndex + 1 ' increase the data index . Loop ' loop to keep alive the data transmission . SerialPort . DiscardOutBuffer () Serial . ReadInData () ' once all data has been sent trigger the software to read the data from the inputs . End If SerialStatus = \"None\" Catch ex As TimeoutException ' TelegramMessageSender . sendMessage ( ex . ToString ()) WriteTimeout = True SerialStatus = \"None\" End Try End Sub ' end sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Settings_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Settings.vb \u00b6 Source code \u00b6 ' This class allows you to handle specific events on the settings class : ' The SettingChanging event is raised before a setting ' s value is changed . ' The PropertyChanged event is raised after a setting ' s value is changed . ' The SettingsLoaded event is raised after the setting values are loaded . ' The SettingsSaving event is raised before the setting values are saved . Partial Friend NotInheritable Class MySettings End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Settings.vb"},{"location":"mainsystem/Files/Settings_8vb/#githubsignallingsystemehmr-signalling-systemsettingsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Settings.vb"},{"location":"mainsystem/Files/Settings_8vb/#source-code","text":"' This class allows you to handle specific events on the settings class : ' The SettingChanging event is raised before a setting ' s value is changed . ' The PropertyChanged event is raised after a setting ' s value is changed . ' The SettingsLoaded event is raised after the setting values are loaded . ' The SettingsSaving event is raised before the setting values are saved . Partial Friend NotInheritable Class MySettings End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/SignalBackLocks_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/SignalBackLocks.vb \u00b6 Source code \u00b6 Module SignalBackLocks ' EB Public BackLockAJ1EtoAJ16E As Integer = 5 Public BackLockAJ1EtoAJ18E As Integer = 5 Public BackLockAJ1EtoSiding As Integer = 5 Public BackLockAJ2EtoAJ16E As Integer = 5 Public BackLockAJ2EtoAJ18E As Integer = 5 Public BackLockAJ4EtoAJ7E As Integer = 5 Public BackLockAJ4EtoAJ21E As Integer = 5 Public BackLockAJ9EtoAJ17E As Integer = 5 Public BackLockAJ9EtoSiding As Integer = 5 Public BackLockAJ16EtoAJ8E As Integer = 5 Public BackLockAJ16EtoSiding As Integer = 5 Public BackLockAJ21EtoAJ16E As Integer = 5 Public BackLockAJ21EtoAJ18E As Integer = 5 ' WB Public BackLockAJ8WtoAJ16W As Integer = 5 Public BackLockAJ9WtoAJ18W As Integer = 5 Public BackLockAJ15WtoAJ3W As Integer = 5 Public BackLockAJ15WtoSiding As Integer = 5 Public BackLockAJ16WtoAJ7W As Integer = 5 Public BackLockAJ16WtoAJ22W As Integer = 5 Public BackLockAJ16WtoAJ17W As Integer = 5 Public BackLockAJ18WtoAJ7W As Integer = 5 Public BackLockAJ18WtoAJ22W As Integer = 5 Public BackLockAJ18WtoAJ17W As Integer = 5 Public BackLockAJ22WtoAJ3W As Integer = 5 ' Shunts Public BackLockS11Out As Integer = 5 Public BackLockS12Out As Integer = 5 Public BackLockS14Out As Integer = 5 Public BackLockS19Out As Integer = 5 Public Sub SignalBackLockLogic () ' EB If Not BackLockAJ1EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ1EtoAJ16E = 0 If Not BackLockAJ1EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ1EtoAJ18E = 0 If Not BackLockAJ1EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False Then BackLockAJ1EtoSiding = 0 If Not BackLockAJ2EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ2EtoAJ16E = 0 If Not BackLockAJ2EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ2EtoAJ18E = 0 If Not BackLockAJ4EtoAJ7E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then BackLockAJ4EtoAJ7E = 0 If Not BackLockAJ4EtoAJ21E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ4EtoAJ21E = 0 If Not BackLockAJ9EtoAJ17E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then BackLockAJ9EtoAJ17E = 0 If Not BackLockAJ9EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Then BackLockAJ9EtoSiding = 0 If Not BackLockAJ16EtoAJ8E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then BackLockAJ16EtoAJ8E = 0 If Not BackLockAJ16EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Then BackLockAJ16EtoSiding = 0 If Not BackLockAJ21EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ21EtoAJ16E = 0 If Not BackLockAJ21EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ21EtoAJ18E = 0 ' WB If Not BackLockAJ8WtoAJ16W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then BackLockAJ8WtoAJ16W = 0 If Not BackLockAJ9WtoAJ18W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then BackLockAJ9WtoAJ18W = 0 If Not BackLockAJ15WtoAJ3W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then BackLockAJ15WtoAJ3W = 0 If Not BackLockAJ15WtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False Then BackLockAJ15WtoSiding = 0 If Not BackLockAJ16WtoAJ7W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockAJ16WtoAJ7W = 0 If Not BackLockAJ16WtoAJ22W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ16WtoAJ22W = 0 If Not BackLockAJ16WtoAJ17W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Then BackLockAJ16WtoAJ17W = 0 If Not BackLockAJ18WtoAJ7W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockAJ18WtoAJ7W = 0 If Not BackLockAJ18WtoAJ22W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ18WtoAJ22W = 0 If Not BackLockAJ18WtoAJ17W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Then BackLockAJ18WtoAJ17W = 0 If Not BackLockAJ22WtoAJ3W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then BackLockAJ22WtoAJ3W = 0 ' Shunt If Not BackLockS11Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockS11Out = 0 If Not BackLockS12Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then BackLockS12Out = 0 If Not BackLockS14Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then BackLockS14Out = 0 If Not BackLockS19Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then BackLockS19Out = 0 End Sub Public Sub SignalBackLockLogicSecoundTick () ' EB If Not BackLockAJ1EtoAJ16E = 0 Then BackLockAJ1EtoAJ16E -= 1 If Not BackLockAJ1EtoAJ18E = 0 Then BackLockAJ1EtoAJ18E -= 1 If Not BackLockAJ1EtoSiding = 0 Then BackLockAJ1EtoSiding -= 1 If Not BackLockAJ2EtoAJ16E = 0 Then BackLockAJ2EtoAJ16E -= 1 If Not BackLockAJ2EtoAJ18E = 0 Then BackLockAJ2EtoAJ18E -= 1 If Not BackLockAJ4EtoAJ7E = 0 Then BackLockAJ4EtoAJ7E -= 1 If Not BackLockAJ4EtoAJ21E = 0 Then BackLockAJ4EtoAJ21E -= 1 If Not BackLockAJ9EtoAJ17E = 0 Then BackLockAJ9EtoAJ17E -= 1 If Not BackLockAJ9EtoSiding = 0 Then BackLockAJ9EtoSiding -= 1 If Not BackLockAJ16EtoAJ8E = 0 Then BackLockAJ16EtoAJ8E -= 1 If Not BackLockAJ16EtoSiding = 0 Then BackLockAJ16EtoSiding -= 1 If Not BackLockAJ21EtoAJ16E = 0 Then BackLockAJ21EtoAJ16E -= 1 If Not BackLockAJ21EtoAJ18E = 0 Then BackLockAJ21EtoAJ18E -= 1 ' WB If Not BackLockAJ8WtoAJ16W = 0 Then BackLockAJ8WtoAJ16W -= 1 If Not BackLockAJ9WtoAJ18W = 0 Then BackLockAJ9WtoAJ18W -= 1 If Not BackLockAJ15WtoAJ3W = 0 Then BackLockAJ15WtoAJ3W -= 1 If Not BackLockAJ15WtoSiding = 0 Then BackLockAJ15WtoSiding -= 1 If Not BackLockAJ16WtoAJ7W = 0 Then BackLockAJ16WtoAJ7W -= 1 If Not BackLockAJ16WtoAJ22W = 0 Then BackLockAJ16WtoAJ22W -= 1 If Not BackLockAJ16WtoAJ17W = 0 Then BackLockAJ16WtoAJ17W -= 1 If Not BackLockAJ18WtoAJ7W = 0 Then BackLockAJ18WtoAJ7W -= 1 If Not BackLockAJ18WtoAJ22W = 0 Then BackLockAJ18WtoAJ22W -= 1 If Not BackLockAJ18WtoAJ17W = 0 Then BackLockAJ18WtoAJ17W -= 1 If Not BackLockAJ22WtoAJ3W = 0 Then BackLockAJ22WtoAJ3W -= 1 ' Shunt If Not BackLockS11Out = 0 Then BackLockS11Out -= 1 If Not BackLockS12Out = 0 Then BackLockS12Out -= 1 If Not BackLockS14Out = 0 Then BackLockS14Out -= 1 If Not BackLockS19Out = 0 Then BackLockS19Out -= 1 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/SignalBackLocks.vb"},{"location":"mainsystem/Files/SignalBackLocks_8vb/#githubsignallingsystemehmr-signalling-systemlogicsignalbacklocksvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/SignalBackLocks.vb"},{"location":"mainsystem/Files/SignalBackLocks_8vb/#source-code","text":"Module SignalBackLocks ' EB Public BackLockAJ1EtoAJ16E As Integer = 5 Public BackLockAJ1EtoAJ18E As Integer = 5 Public BackLockAJ1EtoSiding As Integer = 5 Public BackLockAJ2EtoAJ16E As Integer = 5 Public BackLockAJ2EtoAJ18E As Integer = 5 Public BackLockAJ4EtoAJ7E As Integer = 5 Public BackLockAJ4EtoAJ21E As Integer = 5 Public BackLockAJ9EtoAJ17E As Integer = 5 Public BackLockAJ9EtoSiding As Integer = 5 Public BackLockAJ16EtoAJ8E As Integer = 5 Public BackLockAJ16EtoSiding As Integer = 5 Public BackLockAJ21EtoAJ16E As Integer = 5 Public BackLockAJ21EtoAJ18E As Integer = 5 ' WB Public BackLockAJ8WtoAJ16W As Integer = 5 Public BackLockAJ9WtoAJ18W As Integer = 5 Public BackLockAJ15WtoAJ3W As Integer = 5 Public BackLockAJ15WtoSiding As Integer = 5 Public BackLockAJ16WtoAJ7W As Integer = 5 Public BackLockAJ16WtoAJ22W As Integer = 5 Public BackLockAJ16WtoAJ17W As Integer = 5 Public BackLockAJ18WtoAJ7W As Integer = 5 Public BackLockAJ18WtoAJ22W As Integer = 5 Public BackLockAJ18WtoAJ17W As Integer = 5 Public BackLockAJ22WtoAJ3W As Integer = 5 ' Shunts Public BackLockS11Out As Integer = 5 Public BackLockS12Out As Integer = 5 Public BackLockS14Out As Integer = 5 Public BackLockS19Out As Integer = 5 Public Sub SignalBackLockLogic () ' EB If Not BackLockAJ1EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ1EtoAJ16E = 0 If Not BackLockAJ1EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ1EtoAJ18E = 0 If Not BackLockAJ1EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False Then BackLockAJ1EtoSiding = 0 If Not BackLockAJ2EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ2EtoAJ16E = 0 If Not BackLockAJ2EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ2EtoAJ18E = 0 If Not BackLockAJ4EtoAJ7E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then BackLockAJ4EtoAJ7E = 0 If Not BackLockAJ4EtoAJ21E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ4EtoAJ21E = 0 If Not BackLockAJ9EtoAJ17E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False Then BackLockAJ9EtoAJ17E = 0 If Not BackLockAJ9EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = False Then BackLockAJ9EtoSiding = 0 If Not BackLockAJ16EtoAJ8E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = False Then BackLockAJ16EtoAJ8E = 0 If Not BackLockAJ16EtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = False Then BackLockAJ16EtoSiding = 0 If Not BackLockAJ21EtoAJ16E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = False Then BackLockAJ21EtoAJ16E = 0 If Not BackLockAJ21EtoAJ18E = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = False Then BackLockAJ21EtoAJ18E = 0 ' WB If Not BackLockAJ8WtoAJ16W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then BackLockAJ8WtoAJ16W = 0 If Not BackLockAJ9WtoAJ18W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then BackLockAJ9WtoAJ18W = 0 If Not BackLockAJ15WtoAJ3W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then BackLockAJ15WtoAJ3W = 0 If Not BackLockAJ15WtoSiding = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = False Then BackLockAJ15WtoSiding = 0 If Not BackLockAJ16WtoAJ7W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockAJ16WtoAJ7W = 0 If Not BackLockAJ16WtoAJ22W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ16WtoAJ22W = 0 If Not BackLockAJ16WtoAJ17W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Then BackLockAJ16WtoAJ17W = 0 If Not BackLockAJ18WtoAJ7W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockAJ18WtoAJ7W = 0 If Not BackLockAJ18WtoAJ22W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = False Then BackLockAJ18WtoAJ22W = 0 If Not BackLockAJ18WtoAJ17W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = False Then BackLockAJ18WtoAJ17W = 0 If Not BackLockAJ22WtoAJ3W = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = False Then BackLockAJ22WtoAJ3W = 0 ' Shunt If Not BackLockS11Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = False Then BackLockS11Out = 0 If Not BackLockS12Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = False Then BackLockS12Out = 0 If Not BackLockS14Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False Then BackLockS14Out = 0 If Not BackLockS19Out = 0 And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = False Then BackLockS19Out = 0 End Sub Public Sub SignalBackLockLogicSecoundTick () ' EB If Not BackLockAJ1EtoAJ16E = 0 Then BackLockAJ1EtoAJ16E -= 1 If Not BackLockAJ1EtoAJ18E = 0 Then BackLockAJ1EtoAJ18E -= 1 If Not BackLockAJ1EtoSiding = 0 Then BackLockAJ1EtoSiding -= 1 If Not BackLockAJ2EtoAJ16E = 0 Then BackLockAJ2EtoAJ16E -= 1 If Not BackLockAJ2EtoAJ18E = 0 Then BackLockAJ2EtoAJ18E -= 1 If Not BackLockAJ4EtoAJ7E = 0 Then BackLockAJ4EtoAJ7E -= 1 If Not BackLockAJ4EtoAJ21E = 0 Then BackLockAJ4EtoAJ21E -= 1 If Not BackLockAJ9EtoAJ17E = 0 Then BackLockAJ9EtoAJ17E -= 1 If Not BackLockAJ9EtoSiding = 0 Then BackLockAJ9EtoSiding -= 1 If Not BackLockAJ16EtoAJ8E = 0 Then BackLockAJ16EtoAJ8E -= 1 If Not BackLockAJ16EtoSiding = 0 Then BackLockAJ16EtoSiding -= 1 If Not BackLockAJ21EtoAJ16E = 0 Then BackLockAJ21EtoAJ16E -= 1 If Not BackLockAJ21EtoAJ18E = 0 Then BackLockAJ21EtoAJ18E -= 1 ' WB If Not BackLockAJ8WtoAJ16W = 0 Then BackLockAJ8WtoAJ16W -= 1 If Not BackLockAJ9WtoAJ18W = 0 Then BackLockAJ9WtoAJ18W -= 1 If Not BackLockAJ15WtoAJ3W = 0 Then BackLockAJ15WtoAJ3W -= 1 If Not BackLockAJ15WtoSiding = 0 Then BackLockAJ15WtoSiding -= 1 If Not BackLockAJ16WtoAJ7W = 0 Then BackLockAJ16WtoAJ7W -= 1 If Not BackLockAJ16WtoAJ22W = 0 Then BackLockAJ16WtoAJ22W -= 1 If Not BackLockAJ16WtoAJ17W = 0 Then BackLockAJ16WtoAJ17W -= 1 If Not BackLockAJ18WtoAJ7W = 0 Then BackLockAJ18WtoAJ7W -= 1 If Not BackLockAJ18WtoAJ22W = 0 Then BackLockAJ18WtoAJ22W -= 1 If Not BackLockAJ18WtoAJ17W = 0 Then BackLockAJ18WtoAJ17W -= 1 If Not BackLockAJ22WtoAJ3W = 0 Then BackLockAJ22WtoAJ3W -= 1 ' Shunt If Not BackLockS11Out = 0 Then BackLockS11Out -= 1 If Not BackLockS12Out = 0 Then BackLockS12Out -= 1 If Not BackLockS14Out = 0 Then BackLockS14Out -= 1 If Not BackLockS19Out = 0 Then BackLockS19Out -= 1 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Signals_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Signals.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Signals Public SignalCount As Integer = 25 Public ReadOnly SignalDisplayNames () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"RAJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" , \"AJ3W\" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" , \"S11\" , \"S12\" , \"S14\" , \"S19\" } Public SignalSystemState ( SignalCount ) As String Public SignalOutputState ( SignalCount ) As String Public SignalTimerAnnouncementDelay ( SignalCount ) As Integer Public SignalTimer ( SignalCount ) As Integer Public SignalTimeOut ( SignalCount ) As Integer Public SignalSafeToClearTimer ( SignalCount ) As Integer Public Sub initialise () For i As Integer = 0 To SignalCount SignalSystemState ( i ) = Definitions . SignalAtDanger SignalOutputState ( i ) = Definitions . SignalAtDanger SignalTimer ( i ) = StaticValues . TimerDisabled SignalTimeOut ( i ) = StaticValues . TimerDisabled SignalTimerAnnouncementDelay ( i ) = StaticValues . TimerDisabled SignalSafeToClearTimer ( i ) = 2 DigitalDeviceAddress . SignalOutputAddressClear ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressCaution ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressDanger ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressRoute1 ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressRoute2 ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressShunt ( i ) = - 1 Next initialiseAddresses () End Sub Public Sub Signals () ' AUX If ( SignalAspectPower = True And EastBound = True ) Or Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressAJ16WLimitOfShunt ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressAJ16WLimitOfShunt ) = 0 End If ' AJ1E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P5a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P5a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ1E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ1E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ1E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E )) End If End If ' AJ2E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P6a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ2E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ2E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ2E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E )) End If End If ' AJ3E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E )) End If End If ' RAJ3E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E )) End If End If ' AJ4E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P13 ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P13 ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ4E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ4E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ4E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E )) End If End If ' AJ7E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ7E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E )) End If End If ' AJ8E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ8E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E )) End If End If ' AJ9E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ9E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E )) End If End If ' AJ16E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ16E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E )) End If End If ' AJ17E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ17E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E )) End If End If ' AJ18E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtShunt Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ18E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E )) End If End If ' AJ21E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P6a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ21E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ21E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ21E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E )) End If End If ' AJ3W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W )) End If End If ' AJ7W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ7W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W )) End If End If ' AJ8W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ8W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W )) End If End If ' AJ9W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ9W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W )) End If End If ' AJ15W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ15W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ15W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ15W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W )) End If End If ' AJ16W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Then If ( PointReturns ( PointNames . P6b ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ) Or ( PointReturns ( PointNames . P6b ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ16W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W )) End If End If ' AJ17W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ17W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W )) End If End If ' AJ18W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5b ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ18W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W )) End If End If ' AJ22W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ22W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ22W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ22W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W )) End If End If ' S11 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S11! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S11 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S11! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 )) End If End If ' S12 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S12! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S12 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S12! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 )) End If End If ' S14 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S14! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S14 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S14! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 )) End If End If ' S19 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S19! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S19 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S19! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 )) End If End If End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To SignalCount ' Signal audio timers If SignalTimerAnnouncementDelay ( i ) < TimerDisabled And SignalTimerAnnouncementDelay ( i ) > 0 Then SignalTimerAnnouncementDelay ( i ) -= 1 ' Signal to clear timer If SignalTimer ( i ) < TimerDisabled And SignalTimer ( i ) > 0 Then SignalTimer ( i ) -= 1 ' Signal Timeouts If SignalTimeOut ( i ) < TimerDisabled And SignalTimeOut ( i ) > 0 Then SignalTimeOut ( i ) -= 1 ' Safe to clear timer If SignalSafeToClearTimer ( i ) > 0 Then SignalSafeToClearTimer ( i ) -= 1 Next End Sub Private Sub initialiseAddresses () DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E ) = 377 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E ) = 378 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E ) = 379 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E ) = 380 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E ) = 381 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E ) = 382 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E ) = 383 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E ) = 384 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E ) = 369 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E ) = 370 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E ) = 371 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E ) = 372 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E ) = 373 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E ) = 374 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E ) = 375 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E ) = 376 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E ) = 361 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E ) = 362 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E ) = 363 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E ) = 364 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E ) = 365 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E ) = 366 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E ) = 367 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E ) = 368 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E ) = 353 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E ) = 354 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E ) = 355 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E ) = 356 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E ) = 357 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E ) = 358 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E ) = 359 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E ) = 360 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E ) = 345 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E ) = 346 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E ) = 347 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E ) = 348 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E ) = 349 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E ) = 350 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E ) = 351 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E ) = 352 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W ) = 337 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W ) = 338 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W ) = 339 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W ) = 340 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W ) = 341 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W ) = 342 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W ) = 343 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W ) = 344 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W ) = 329 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W ) = 330 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W ) = 331 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W ) = 332 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W ) = 333 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W ) = 334 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W ) = 335 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W ) = 336 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W ) = 321 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W ) = 322 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W ) = 323 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W ) = 324 DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W ) = 325 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W ) = 307 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W ) = 326 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W ) = 327 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W ) = 328 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W ) = 313 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W ) = 314 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W ) = 315 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W ) = 316 DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W ) = 317 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W ) = 318 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W ) = 319 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W ) = 320 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E ) = 305 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E ) = 306 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 ) = 297 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 ) = 298 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 ) = 299 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 ) = 300 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 ) = 301 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 ) = 302 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 ) = 303 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 ) = 304 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Signals.vb"},{"location":"mainsystem/Files/Signals_8vb/#githubsignallingsystemehmr-signalling-systemdevicessignalsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Signals.vb"},{"location":"mainsystem/Files/Signals_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Module Signals Public SignalCount As Integer = 25 Public ReadOnly SignalDisplayNames () As String = { \"AJ1E\" , \"AJ2E\" , \"AJ3E\" , \"RAJ3E\" , \"AJ4E\" , \"AJ7E\" , \"AJ8E\" , \"AJ9E\" , \"AJ16E\" , \"AJ17E\" , \"AJ18E\" , \"AJ21E\" , \"AJ3W\" , \"AJ7W\" , \"AJ8W\" , \"AJ9W\" , \"AJ15W\" , \"AJ16W\" , \"AJ17W\" , \"AJ18W\" , \"AJ22W\" , \"S11\" , \"S12\" , \"S14\" , \"S19\" } Public SignalSystemState ( SignalCount ) As String Public SignalOutputState ( SignalCount ) As String Public SignalTimerAnnouncementDelay ( SignalCount ) As Integer Public SignalTimer ( SignalCount ) As Integer Public SignalTimeOut ( SignalCount ) As Integer Public SignalSafeToClearTimer ( SignalCount ) As Integer Public Sub initialise () For i As Integer = 0 To SignalCount SignalSystemState ( i ) = Definitions . SignalAtDanger SignalOutputState ( i ) = Definitions . SignalAtDanger SignalTimer ( i ) = StaticValues . TimerDisabled SignalTimeOut ( i ) = StaticValues . TimerDisabled SignalTimerAnnouncementDelay ( i ) = StaticValues . TimerDisabled SignalSafeToClearTimer ( i ) = 2 DigitalDeviceAddress . SignalOutputAddressClear ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressCaution ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressDanger ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressRoute1 ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressRoute2 ( i ) = - 1 DigitalDeviceAddress . SignalOutputAddressShunt ( i ) = - 1 Next initialiseAddresses () End Sub Public Sub Signals () ' AUX If ( SignalAspectPower = True And EastBound = True ) Or Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressAJ16WLimitOfShunt ) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressAJ16WLimitOfShunt ) = 0 End If ' AJ1E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P5a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P5a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ1E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ1E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ1E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressEBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ1E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E )) End If End If ' AJ2E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P6a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ2E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ2E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ2E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ2E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E )) End If End If ' AJ3E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E )) End If End If ' RAJ3E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 1 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 SignalOutputState ( Definitions . SignalNames . RAJ3E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E )) End If End If ' AJ4E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P13 ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P13 ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ4E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ4E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ4E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ4E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E )) End If End If ' AJ7E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ7E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E )) End If End If ' AJ8E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ8E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E )) End If End If ' AJ9E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ9E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E )) End If End If ' AJ16E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ16E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 End If Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16E ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E )) End If End If ' AJ17E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ17E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E )) End If End If ' AJ18E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtShunt Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ18E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E )) End If End If ' AJ21E If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P6a ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtShunt ) Or ( Points . PointReturns ( PointNames . P6a ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ21E! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ21E )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 If Points . PointReturns ( PointNames . P6a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ21E ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ21E! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E )) End If End If ' AJ3W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ3W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 If Points . PointReturns ( PointNames . P5a ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ3W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ3W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W )) End If End If ' AJ7W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ7W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ7W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ7W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W )) End If End If ' AJ8W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ8W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ8W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ8W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W )) End If End If ' AJ9W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ9W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ9W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ9W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W )) End If End If ' AJ15W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Clear\" End If ElseIf SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ15W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ15W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 1 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 SignalOutputState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressWBOFFIndicator ) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ15W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W )) End If End If ' AJ16W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Then If ( PointReturns ( PointNames . P6b ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ) Or ( PointReturns ( PointNames . P6b ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ16W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Shunt\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If PointReturns ( PointNames . P6b ) = PointInReverse Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 1 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 End If SignalOutputState ( Definitions . SignalNames . AJ16W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ16W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W )) End If End If ' AJ17W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ17W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ17W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ17W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W )) End If End If ' AJ18W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Then If ( Points . PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInNormal And SignalOutputState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger ) Or ( Points . PointReturns ( PointNames . P5b ) = PointInReverse And SignalOutputState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger ) Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ18W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 If Points . PointReturns ( PointNames . P5b ) = PointInNormal Then If Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 1 End If SignalOutputState ( Definitions . SignalNames . AJ18W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ18W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W )) End If End If ' AJ22W If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Then If SignalOutputState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Caution\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Clear\" End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ22W! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . AJ22W )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 1 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Caution\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Caution\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 SignalOutputState ( Definitions . SignalNames . AJ22W ) = \"Clear\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error AJ22W! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W )) End If End If ' S11 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S11 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S11! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S11 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 1 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 SignalOutputState ( Definitions . SignalNames . S11 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S11! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 )) End If End If ' S12 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S12! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S12 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 1 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 SignalOutputState ( Definitions . SignalNames . S12 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S12! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 )) End If End If ' S14 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S14 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S14! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S14 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 1 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 SignalOutputState ( Definitions . SignalNames . S14 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S14! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 )) End If End If ' S19 If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"System\" And SignalAspectPower = True Then If Points . TestMode = True Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Clear\" ElseIf SignalSystemState ( Definitions . SignalNames . S19 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S19! Couldnot find system state = \" & SignalSystemState ( Definitions . SignalNames . S19 )) End If Else If RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Danger\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 1 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Danger\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Clear\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Clear\" ElseIf RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = \"Shunt\" Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 1 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 SignalOutputState ( Definitions . SignalNames . S19 ) = \"Shunt\" Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 )) = 0 Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 )) = 0 If SignalAspectPower = True Then sendMessage ( ChatGroups . Programmers , \"Error S19! Couldnot find override state = \" & RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 )) End If End If End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To SignalCount ' Signal audio timers If SignalTimerAnnouncementDelay ( i ) < TimerDisabled And SignalTimerAnnouncementDelay ( i ) > 0 Then SignalTimerAnnouncementDelay ( i ) -= 1 ' Signal to clear timer If SignalTimer ( i ) < TimerDisabled And SignalTimer ( i ) > 0 Then SignalTimer ( i ) -= 1 ' Signal Timeouts If SignalTimeOut ( i ) < TimerDisabled And SignalTimeOut ( i ) > 0 Then SignalTimeOut ( i ) -= 1 ' Safe to clear timer If SignalSafeToClearTimer ( i ) > 0 Then SignalSafeToClearTimer ( i ) -= 1 Next End Sub Private Sub initialiseAddresses () DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ1E ) = 377 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ1E ) = 378 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ1E ) = 379 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ1E ) = 380 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ1E ) = 381 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ2E ) = 382 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ2E ) = 383 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ2E ) = 384 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ2E ) = 369 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3E ) = 370 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3E ) = 371 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3E ) = 372 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ4E ) = 373 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ4E ) = 374 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ4E ) = 375 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ4E ) = 376 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7E ) = 361 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7E ) = 362 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8E ) = 363 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8E ) = 364 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8E ) = 365 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9E ) = 366 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9E ) = 367 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9E ) = 368 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ9E ) = 353 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16E ) = 354 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16E ) = 355 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16E ) = 356 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16E ) = 357 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16E ) = 358 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17E ) = 359 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17E ) = 360 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17E ) = 345 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18E ) = 346 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18E ) = 347 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18E ) = 348 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ21E ) = 349 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ21E ) = 350 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ21E ) = 351 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ21E ) = 352 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ3W ) = 337 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ3W ) = 338 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ3W ) = 339 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ3W ) = 340 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ7W ) = 341 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ7W ) = 342 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ8W ) = 343 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ8W ) = 344 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ8W ) = 329 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ9W ) = 330 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ9W ) = 331 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ9W ) = 332 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ15W ) = 333 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ15W ) = 334 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ15W ) = 335 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ15W ) = 336 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ16W ) = 321 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ16W ) = 322 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ16W ) = 323 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ16W ) = 324 DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ16W ) = 325 DigitalDeviceAddress . SignalOutputAddressShunt ( Definitions . SignalNames . AJ16W ) = 307 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ17W ) = 326 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ17W ) = 327 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ17W ) = 328 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ18W ) = 313 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ18W ) = 314 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ18W ) = 315 DigitalDeviceAddress . SignalOutputAddressRoute1 ( Definitions . SignalNames . AJ18W ) = 316 DigitalDeviceAddress . SignalOutputAddressRoute2 ( Definitions . SignalNames . AJ18W ) = 317 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . AJ22W ) = 318 DigitalDeviceAddress . SignalOutputAddressCaution ( Definitions . SignalNames . AJ22W ) = 319 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . AJ22W ) = 320 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . RAJ3E ) = 305 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . RAJ3E ) = 306 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S11 ) = 297 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S11 ) = 298 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S12 ) = 299 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S12 ) = 300 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S14 ) = 301 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S14 ) = 302 DigitalDeviceAddress . SignalOutputAddressClear ( Definitions . SignalNames . S19 ) = 303 DigitalDeviceAddress . SignalOutputAddressDanger ( Definitions . SignalNames . S19 ) = 304 End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Sound_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/Sound.vb \u00b6 Source code \u00b6 Imports System . Threading Public Module Sound Public TrainDepartingP1State As Boolean ' sounds Public trainDepartingP1SoundNumer As Integer = 1 Public TrainDepartingP2State As Boolean Public trainDepartingP2SoundNumer As Integer = 1 Public TrainApprochingP1State As Boolean Public TrainApprochingP1SoundNumber As Integer = 1 Public TrainApprochingP2State As Boolean Public TrainApprochingP2SoundNumber As Integer = 1 Public TrainEnteringSidingState As Boolean Public TrainEnteringSidingSoundNumber As Integer = 1 Public EventState As Boolean Public EventSoundNumber As Integer = 1 Public SafetyState As Boolean Public SafetySoundNumber As Integer = 1 Public SoundText As String Public Bell As Integer = 0 Public EventSoundTrigger As Integer = RuntimeConfig . config . EventLoopTime Public SafetySoundTrigger As Integer = RuntimeConfig . config . SafetyLoopTime Public AuxSound1State As Boolean Public AuxSound1Number As Integer = 1 Public AuxSound2State As Boolean Public AuxSound2Number As Integer = 1 Public AuxSound3State As Boolean Public AuxSound3Number As Integer = 1 Public CustomSoundTextToPlay As String Public CustomSoundState As Boolean ' Remeberance Public R1State As Boolean Public R2State As Boolean Public R3State As Boolean Sub MyBackgroundThread () Do PlaySound () Loop End Sub Dim ThreadAudio As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartAudioThread () ThreadAudio . Start () End Sub Public Sub StopAudioThread () ' ThreadAudio . Suspend () End Sub Public Sub R1Play () If R1State = False Then R1State = True End If End Sub Public Sub R2Play () If R2State = False Then R2State = True End If End Sub Public Sub R3Play () If R3State = False Then R3State = True End If End Sub Public Sub TrainDepartingP1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . DepartingP1SoundEnabled = True And AllowAudio Then If TrainDepartingP1State = False Then TrainDepartingP1State = True End If End If Else TrainDepartingP1State = False End If End Sub Public Sub TrainDepartingP2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . DepartingP2SoundEnabled = True And AllowAudio Then If TrainDepartingP2State = False Then TrainDepartingP2State = True End If End If Else TrainDepartingP2State = False End If End Sub Public Sub TrainApprochingP1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . ArrivingP1SoundEnabled = True And AllowAudio Then If TrainApprochingP1State = False Then TrainApprochingP1State = True End If End If Else TrainApprochingP1State = False End If End Sub Public Sub TrainApprochingP2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . ArrivingP2SoundEnabled = True And AllowAudio Then If TrainApprochingP2State = False Then TrainApprochingP2State = True End If End If Else TrainApprochingP2State = False End If End Sub Public Sub TrainEnteringSiding () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . SidingSoundEnabled = True And AllowAudio Then If TrainEnteringSidingState = False Then TrainEnteringSidingState = True End If End If Else TrainEnteringSidingState = False End If End Sub Public Sub EventSound () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . EventSoundEnabled = True And AllowAudio Then If EventState = False Then EventState = True End If End If Else EventState = False End If End Sub Public Sub SafetySound () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . SafetySoundEnabled = True And AllowAudio Then If SafetyState = False Then SafetyState = True End If End If Else SafetyState = False End If End Sub Public Sub AUXSound1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound1Enabled = True And AllowAudio Then If AuxSound1State = False Then AuxSound1State = True End If End If Else AuxSound1State = False End If End Sub Public Sub AUXSound2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound2Enabled = True And AllowAudio Then If AuxSound2State = False Then AuxSound2State = True End If End If Else AuxSound2State = False End If End Sub Public Sub AUXSound3 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound3Enabled = True And AllowAudio Then If AuxSound3State = False Then AuxSound3State = True End If End If Else AuxSound3State = False End If End Sub Public Sub CustomSound ( CustomSoundText As String ) CustomSoundTextToPlay = CustomSoundText If Initializations . SoundInitiated = True Then If CustomSoundState = False Then CustomSoundState = True End If Else CustomSoundState = False End If End Sub Public Sub PlaySound () Buttons . ButtonFlash ( ButtonNames . Button28 ) = True Buttons . ButtonFlash ( ButtonNames . Button29 ) = True Buttons . ButtonFlash ( ButtonNames . Button30 ) = True ' Train Departing P1 If TrainDepartingP1State = True Then If trainDepartingP1SoundNumer = RuntimeConfig . config . DepartingP1AmountOfClips + 1 Then trainDepartingP1SoundNumer = 1 End If SoundText = ( \"The current sound playing is: P1 Departing \" & trainDepartingP1SoundNumer & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P1Departing\" & trainDepartingP1SoundNumer & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train departing platform 1 sound file \" & trainDepartingP1SoundNumer ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try trainDepartingP1SoundNumer = trainDepartingP1SoundNumer + 1 TrainDepartingP1State = False Thread . Sleep ( ThreadSleepTime ) ' Train Departing P2 ElseIf TrainDepartingP2State = True Then If trainDepartingP2SoundNumer = RuntimeConfig . config . DepartingP2AmountOfClips + 1 Then trainDepartingP2SoundNumer = 1 End If SoundText = ( \"The current sound playing is: P2 Departing \" & trainDepartingP2SoundNumer & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P2Departing\" & trainDepartingP2SoundNumer & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train departing platform 2 sound file \" & trainDepartingP2SoundNumer ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try trainDepartingP2SoundNumer = trainDepartingP2SoundNumer + 1 TrainDepartingP2State = False Thread . Sleep ( ThreadSleepTime ) ' Train Approaching P1 ElseIf TrainApprochingP1State = True Then If TrainApprochingP1SoundNumber = RuntimeConfig . config . ArrivingP1AmountOfClips + 1 Then TrainApprochingP1SoundNumber = 1 End If SoundText = ( \"The current sound playing Is P1 Approaching \" & TrainApprochingP1SoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P1Approaching\" & TrainApprochingP1SoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train approching platform 1 sound file \" & TrainApprochingP1SoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainApprochingP1SoundNumber = TrainApprochingP1SoundNumber + 1 TrainApprochingP1State = False Thread . Sleep ( ThreadSleepTime ) ' Train Approaching P2 ElseIf TrainApprochingP2State = True Then If TrainApprochingP2SoundNumber = RuntimeConfig . config . ArrivingP2AmountOfClips + 1 Then TrainApprochingP2SoundNumber = 1 End If SoundText = ( \"The current sound playing is: P2 Approaching \" & TrainApprochingP2SoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P2Approaching\" & TrainApprochingP2SoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train approching platform 2 sound file \" & TrainApprochingP2SoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainApprochingP2SoundNumber = TrainApprochingP2SoundNumber + 1 TrainApprochingP2State = False Thread . Sleep ( ThreadSleepTime ) ' Train Entering Siding ElseIf TrainEnteringSidingState = True Then If TrainEnteringSidingSoundNumber = RuntimeConfig . config . SidingAmountOfClips + 1 Then TrainEnteringSidingSoundNumber = 1 End If SoundText = ( \"The current sound playing Is EnteringSiding\" & TrainEnteringSidingSoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"TrainMovingIntoSiding\" & TrainEnteringSidingSoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train entering siding sound file \" & TrainEnteringSidingSoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainEnteringSidingSoundNumber = TrainEnteringSidingSoundNumber + 1 TrainEnteringSidingState = False Thread . Sleep ( ThreadSleepTime ) ' Event ElseIf EventState = True Then If EventSoundNumber = RuntimeConfig . config . EventAmountOfClips + 1 Then EventSoundNumber = 1 End If SoundText = ( \"The current sound playing is: Event \" & EventSoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"Event\" & EventSoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - event sound file \" & EventSoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try EventSoundNumber = EventSoundNumber + 1 EventState = False Thread . Sleep ( ThreadSleepTime ) ' Safety ElseIf SafetyState = True Then If SafetySoundNumber = RuntimeConfig . config . SafetyAmountOfClips + 1 Then SafetySoundNumber = 1 End If SoundText = ( \"The current sound playing Is Safety \" & SafetySoundNumber & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"Safety\" & SafetySoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - safety sound file \" & SafetySoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try SafetySoundNumber = SafetySoundNumber + 1 SafetyState = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound1 ElseIf AuxSound1State = True Then Buttons . ButtonFlash ( ButtonNames . Button28 ) = False If AuxSound1Number = RuntimeConfig . config . AUXSound1OfClips + 1 Then AuxSound1Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 1 - \" & AuxSound1Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX1\" & AuxSound1Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 1 sound file \" & AuxSound1Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound1Number = AuxSound1Number + 1 AuxSound1State = False Buttons . ButtonRequest ( ButtonNames . Button28 ) = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound2 ElseIf AuxSound2State = True Then Buttons . ButtonFlash ( ButtonNames . Button29 ) = False If AuxSound2Number = RuntimeConfig . config . AUXSound2OfClips + 1 Then AuxSound2Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 2 - \" & AuxSound2Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX2\" & AuxSound2Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 2 sound file \" & AuxSound2Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound2Number = AuxSound2Number + 1 AuxSound2State = False Buttons . ButtonRequest ( ButtonNames . Button29 ) = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound3 ElseIf AuxSound3State = True Then Buttons . ButtonFlash ( ButtonNames . Button30 ) = False If AuxSound3Number = RuntimeConfig . config . AUXSound3OfClips + 1 Then AuxSound3Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 3 - \" & AuxSound3Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX3\" & AuxSound3Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 3 sound file \" & AuxSound3Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound3Number = AuxSound3Number + 1 AuxSound3State = False Buttons . ButtonRequest ( ButtonNames . Button30 ) = False Thread . Sleep ( ThreadSleepTime ) ' R1 ElseIf R1State = True Then SoundText = ( \"The current sound playing Is R1.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R1.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R1\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R1State = False Thread . Sleep ( ThreadSleepTime ) ' R2 ElseIf R2State = True Then SoundText = ( \"The current sound playing Is R2.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R2.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R2\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R2State = False Thread . Sleep ( ThreadSleepTime ) ' R3 ElseIf R3State = True Then SoundText = ( \"The current sound playing Is R3.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R3.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R3\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R3State = False Thread . Sleep ( ThreadSleepTime ) ' Custom Sound ElseIf CustomSoundState = True Then SoundText = ( \"The current sound playing Is a custom sound - \" & CustomSoundTextToPlay ) Dim SAPI SAPI = CreateObject ( \"SAPI.spvoice\" ) SAPI . Volume = 100 SAPI . rate = 0.5 SAPI . Speak ( CustomSoundTextToPlay ) CustomSoundState = False CustomSoundTextToPlay = \"\" Thread . Sleep ( ThreadSleepTime ) End If SoundText = ( \"\" ) End Sub ' Second timer countdown Public Sub SecondTick () ' Event sound cycle If Not EventSoundTrigger = 0 Then EventSoundTrigger -= 1 Else EventSound () EventSoundTrigger = RuntimeConfig . config . EventLoopTime End If ' Safety sound cycle If Not SafetySoundTrigger = 0 Then SafetySoundTrigger -= 1 Else SafetySound () SafetySoundTrigger = RuntimeConfig . config . SafetyLoopTime End If ' Bell If RuntimeConfig . config . BellEnabled = True Then If Not Bell = 0 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 1 Bell -= 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 0 End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Sound.vb"},{"location":"mainsystem/Files/Sound_8vb/#githubsignallingsystemehmr-signalling-systemdevicessoundvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/Sound.vb"},{"location":"mainsystem/Files/Sound_8vb/#source-code","text":"Imports System . Threading Public Module Sound Public TrainDepartingP1State As Boolean ' sounds Public trainDepartingP1SoundNumer As Integer = 1 Public TrainDepartingP2State As Boolean Public trainDepartingP2SoundNumer As Integer = 1 Public TrainApprochingP1State As Boolean Public TrainApprochingP1SoundNumber As Integer = 1 Public TrainApprochingP2State As Boolean Public TrainApprochingP2SoundNumber As Integer = 1 Public TrainEnteringSidingState As Boolean Public TrainEnteringSidingSoundNumber As Integer = 1 Public EventState As Boolean Public EventSoundNumber As Integer = 1 Public SafetyState As Boolean Public SafetySoundNumber As Integer = 1 Public SoundText As String Public Bell As Integer = 0 Public EventSoundTrigger As Integer = RuntimeConfig . config . EventLoopTime Public SafetySoundTrigger As Integer = RuntimeConfig . config . SafetyLoopTime Public AuxSound1State As Boolean Public AuxSound1Number As Integer = 1 Public AuxSound2State As Boolean Public AuxSound2Number As Integer = 1 Public AuxSound3State As Boolean Public AuxSound3Number As Integer = 1 Public CustomSoundTextToPlay As String Public CustomSoundState As Boolean ' Remeberance Public R1State As Boolean Public R2State As Boolean Public R3State As Boolean Sub MyBackgroundThread () Do PlaySound () Loop End Sub Dim ThreadAudio As New Thread ( AddressOf MyBackgroundThread ) Public Sub StartAudioThread () ThreadAudio . Start () End Sub Public Sub StopAudioThread () ' ThreadAudio . Suspend () End Sub Public Sub R1Play () If R1State = False Then R1State = True End If End Sub Public Sub R2Play () If R2State = False Then R2State = True End If End Sub Public Sub R3Play () If R3State = False Then R3State = True End If End Sub Public Sub TrainDepartingP1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . DepartingP1SoundEnabled = True And AllowAudio Then If TrainDepartingP1State = False Then TrainDepartingP1State = True End If End If Else TrainDepartingP1State = False End If End Sub Public Sub TrainDepartingP2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . DepartingP2SoundEnabled = True And AllowAudio Then If TrainDepartingP2State = False Then TrainDepartingP2State = True End If End If Else TrainDepartingP2State = False End If End Sub Public Sub TrainApprochingP1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . ArrivingP1SoundEnabled = True And AllowAudio Then If TrainApprochingP1State = False Then TrainApprochingP1State = True End If End If Else TrainApprochingP1State = False End If End Sub Public Sub TrainApprochingP2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . ArrivingP2SoundEnabled = True And AllowAudio Then If TrainApprochingP2State = False Then TrainApprochingP2State = True End If End If Else TrainApprochingP2State = False End If End Sub Public Sub TrainEnteringSiding () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . SidingSoundEnabled = True And AllowAudio Then If TrainEnteringSidingState = False Then TrainEnteringSidingState = True End If End If Else TrainEnteringSidingState = False End If End Sub Public Sub EventSound () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . EventSoundEnabled = True And AllowAudio Then If EventState = False Then EventState = True End If End If Else EventState = False End If End Sub Public Sub SafetySound () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . SafetySoundEnabled = True And AllowAudio Then If SafetyState = False Then SafetyState = True End If End If Else SafetyState = False End If End Sub Public Sub AUXSound1 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound1Enabled = True And AllowAudio Then If AuxSound1State = False Then AuxSound1State = True End If End If Else AuxSound1State = False End If End Sub Public Sub AUXSound2 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound2Enabled = True And AllowAudio Then If AuxSound2State = False Then AuxSound2State = True End If End If Else AuxSound2State = False End If End Sub Public Sub AUXSound3 () If Initializations . SoundInitiated = True Then If RuntimeConfig . config . AUXSound3Enabled = True And AllowAudio Then If AuxSound3State = False Then AuxSound3State = True End If End If Else AuxSound3State = False End If End Sub Public Sub CustomSound ( CustomSoundText As String ) CustomSoundTextToPlay = CustomSoundText If Initializations . SoundInitiated = True Then If CustomSoundState = False Then CustomSoundState = True End If Else CustomSoundState = False End If End Sub Public Sub PlaySound () Buttons . ButtonFlash ( ButtonNames . Button28 ) = True Buttons . ButtonFlash ( ButtonNames . Button29 ) = True Buttons . ButtonFlash ( ButtonNames . Button30 ) = True ' Train Departing P1 If TrainDepartingP1State = True Then If trainDepartingP1SoundNumer = RuntimeConfig . config . DepartingP1AmountOfClips + 1 Then trainDepartingP1SoundNumer = 1 End If SoundText = ( \"The current sound playing is: P1 Departing \" & trainDepartingP1SoundNumer & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P1Departing\" & trainDepartingP1SoundNumer & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train departing platform 1 sound file \" & trainDepartingP1SoundNumer ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try trainDepartingP1SoundNumer = trainDepartingP1SoundNumer + 1 TrainDepartingP1State = False Thread . Sleep ( ThreadSleepTime ) ' Train Departing P2 ElseIf TrainDepartingP2State = True Then If trainDepartingP2SoundNumer = RuntimeConfig . config . DepartingP2AmountOfClips + 1 Then trainDepartingP2SoundNumer = 1 End If SoundText = ( \"The current sound playing is: P2 Departing \" & trainDepartingP2SoundNumer & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P2Departing\" & trainDepartingP2SoundNumer & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train departing platform 2 sound file \" & trainDepartingP2SoundNumer ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try trainDepartingP2SoundNumer = trainDepartingP2SoundNumer + 1 TrainDepartingP2State = False Thread . Sleep ( ThreadSleepTime ) ' Train Approaching P1 ElseIf TrainApprochingP1State = True Then If TrainApprochingP1SoundNumber = RuntimeConfig . config . ArrivingP1AmountOfClips + 1 Then TrainApprochingP1SoundNumber = 1 End If SoundText = ( \"The current sound playing Is P1 Approaching \" & TrainApprochingP1SoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P1Approaching\" & TrainApprochingP1SoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train approching platform 1 sound file \" & TrainApprochingP1SoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainApprochingP1SoundNumber = TrainApprochingP1SoundNumber + 1 TrainApprochingP1State = False Thread . Sleep ( ThreadSleepTime ) ' Train Approaching P2 ElseIf TrainApprochingP2State = True Then If TrainApprochingP2SoundNumber = RuntimeConfig . config . ArrivingP2AmountOfClips + 1 Then TrainApprochingP2SoundNumber = 1 End If SoundText = ( \"The current sound playing is: P2 Approaching \" & TrainApprochingP2SoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"P2Approaching\" & TrainApprochingP2SoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train approching platform 2 sound file \" & TrainApprochingP2SoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainApprochingP2SoundNumber = TrainApprochingP2SoundNumber + 1 TrainApprochingP2State = False Thread . Sleep ( ThreadSleepTime ) ' Train Entering Siding ElseIf TrainEnteringSidingState = True Then If TrainEnteringSidingSoundNumber = RuntimeConfig . config . SidingAmountOfClips + 1 Then TrainEnteringSidingSoundNumber = 1 End If SoundText = ( \"The current sound playing Is EnteringSiding\" & TrainEnteringSidingSoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"TrainMovingIntoSiding\" & TrainEnteringSidingSoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - train entering siding sound file \" & TrainEnteringSidingSoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try TrainEnteringSidingSoundNumber = TrainEnteringSidingSoundNumber + 1 TrainEnteringSidingState = False Thread . Sleep ( ThreadSleepTime ) ' Event ElseIf EventState = True Then If EventSoundNumber = RuntimeConfig . config . EventAmountOfClips + 1 Then EventSoundNumber = 1 End If SoundText = ( \"The current sound playing is: Event \" & EventSoundNumber & \".wav\" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"Event\" & EventSoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - event sound file \" & EventSoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try EventSoundNumber = EventSoundNumber + 1 EventState = False Thread . Sleep ( ThreadSleepTime ) ' Safety ElseIf SafetyState = True Then If SafetySoundNumber = RuntimeConfig . config . SafetyAmountOfClips + 1 Then SafetySoundNumber = 1 End If SoundText = ( \"The current sound playing Is Safety \" & SafetySoundNumber & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"Safety\" & SafetySoundNumber & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - safety sound file \" & SafetySoundNumber ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try SafetySoundNumber = SafetySoundNumber + 1 SafetyState = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound1 ElseIf AuxSound1State = True Then Buttons . ButtonFlash ( ButtonNames . Button28 ) = False If AuxSound1Number = RuntimeConfig . config . AUXSound1OfClips + 1 Then AuxSound1Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 1 - \" & AuxSound1Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX1\" & AuxSound1Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 1 sound file \" & AuxSound1Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound1Number = AuxSound1Number + 1 AuxSound1State = False Buttons . ButtonRequest ( ButtonNames . Button28 ) = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound2 ElseIf AuxSound2State = True Then Buttons . ButtonFlash ( ButtonNames . Button29 ) = False If AuxSound2Number = RuntimeConfig . config . AUXSound2OfClips + 1 Then AuxSound2Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 2 - \" & AuxSound2Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX2\" & AuxSound2Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 2 sound file \" & AuxSound2Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound2Number = AuxSound2Number + 1 AuxSound2State = False Buttons . ButtonRequest ( ButtonNames . Button29 ) = False Thread . Sleep ( ThreadSleepTime ) ' AUXSound3 ElseIf AuxSound3State = True Then Buttons . ButtonFlash ( ButtonNames . Button30 ) = False If AuxSound3Number = RuntimeConfig . config . AUXSound3OfClips + 1 Then AuxSound3Number = 1 End If SoundText = ( \"The current sound playing Is AUX Sound 3 - \" & AuxSound3Number & \".wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"AUX3\" & AuxSound3Number & \".wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - AUX 3 sound file \" & AuxSound3Number ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try AuxSound3Number = AuxSound3Number + 1 AuxSound3State = False Buttons . ButtonRequest ( ButtonNames . Button30 ) = False Thread . Sleep ( ThreadSleepTime ) ' R1 ElseIf R1State = True Then SoundText = ( \"The current sound playing Is R1.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R1.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R1\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R1State = False Thread . Sleep ( ThreadSleepTime ) ' R2 ElseIf R2State = True Then SoundText = ( \"The current sound playing Is R2.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R2.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R2\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R2State = False Thread . Sleep ( ThreadSleepTime ) ' R3 ElseIf R3State = True Then SoundText = ( \"The current sound playing Is R3.wav \" ) Try My . Computer . Audio . Play ( Main . SoundFile & \"R3.wav\" , AudioPlayMode . WaitToComplete ) Catch ex As Exception TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , \"Error playing audio - R3\" ) TelegramMessageSender . sendMessage ( ChatGroups . Programmers , ex . ToString ) End Try R3State = False Thread . Sleep ( ThreadSleepTime ) ' Custom Sound ElseIf CustomSoundState = True Then SoundText = ( \"The current sound playing Is a custom sound - \" & CustomSoundTextToPlay ) Dim SAPI SAPI = CreateObject ( \"SAPI.spvoice\" ) SAPI . Volume = 100 SAPI . rate = 0.5 SAPI . Speak ( CustomSoundTextToPlay ) CustomSoundState = False CustomSoundTextToPlay = \"\" Thread . Sleep ( ThreadSleepTime ) End If SoundText = ( \"\" ) End Sub ' Second timer countdown Public Sub SecondTick () ' Event sound cycle If Not EventSoundTrigger = 0 Then EventSoundTrigger -= 1 Else EventSound () EventSoundTrigger = RuntimeConfig . config . EventLoopTime End If ' Safety sound cycle If Not SafetySoundTrigger = 0 Then SafetySoundTrigger -= 1 Else SafetySound () SafetySoundTrigger = RuntimeConfig . config . SafetyLoopTime End If ' Bell If RuntimeConfig . config . BellEnabled = True Then If Not Bell = 0 Then Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 1 Bell -= 1 Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 0 End If Else Serial . DataWriteOutputsOutArray ( DigitalDeviceAddress . OutputAddressBell ) = 0 End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/StaticValues_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/StaticValues.vb \u00b6 Source code \u00b6 Module StaticValues ' Threads Public ReadOnly AnalogIOTimerValue As Integer = 30 ' ms for system Analog IO tick Public ReadOnly MainLogicLogicThreadValue As Integer = 30 ' ms Main Logic Public ReadOnly MainLogicSecondThreadValue As Integer = 1000 ' ms Main Logic Seconds timer Public ReadOnly PointsLogicThreadValue As Integer = 30 ' ms Points Logic Public ReadOnly PointsSecondThreadValue As Integer = 1000 ' ms Points Logic Seconds timer Public ReadOnly SignalsLogicThreadValue As Integer = 30 ' ms Signals Logic Public ReadOnly SignalsSecondThreadValue As Integer = 1000 ' ms Signals Logic Seconds timer Public ReadOnly LeversLogicThreadValue As Integer = 30 ' ms Levers Logic Public ReadOnly LeversSecondThreadValue As Integer = 1000 ' ms Levers Logic Seconds timer Public ReadOnly TrackSectionsLogicThreadValue As Integer = 30 ' ms Track Sections Logic Public ReadOnly TrackSectionsSecondThreadValue As Integer = 1000 ' ms Track Sections Logic Seconds timer Public ReadOnly ErrorLogicThreadValue As Integer = 3000 ' ms Error show Public ReadOnly LineSideLogicThreadValue As Integer = 500 ' ms Line Side Equipment Public ReadOnly SoundsLogicThreadValue As Integer = 1000 ' ms Sounds Logic Public ReadOnly SoundsSecondThreadValue As Integer = 1000 ' ms Sounds Logic Seconds timer Public ReadOnly ButtonsLogicThreadValue As Integer = 300 ' ms Button Logic Public ReadOnly ButtonsLogicIndicatorsThreadValue As Integer = 750 ' ms Button Logic Indicators ( Affects button flash speed ) Public ReadOnly ButtonsSecondThreadValue As Integer = 1000 ' ms Button Logic Seconds timer Public ReadOnly FrameDisplaysLogicThreadValue As Integer = 100 ' ms FrameDisplays Logic Public ReadOnly FrameDisplaysSecondThreadValue As Integer = 500 ' ms FrameDisplays Logic Seconds timer ( Affects flash speed ) Public ReadOnly JsonDisplayThreadValue As Integer = 30 ' ms Json Public ReadOnly UpdateCheckThreadValue As Integer = 120000 ' ms Update check ' Audio Public ReadOnly ThreadSleepTime As Integer = 1500 ' Time between audio files ' Buttons Public ReadOnly ButtonDebounce As Integer = 4 ' 3 Seconds Public ReadOnly ButttonFaultTime As Integer = 240 ' Bell Public ReadOnly BellRequestCouncil As Integer = 5 ' 3 Seconds Public ReadOnly BellRequestMainLine As Integer = 1 ' 3 Seconds Public ReadOnly BellRequestShunt As Integer = 3 ' 2 Seconds Public ReadOnly BellRequestError As Integer = 16 ' 6 Seconds ' Signals Public ReadOnly SignalTimeOut As Integer = 90 ' 120 Seconds Public ReadOnly AnnouncementDelay As Integer = 7 Public ReadOnly SafeToClearValue As Integer = 1 Public ReadOnly SectionErrorTimerCountdown As Integer = 3 ' Time value for train appearing right before signal Public ReadOnly SignalBackLockTime As Integer = 90 ' Time which the signal locks its route until either released or timed out . Public ReadOnly SignalBackLockSignalCouncilViaButton As Integer = 2 ' Time where route has a hold time once counciled . ' Initilization Public ReadOnly InitilizationStart As Integer = 3 ' Sound ' Timers Public ReadOnly TimerDisabled As Integer = 255 ' Points Public ReadOnly PointErrorNoReturnCountdownTime As Integer = 10 Public ReadOnly pointNotChangingCountDownTime As Integer = 10 ' PointSections Public ReadOnly SectionPointDelay As Integer = 3 ' Delay once train left section Public ReadOnly SectionPointErrorTriggerCount As Integer = 5 ' TrackSections Public ReadOnly SectionDelay As Integer = 3 ' Delay once train left section ' Signal Delay Times Public ReadOnly AJ1EDelayValue As Integer = 1 Public ReadOnly AJ2EDelayValue As Integer = 14 Public ReadOnly AJ3EDelayValue As Integer = 20 Public ReadOnly AJ4EDelayValue As Integer = 2 Public ReadOnly AJ7EDelayValue As Integer = 8 Public ReadOnly AJ8EDelayValue As Integer = 13 Public ReadOnly AJ9EDelayValue As Integer = 11 Public ReadOnly AJ16EDelayValue As Integer = 36 Public ReadOnly AJ17EDelayValue As Integer = 19 Public ReadOnly AJ18EDelayValue As Integer = 2 Public ReadOnly AJ21EDelayValue As Integer = 1 Public ReadOnly AJ3WDelayValue As Integer = 2 Public ReadOnly AJ7WDelayValue As Integer = 19 Public ReadOnly AJ8WDelayValue As Integer = 13 Public ReadOnly AJ9WDelayValue As Integer = 23 Public ReadOnly AJ15WDelayValue As Integer = 1 Public ReadOnly AJ16WDelayValue As Integer = 21 Public ReadOnly AJ17WDelayValue As Integer = 20 Public ReadOnly AJ18WDelayValue As Integer = 14 Public ReadOnly AJ22WDelayValue As Integer = 1 End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/StaticValues.vb"},{"location":"mainsystem/Files/StaticValues_8vb/#githubsignallingsystemehmr-signalling-systemconfigsstaticvaluesvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/StaticValues.vb"},{"location":"mainsystem/Files/StaticValues_8vb/#source-code","text":"Module StaticValues ' Threads Public ReadOnly AnalogIOTimerValue As Integer = 30 ' ms for system Analog IO tick Public ReadOnly MainLogicLogicThreadValue As Integer = 30 ' ms Main Logic Public ReadOnly MainLogicSecondThreadValue As Integer = 1000 ' ms Main Logic Seconds timer Public ReadOnly PointsLogicThreadValue As Integer = 30 ' ms Points Logic Public ReadOnly PointsSecondThreadValue As Integer = 1000 ' ms Points Logic Seconds timer Public ReadOnly SignalsLogicThreadValue As Integer = 30 ' ms Signals Logic Public ReadOnly SignalsSecondThreadValue As Integer = 1000 ' ms Signals Logic Seconds timer Public ReadOnly LeversLogicThreadValue As Integer = 30 ' ms Levers Logic Public ReadOnly LeversSecondThreadValue As Integer = 1000 ' ms Levers Logic Seconds timer Public ReadOnly TrackSectionsLogicThreadValue As Integer = 30 ' ms Track Sections Logic Public ReadOnly TrackSectionsSecondThreadValue As Integer = 1000 ' ms Track Sections Logic Seconds timer Public ReadOnly ErrorLogicThreadValue As Integer = 3000 ' ms Error show Public ReadOnly LineSideLogicThreadValue As Integer = 500 ' ms Line Side Equipment Public ReadOnly SoundsLogicThreadValue As Integer = 1000 ' ms Sounds Logic Public ReadOnly SoundsSecondThreadValue As Integer = 1000 ' ms Sounds Logic Seconds timer Public ReadOnly ButtonsLogicThreadValue As Integer = 300 ' ms Button Logic Public ReadOnly ButtonsLogicIndicatorsThreadValue As Integer = 750 ' ms Button Logic Indicators ( Affects button flash speed ) Public ReadOnly ButtonsSecondThreadValue As Integer = 1000 ' ms Button Logic Seconds timer Public ReadOnly FrameDisplaysLogicThreadValue As Integer = 100 ' ms FrameDisplays Logic Public ReadOnly FrameDisplaysSecondThreadValue As Integer = 500 ' ms FrameDisplays Logic Seconds timer ( Affects flash speed ) Public ReadOnly JsonDisplayThreadValue As Integer = 30 ' ms Json Public ReadOnly UpdateCheckThreadValue As Integer = 120000 ' ms Update check ' Audio Public ReadOnly ThreadSleepTime As Integer = 1500 ' Time between audio files ' Buttons Public ReadOnly ButtonDebounce As Integer = 4 ' 3 Seconds Public ReadOnly ButttonFaultTime As Integer = 240 ' Bell Public ReadOnly BellRequestCouncil As Integer = 5 ' 3 Seconds Public ReadOnly BellRequestMainLine As Integer = 1 ' 3 Seconds Public ReadOnly BellRequestShunt As Integer = 3 ' 2 Seconds Public ReadOnly BellRequestError As Integer = 16 ' 6 Seconds ' Signals Public ReadOnly SignalTimeOut As Integer = 90 ' 120 Seconds Public ReadOnly AnnouncementDelay As Integer = 7 Public ReadOnly SafeToClearValue As Integer = 1 Public ReadOnly SectionErrorTimerCountdown As Integer = 3 ' Time value for train appearing right before signal Public ReadOnly SignalBackLockTime As Integer = 90 ' Time which the signal locks its route until either released or timed out . Public ReadOnly SignalBackLockSignalCouncilViaButton As Integer = 2 ' Time where route has a hold time once counciled . ' Initilization Public ReadOnly InitilizationStart As Integer = 3 ' Sound ' Timers Public ReadOnly TimerDisabled As Integer = 255 ' Points Public ReadOnly PointErrorNoReturnCountdownTime As Integer = 10 Public ReadOnly pointNotChangingCountDownTime As Integer = 10 ' PointSections Public ReadOnly SectionPointDelay As Integer = 3 ' Delay once train left section Public ReadOnly SectionPointErrorTriggerCount As Integer = 5 ' TrackSections Public ReadOnly SectionDelay As Integer = 3 ' Delay once train left section ' Signal Delay Times Public ReadOnly AJ1EDelayValue As Integer = 1 Public ReadOnly AJ2EDelayValue As Integer = 14 Public ReadOnly AJ3EDelayValue As Integer = 20 Public ReadOnly AJ4EDelayValue As Integer = 2 Public ReadOnly AJ7EDelayValue As Integer = 8 Public ReadOnly AJ8EDelayValue As Integer = 13 Public ReadOnly AJ9EDelayValue As Integer = 11 Public ReadOnly AJ16EDelayValue As Integer = 36 Public ReadOnly AJ17EDelayValue As Integer = 19 Public ReadOnly AJ18EDelayValue As Integer = 2 Public ReadOnly AJ21EDelayValue As Integer = 1 Public ReadOnly AJ3WDelayValue As Integer = 2 Public ReadOnly AJ7WDelayValue As Integer = 19 Public ReadOnly AJ8WDelayValue As Integer = 13 Public ReadOnly AJ9WDelayValue As Integer = 23 Public ReadOnly AJ15WDelayValue As Integer = 1 Public ReadOnly AJ16WDelayValue As Integer = 21 Public ReadOnly AJ17WDelayValue As Integer = 20 Public ReadOnly AJ18WDelayValue As Integer = 14 Public ReadOnly AJ22WDelayValue As Integer = 1 End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Telegram_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Web/Telegram.vb \u00b6 Source code \u00b6 Imports System . Net Public Module TelegramMessageSender Dim httpRequest As HttpWebRequest Dim httpResponse As HttpWebResponse Enum ChatGroups OperationalGroup SPADsGroup Programmers End Enum Public Sub sendMessage ( ByRef chatgroup As ChatGroups , message As String ) If GlobalConfig . config . telegram . enable Then Try If chatgroup = ChatGroups . OperationalGroup Then httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidoperational & \"&text=\" & message ) ElseIf chatgroup = ChatGroups . SPADsGroup Then httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidspads & \"&text=\" & message ) Else httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidsoftwarefaults & \"&text=\" & message ) End If httpResponse = httpRequest . GetResponse () httpResponse . Close () Catch wex As WebException If wex . Status = WebExceptionStatus . ProtocolError Then httpResponse = wex . Response '' msgBox ( \"HTTP Response Code: {0}\" , httpResponse . StatusCode . ToString ()) ' TelegramMessageSender . sendMessage ( \"HTTP Response Code: {0} \" & httpResponse . StatusCode . ToString ()) httpResponse . Close () End If End Try End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Web/Telegram.vb"},{"location":"mainsystem/Files/Telegram_8vb/#githubsignallingsystemehmr-signalling-systemwebtelegramvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Web/Telegram.vb"},{"location":"mainsystem/Files/Telegram_8vb/#source-code","text":"Imports System . Net Public Module TelegramMessageSender Dim httpRequest As HttpWebRequest Dim httpResponse As HttpWebResponse Enum ChatGroups OperationalGroup SPADsGroup Programmers End Enum Public Sub sendMessage ( ByRef chatgroup As ChatGroups , message As String ) If GlobalConfig . config . telegram . enable Then Try If chatgroup = ChatGroups . OperationalGroup Then httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidoperational & \"&text=\" & message ) ElseIf chatgroup = ChatGroups . SPADsGroup Then httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidspads & \"&text=\" & message ) Else httpRequest = WebRequest . Create ( \"https://api.telegram.org/\" & GlobalConfig . config . telegram . token & \"/sendMessage?chat_id=\" & GlobalConfig . config . telegram . chatidsoftwarefaults & \"&text=\" & message ) End If httpResponse = httpRequest . GetResponse () httpResponse . Close () Catch wex As WebException If wex . Status = WebExceptionStatus . ProtocolError Then httpResponse = wex . Response '' msgBox ( \"HTTP Response Code: {0}\" , httpResponse . StatusCode . ToString ()) ' TelegramMessageSender . sendMessage ( \"HTTP Response Code: {0} \" & httpResponse . StatusCode . ToString ()) httpResponse . Close () End If End Try End If End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/TrackSections_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Devices/TrackSections.vb \u00b6 Source code \u00b6 Public Module TrackSections Public ReadOnly TrackSectionCount As Integer = 28 Public TrackSectionAnalogClear () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public TrackSectionErrorSetPoint () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public TrackSectionError () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public TrackSectionTimer () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public TrackSectionField () As String = { \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" } Public TrackSectionUnoccupied () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub Logic () For i As Integer = 0 To TrackSectionCount - 1 ' Check section voltage against set voltage If ActualAnalogValue ( i + 1 ) >= RuntimeConfig . config . TrackSectionSetPoint ( i ) Then TrackSectionAnalogClear ( i ) = True Else TrackSectionAnalogClear ( i ) = False End If ' Do logic to check if read voltage is below error set voltage If ActualAnalogValue ( i + 1 ) <= RuntimeConfig . config . TrackSectionSetPointError ( i ) Then TrackSectionError ( i ) = True Else TrackSectionError ( i ) = False End If ' Set timers If TrackSectionAnalogClear ( i ) = False Then TrackSectionTimer ( i ) = SectionDelay ' Final output logic If TrackSectionAnalogClear ( i ) = True And TrackSectionTimer ( i ) = 0 Then TrackSectionField ( i ) = \"Non-Occupied\" If RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Detect\" Then TrackSectionUnoccupied ( i ) = True ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Occupy\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"UnOccupied\" Then TrackSectionUnoccupied ( i ) = True Else TrackSectionUnoccupied ( i ) = False End If Else TrackSectionField ( i ) = \"Occupied\" If RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Detect\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Occupy\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"UnOccupied\" Then TrackSectionUnoccupied ( i ) = True Else TrackSectionUnoccupied ( i ) = False End If End If Next End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To TrackSectionCount - 1 If Not TrackSectionTimer ( i ) = 0 Then TrackSectionTimer ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices/TrackSections.vb"},{"location":"mainsystem/Files/TrackSections_8vb/#githubsignallingsystemehmr-signalling-systemdevicestracksectionsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices/TrackSections.vb"},{"location":"mainsystem/Files/TrackSections_8vb/#source-code","text":"Public Module TrackSections Public ReadOnly TrackSectionCount As Integer = 28 Public TrackSectionAnalogClear () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public TrackSectionErrorSetPoint () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public TrackSectionError () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public TrackSectionTimer () As Integer = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } Public TrackSectionField () As String = { \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" , \"unoccupied\" } Public TrackSectionUnoccupied () As Boolean = { False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False , False } Public Sub Logic () For i As Integer = 0 To TrackSectionCount - 1 ' Check section voltage against set voltage If ActualAnalogValue ( i + 1 ) >= RuntimeConfig . config . TrackSectionSetPoint ( i ) Then TrackSectionAnalogClear ( i ) = True Else TrackSectionAnalogClear ( i ) = False End If ' Do logic to check if read voltage is below error set voltage If ActualAnalogValue ( i + 1 ) <= RuntimeConfig . config . TrackSectionSetPointError ( i ) Then TrackSectionError ( i ) = True Else TrackSectionError ( i ) = False End If ' Set timers If TrackSectionAnalogClear ( i ) = False Then TrackSectionTimer ( i ) = SectionDelay ' Final output logic If TrackSectionAnalogClear ( i ) = True And TrackSectionTimer ( i ) = 0 Then TrackSectionField ( i ) = \"Non-Occupied\" If RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Detect\" Then TrackSectionUnoccupied ( i ) = True ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Occupy\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"UnOccupied\" Then TrackSectionUnoccupied ( i ) = True Else TrackSectionUnoccupied ( i ) = False End If Else TrackSectionField ( i ) = \"Occupied\" If RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Detect\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"Occupy\" Then TrackSectionUnoccupied ( i ) = False ElseIf RuntimeConfig . config . TrackSectionOverrides ( i ) = \"UnOccupied\" Then TrackSectionUnoccupied ( i ) = True Else TrackSectionUnoccupied ( i ) = False End If End If Next End Sub ' Second timer countdown Public Sub SecondTick () For i As Integer = 0 To TrackSectionCount - 1 If Not TrackSectionTimer ( i ) = 0 Then TrackSectionTimer ( i ) -= 1 Next End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/UpdateSettings_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/UpdateSettings.vb \u00b6 Source code \u00b6 Module UpdateSettings Public SettingPassword As String = \"9b24e5a0caf537ea6b95424e3c4b0b9b\" Function TCPUpdateSetting ( ByVal TCPUser As String , ByVal TCPPassword As String , ByVal TCPDevice As String , ByVal TCPDeviceSetting As String ) As String If TCPPassword = SettingPassword Then ' Login If TCPDevice = \"Login\" Then Dim task As Task ( Of Integer ) task = UserManagment . auth ( TCPUser , TCPDeviceSetting ) task . Start () task . Wait () Return task . Result End If ' Log Commands If Not TCPDevice = \"Login\" Then ' TelegramMessageSender . sendMessage ( \"APP COMMAND LOG - \" & TCPUser & \" Updated \" & TCPDevice & \" To \" & TCPDeviceSetting ) AlarmsAndNotifications . UpdateSystemLog ( \"APP COMMAND LOG - \" & TCPUser & \" Updated \" & TCPDevice & \" To \" & TCPDeviceSetting ) End If ' Signals If TCPDevice = \"AJ1E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ2E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ3E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ4E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ7E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ8E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ9E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ16E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ17E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ18E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ21E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ3W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ7W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ8W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ9W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ15W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ16W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ17W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ18W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ22W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S11\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S12\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S14\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S19\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = TCPDeviceSetting Return \"Signal Updated\" End If ' Estop Reset If TCPDevice = \"EStopReset\" Then Safety . EStopReset = True Return \"Command for EStop reset has been recieved\" End If ' Estop If TCPDevice = \"EStop\" Then Safety . EStopSoftware = True Return \"Command for EStop has been recieved\" End If ' Estop If TCPDevice = \"Update\" Then Updater . UpdateNow () Return \"Command for Update has been recieved\" End If ' Audio If TCPDevice = \"Sound1\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainDepartingP1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . DepartingP1SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . DepartingP1SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound2\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainDepartingP2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . DepartingP2SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . DepartingP2SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound3\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainApprochingP1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . ArrivingP1SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . ArrivingP1SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound4\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainApprochingP2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . ArrivingP2SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . ArrivingP2SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound5\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainEnteringSiding () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . SidingSoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . SidingSoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound6\" Then If TCPDeviceSetting = \"Play\" Then Sound . EventSound () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . EventSoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . EventSoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound7\" Then If TCPDeviceSetting = \"Play\" Then Sound . SafetySound () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . SafetySoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . SafetySoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound8\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound1Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound1Enabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound9\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound2Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound2Enabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound10\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound3 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound3Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound3Enabled = False Return \"Audio Disabled\" End If End If ' System Power If TCPDevice = \"Power\" Then If TCPDeviceSetting = \"On\" Then PowerState = \"On\" Return \"System Turned On\" ElseIf TCPDeviceSetting = \"System\" Then PowerState = \"System\" Return \"Systems power set back to default\" ElseIf TCPDeviceSetting = \"Off\" Then PowerState = \"Off\" Return \"System Turned Off\" End If End If ' Buttons If TCPDevice = \"EastBound Platform 1\" Then If TCPDeviceSetting = \"Inner\" Then Buttons . ButtonToggle ( ButtonNames . Button1 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Outer\" Then Buttons . ButtonToggle ( ButtonNames . Button2 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"HeadShunt\" Then Buttons . ButtonToggle ( ButtonNames . Button3 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button4 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Engine Shed\" Then Buttons . ButtonToggle ( ButtonNames . Button5 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Foxhole\" Then Buttons . ButtonToggle ( ButtonNames . Button6 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"EastBound Platform 2\" Then If TCPDeviceSetting = \"Inner\" Then Buttons . ButtonToggle ( ButtonNames . Button10 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Outer\" Then Buttons . ButtonToggle ( ButtonNames . Button11 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button12 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Engine Shed\" Then Buttons . ButtonToggle ( ButtonNames . Button13 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Foxhole\" Then Buttons . ButtonToggle ( ButtonNames . Button14 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"WestBound Platform 1\" Then If TCPDeviceSetting = \"Tunnel\" Then Buttons . ButtonToggle ( ButtonNames . Button7 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button8 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"TurnTable\" Then Buttons . ButtonToggle ( ButtonNames . Button9 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"WestBound Platform 2\" Then If TCPDeviceSetting = \"Tunnel\" Then Buttons . ButtonToggle ( ButtonNames . Button7 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button8 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Remote Platform 1\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button17 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Remote Platform 2\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button18 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Engine Shed\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button19 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"TurnTable\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button20 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"HeadShunt\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button21 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Foxhole\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button22 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Platform Controller\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button23 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Enable Manual\" Then Buttons . ButtonToggle ( ButtonNames . Button25 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"P1 Approach\" Then Buttons . ButtonToggle ( ButtonNames . Button26 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"P2 Approach\" Then Buttons . ButtonToggle ( ButtonNames . Button27 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX1\" Then Buttons . ButtonToggle ( ButtonNames . Button28 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX2\" Then Buttons . ButtonToggle ( ButtonNames . Button29 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX3\" Then Buttons . ButtonToggle ( ButtonNames . Button30 ) = True Return \"Button Request Submitted\" End If End If ' Fault Report If TCPDevice = \"FaultReport\" Then TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , TCPUser & \" has reported the following fault - \" & TCPDeviceSetting ) Return \"Thanks for reporting the fault\" End If ' Points set output If TCPDevice = \"P5aFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P5bFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6aFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6bFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P10Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P11Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P12Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P13Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P14Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P19Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) End If ' Points set Input If TCPDevice = \"P5aReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P5bReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6aReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6bReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P10Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P11Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P12Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P13Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P14Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P19Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) End If Else Return \"APP security key does not match\" End If Return \"ERROR Talk to Tom\" End Function End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/UpdateSettings.vb"},{"location":"mainsystem/Files/UpdateSettings_8vb/#githubsignallingsystemehmr-signalling-systemconfigsupdatesettingsvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/UpdateSettings.vb"},{"location":"mainsystem/Files/UpdateSettings_8vb/#source-code","text":"Module UpdateSettings Public SettingPassword As String = \"9b24e5a0caf537ea6b95424e3c4b0b9b\" Function TCPUpdateSetting ( ByVal TCPUser As String , ByVal TCPPassword As String , ByVal TCPDevice As String , ByVal TCPDeviceSetting As String ) As String If TCPPassword = SettingPassword Then ' Login If TCPDevice = \"Login\" Then Dim task As Task ( Of Integer ) task = UserManagment . auth ( TCPUser , TCPDeviceSetting ) task . Start () task . Wait () Return task . Result End If ' Log Commands If Not TCPDevice = \"Login\" Then ' TelegramMessageSender . sendMessage ( \"APP COMMAND LOG - \" & TCPUser & \" Updated \" & TCPDevice & \" To \" & TCPDeviceSetting ) AlarmsAndNotifications . UpdateSystemLog ( \"APP COMMAND LOG - \" & TCPUser & \" Updated \" & TCPDevice & \" To \" & TCPDeviceSetting ) End If ' Signals If TCPDevice = \"AJ1E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ1E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ2E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ2E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ3E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ4E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ4E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ7E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ8E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ9E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ16E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ17E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ18E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ21E\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ21E ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ3W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ3W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ7W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ7W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ8W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ8W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ9W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ9W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ15W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ15W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ16W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ16W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ17W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ17W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ18W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ18W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"AJ22W\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . AJ22W ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S11\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S11 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S12\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S12 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S14\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S14 ) = TCPDeviceSetting Return \"Signal Updated\" ElseIf TCPDevice = \"S19\" Then RuntimeConfig . config . SignalState ( Definitions . SignalNames . S19 ) = TCPDeviceSetting Return \"Signal Updated\" End If ' Estop Reset If TCPDevice = \"EStopReset\" Then Safety . EStopReset = True Return \"Command for EStop reset has been recieved\" End If ' Estop If TCPDevice = \"EStop\" Then Safety . EStopSoftware = True Return \"Command for EStop has been recieved\" End If ' Estop If TCPDevice = \"Update\" Then Updater . UpdateNow () Return \"Command for Update has been recieved\" End If ' Audio If TCPDevice = \"Sound1\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainDepartingP1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . DepartingP1SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . DepartingP1SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound2\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainDepartingP2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . DepartingP2SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . DepartingP2SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound3\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainApprochingP1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . ArrivingP1SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . ArrivingP1SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound4\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainApprochingP2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . ArrivingP2SoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . ArrivingP2SoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound5\" Then If TCPDeviceSetting = \"Play\" Then Sound . TrainEnteringSiding () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . SidingSoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . SidingSoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound6\" Then If TCPDeviceSetting = \"Play\" Then Sound . EventSound () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . EventSoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . EventSoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound7\" Then If TCPDeviceSetting = \"Play\" Then Sound . SafetySound () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . SafetySoundEnabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . SafetySoundEnabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound8\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound1 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound1Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound1Enabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound9\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound2 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound2Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound2Enabled = False Return \"Audio Disabled\" End If ElseIf TCPDevice = \"Sound10\" Then If TCPDeviceSetting = \"Play\" Then Sound . AUXSound3 () Return \"Audio added to queue\" ElseIf TCPDeviceSetting = \"Enable\" Then RuntimeConfig . config . AUXSound3Enabled = True Return \"Audio Enabled\" ElseIf TCPDeviceSetting = \"Disable\" Then RuntimeConfig . config . AUXSound3Enabled = False Return \"Audio Disabled\" End If End If ' System Power If TCPDevice = \"Power\" Then If TCPDeviceSetting = \"On\" Then PowerState = \"On\" Return \"System Turned On\" ElseIf TCPDeviceSetting = \"System\" Then PowerState = \"System\" Return \"Systems power set back to default\" ElseIf TCPDeviceSetting = \"Off\" Then PowerState = \"Off\" Return \"System Turned Off\" End If End If ' Buttons If TCPDevice = \"EastBound Platform 1\" Then If TCPDeviceSetting = \"Inner\" Then Buttons . ButtonToggle ( ButtonNames . Button1 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Outer\" Then Buttons . ButtonToggle ( ButtonNames . Button2 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"HeadShunt\" Then Buttons . ButtonToggle ( ButtonNames . Button3 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button4 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Engine Shed\" Then Buttons . ButtonToggle ( ButtonNames . Button5 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Foxhole\" Then Buttons . ButtonToggle ( ButtonNames . Button6 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"EastBound Platform 2\" Then If TCPDeviceSetting = \"Inner\" Then Buttons . ButtonToggle ( ButtonNames . Button10 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Outer\" Then Buttons . ButtonToggle ( ButtonNames . Button11 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button12 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Engine Shed\" Then Buttons . ButtonToggle ( ButtonNames . Button13 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Foxhole\" Then Buttons . ButtonToggle ( ButtonNames . Button14 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"WestBound Platform 1\" Then If TCPDeviceSetting = \"Tunnel\" Then Buttons . ButtonToggle ( ButtonNames . Button7 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button8 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"TurnTable\" Then Buttons . ButtonToggle ( ButtonNames . Button9 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"WestBound Platform 2\" Then If TCPDeviceSetting = \"Tunnel\" Then Buttons . ButtonToggle ( ButtonNames . Button7 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Extension\" Then Buttons . ButtonToggle ( ButtonNames . Button8 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Remote Platform 1\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button17 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Remote Platform 2\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button18 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Engine Shed\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button19 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"TurnTable\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button20 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"HeadShunt\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button21 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Foxhole\" Then If TCPDeviceSetting = \"MainLine\" Then Buttons . ButtonToggle ( ButtonNames . Button22 ) = True Return \"Button Request Submitted\" End If ElseIf TCPDevice = \"Platform Controller\" Then If TCPDeviceSetting = \"TRTS\" Then Buttons . ButtonToggle ( ButtonNames . Button23 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"Enable Manual\" Then Buttons . ButtonToggle ( ButtonNames . Button25 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"P1 Approach\" Then Buttons . ButtonToggle ( ButtonNames . Button26 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"P2 Approach\" Then Buttons . ButtonToggle ( ButtonNames . Button27 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX1\" Then Buttons . ButtonToggle ( ButtonNames . Button28 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX2\" Then Buttons . ButtonToggle ( ButtonNames . Button29 ) = True Return \"Button Request Submitted\" ElseIf TCPDeviceSetting = \"AUX3\" Then Buttons . ButtonToggle ( ButtonNames . Button30 ) = True Return \"Button Request Submitted\" End If End If ' Fault Report If TCPDevice = \"FaultReport\" Then TelegramMessageSender . sendMessage ( ChatGroups . OperationalGroup , TCPUser & \" has reported the following fault - \" & TCPDeviceSetting ) Return \"Thanks for reporting the fault\" End If ' Points set output If TCPDevice = \"P5aFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P5a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P5bFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P5b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6aFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P6a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6bFeed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P6b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P10Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P10 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P11Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P11 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P12Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P12 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P13Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P13 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P14Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P14 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P19Feed\" Then RuntimeConfig . config . PointOutputOverrides ( PointNames . P19 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) End If ' Points set Input If TCPDevice = \"P5aReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P5a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P5bReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P5b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6aReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P6a ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P6bReturn\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P6b ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P10Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P10 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P11Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P11 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P12Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P12 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P13Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P13 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P14Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P14 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) ElseIf TCPDevice = \"P19Return\" Then RuntimeConfig . config . PointInputOverrides ( PointNames . P19 ) = TCPDeviceSetting Return ( TCPDevice & \" set to \" & TCPDeviceSetting ) End If Else Return \"APP security key does not match\" End If Return \"ERROR Talk to Tom\" End Function End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/Updater_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Misc/Updater.vb \u00b6 Source code \u00b6 Module Updater Public Sub UpdateNow () If Main . HasUpdate = True Then Errors . NewError ( \"Performing software update!\" ) Dim p As New ProcessStartInfo p . FileName = ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) p . WorkingDirectory = \"C:\\SignllaingSystem\\Updater\" p . UseShellExecute = True p . WindowStyle = ProcessWindowStyle . Normal Dim proc As Process = Process . Start ( p ) End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc/Updater.vb"},{"location":"mainsystem/Files/Updater_8vb/#githubsignallingsystemehmr-signalling-systemmiscupdatervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc/Updater.vb"},{"location":"mainsystem/Files/Updater_8vb/#source-code","text":"Module Updater Public Sub UpdateNow () If Main . HasUpdate = True Then Errors . NewError ( \"Performing software update!\" ) Dim p As New ProcessStartInfo p . FileName = ( \"C:\\SignallingSystem\\Updater\\Signalling-Updater.exe\" ) p . WorkingDirectory = \"C:\\SignllaingSystem\\Updater\" p . UseShellExecute = True p . WindowStyle = ProcessWindowStyle . Normal Dim proc As Process = Process . Start ( p ) End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/UserManagment_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Users/UserManagment.vb \u00b6 Source code \u00b6 Imports System . Security . Cryptography Imports System . Text Imports System . Net . Http Imports System Imports System . Net . Http . Headers Imports utils Imports System . Net Imports System . IO Imports System . Text . Json Imports Newtonsoft . Json Module UserManagment Public LoggedInUserName As String = \"\" Public LoggedInAccessLevel As Integer = 0 Public LoggedInCountDown As Integer = 0 Public LoginTimeOut As Integer = 1 ' Login Private Class AuthentikApiAuthenticationRequest Public component = \"ak-stage-identification\" Public uid_field Public password End Class Private Class AuthentikUserGroupRecord Public name As String Public pk As String End Class Private Class AuthentikUserRecord Public pk As Integer Public username As String Public name As String Public is_active As Boolean Public is_superuser As Boolean Public groups As List ( Of AuthentikUserGroupRecord ) Public email As String Public avatar As String Public uid As String End Class Private Class AuthentikUserApiResponse Public user As AuthentikUserRecord End Class Private Class AuthentikApiResponse Public component Public response_errors End Class Public Async Sub Login ( Username As String , Password As String ) Dim x As Integer x = Await auth ( Username , Password ) If x > 0 Then LoggedInAccessLevel = x LoginTimeOut = 1800 AlarmsAndNotifications . UpdateSystemLog ( Username & \" Logged in with access level - \" & LoggedInAccessLevel ) Else AlarmsAndNotifications . UpdateSystemLog ( Username & \" Attempted Login\" ) End If End Sub ' Logout Public Function Logout () AlarmsAndNotifications . UpdateSystemLog ( LoggedInUserName & \" Logged Out\" ) LoggedInUserName = \"\" LoggedInAccessLevel = 0 LoggedInCountDown = 0 PopUpConfig . Close () Return True End Function Public Async Function auth ( Username As String , Password As String ) As Task ( Of Integer ) Dim client As HttpClient Dim requestMessage As HttpRequestMessage Dim responseMessage As HttpResponseMessage Dim responseBody As String Dim authMessageBody As AuthentikApiAuthenticationRequest Dim r As AuthentikApiResponse Dim user As AuthentikUserRecord Dim authLevel As Integer = 0 Try client = New HttpClient () client . BaseAddress = New Uri ( \"https://sso.ehmr.org.uk/api/v3/\" ) client . DefaultRequestHeaders . Add ( \"User-Agent\" , \"signallingsystem/0.1\" ) authMessageBody = New AuthentikApiAuthenticationRequest () authMessageBody . uid_field = Username authMessageBody . password = Password requestMessage = New HttpRequestMessage ( HttpMethod . Post , \"flows/executor/default-authentication-flow/\" ) requestMessage . Content = New StringContent ( JsonConvert . SerializeObject ( authMessageBody ), Encoding . UTF8 , \"application/json\" ) responseMessage = Await client . SendAsync ( requestMessage ) responseBody = Await responseMessage . Content . ReadAsStringAsync () r = JsonConvert . DeserializeObject ( Of AuthentikApiResponse )( responseBody ) If Not r . component = \"xak-flow-redirect\" Then Return - 1 End If requestMessage = New HttpRequestMessage ( HttpMethod . Get , \"core/users/me/\" ) responseMessage = Await client . SendAsync ( requestMessage ) responseBody = Await responseMessage . Content . ReadAsStringAsync () user = JsonConvert . DeserializeObject ( Of AuthentikUserApiResponse )( responseBody ). user For Each group In user . groups If group . name = \"Signalling Level 3\" Then authLevel = 3 ElseIf group . name = \"Signalling Level 2\" Then authLevel = 2 ElseIf group . name = \"Signalling Level 1\" Then authLevel = 1 End If Next If authLevel = 0 Then Return 0 End If LoggedInUserName = user . name Return authLevel Catch e As Exception ' MsgBox ( \"Exception: \" + e . ToString ()) End Try End Function ' Timer Public Sub UserManagmentSecoundTick () If Not LoginTimeOut = 0 Then LoginTimeOut -= 1 If Mode = LogicModeComputer And LoginTimeOut = 0 And LoggedInAccessLevel > 0 Then Logout () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Users/UserManagment.vb"},{"location":"mainsystem/Files/UserManagment_8vb/#githubsignallingsystemehmr-signalling-systemusersusermanagmentvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Users/UserManagment.vb"},{"location":"mainsystem/Files/UserManagment_8vb/#source-code","text":"Imports System . Security . Cryptography Imports System . Text Imports System . Net . Http Imports System Imports System . Net . Http . Headers Imports utils Imports System . Net Imports System . IO Imports System . Text . Json Imports Newtonsoft . Json Module UserManagment Public LoggedInUserName As String = \"\" Public LoggedInAccessLevel As Integer = 0 Public LoggedInCountDown As Integer = 0 Public LoginTimeOut As Integer = 1 ' Login Private Class AuthentikApiAuthenticationRequest Public component = \"ak-stage-identification\" Public uid_field Public password End Class Private Class AuthentikUserGroupRecord Public name As String Public pk As String End Class Private Class AuthentikUserRecord Public pk As Integer Public username As String Public name As String Public is_active As Boolean Public is_superuser As Boolean Public groups As List ( Of AuthentikUserGroupRecord ) Public email As String Public avatar As String Public uid As String End Class Private Class AuthentikUserApiResponse Public user As AuthentikUserRecord End Class Private Class AuthentikApiResponse Public component Public response_errors End Class Public Async Sub Login ( Username As String , Password As String ) Dim x As Integer x = Await auth ( Username , Password ) If x > 0 Then LoggedInAccessLevel = x LoginTimeOut = 1800 AlarmsAndNotifications . UpdateSystemLog ( Username & \" Logged in with access level - \" & LoggedInAccessLevel ) Else AlarmsAndNotifications . UpdateSystemLog ( Username & \" Attempted Login\" ) End If End Sub ' Logout Public Function Logout () AlarmsAndNotifications . UpdateSystemLog ( LoggedInUserName & \" Logged Out\" ) LoggedInUserName = \"\" LoggedInAccessLevel = 0 LoggedInCountDown = 0 PopUpConfig . Close () Return True End Function Public Async Function auth ( Username As String , Password As String ) As Task ( Of Integer ) Dim client As HttpClient Dim requestMessage As HttpRequestMessage Dim responseMessage As HttpResponseMessage Dim responseBody As String Dim authMessageBody As AuthentikApiAuthenticationRequest Dim r As AuthentikApiResponse Dim user As AuthentikUserRecord Dim authLevel As Integer = 0 Try client = New HttpClient () client . BaseAddress = New Uri ( \"https://sso.ehmr.org.uk/api/v3/\" ) client . DefaultRequestHeaders . Add ( \"User-Agent\" , \"signallingsystem/0.1\" ) authMessageBody = New AuthentikApiAuthenticationRequest () authMessageBody . uid_field = Username authMessageBody . password = Password requestMessage = New HttpRequestMessage ( HttpMethod . Post , \"flows/executor/default-authentication-flow/\" ) requestMessage . Content = New StringContent ( JsonConvert . SerializeObject ( authMessageBody ), Encoding . UTF8 , \"application/json\" ) responseMessage = Await client . SendAsync ( requestMessage ) responseBody = Await responseMessage . Content . ReadAsStringAsync () r = JsonConvert . DeserializeObject ( Of AuthentikApiResponse )( responseBody ) If Not r . component = \"xak-flow-redirect\" Then Return - 1 End If requestMessage = New HttpRequestMessage ( HttpMethod . Get , \"core/users/me/\" ) responseMessage = Await client . SendAsync ( requestMessage ) responseBody = Await responseMessage . Content . ReadAsStringAsync () user = JsonConvert . DeserializeObject ( Of AuthentikUserApiResponse )( responseBody ). user For Each group In user . groups If group . name = \"Signalling Level 3\" Then authLevel = 3 ElseIf group . name = \"Signalling Level 2\" Then authLevel = 2 ElseIf group . name = \"Signalling Level 1\" Then authLevel = 1 End If Next If authLevel = 0 Then Return 0 End If LoggedInUserName = user . name Return authLevel Catch e As Exception ' MsgBox ( \"Exception: \" + e . ToString ()) End Try End Function ' Timer Public Sub UserManagmentSecoundTick () If Not LoginTimeOut = 0 Then LoginTimeOut -= 1 If Mode = LogicModeComputer And LoginTimeOut = 0 And LoggedInAccessLevel > 0 Then Logout () End Sub End Module Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/WestBoundComputer_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundComputer.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Class WestBoundComputer Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP1SoundPlayed3 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainApprochingP2SoundPlayed2 As Boolean Shared TrainDepartingP1SoundPlayedAJ15W As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared TrainEnteringSidingSoundPlayedAJ1 As Boolean Shared TrainEnteringSidingSoundPlayedAJ15 As Boolean Shared TrainEnteringSidingSoundPlayedAJ21 As Boolean Shared P1CombinedClear As Boolean = False ' Sounds Public Shared Sub Sounds () ' Approaching P1 from Inner If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approaching P1 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approaching P2 from Inner ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False ' Approaching P2 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed2 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed2 = True Then TrainApprochingP2SoundPlayed2 = False End If End Sub ' Computer logic Public Shared Sub Computer () If RuntimeConfig . config . P1Combine = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then P1CombinedClear = True Else P1CombinedClear = False End If Else P1CombinedClear = True End If AJ1ELogic () AJ2ELogic () AJ3ELogic () AJ4ELogic () AJ7ELogic () AJ8ELogic () AJ9ELogic () AJ16ELogic () AJ17ELogic () AJ18ELogic () AJ21ELogic () AJ3WLogic () AJ7WLogic () AJ8WLogic () AJ9WLogic () AJ15WLogic () AJ16WLogic () AJ17WLogic () AJ18WLogic () AJ22WLogic () S11Logic () S12Logic () S14Logic () S19Logic () End Sub ' Main Signals Public Shared Sub AJ1ELogic () If Initializations . AJ1Initiated = True Then ' Timer start for station If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Then ' HeadShunt Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EHeadShunt = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue End If End If ' Head Shunt Route 3 If Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EHeadShunt = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button3 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtShunt End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . ArrivingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button3 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Occupied Then AJ1EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = 0 Then AJ1EReset = True ' Reset everything relating to signal If AJ1EReset = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger TrainEnteringSidingSoundPlayedAJ1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue AJ1EReset = False End If End If End Sub Public Shared Sub AJ2ELogic () If Initializations . AJ2Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ3ELogic () If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ4ELogic () If Initializations . AJ4Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ7ELogic () If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ8ELogic () If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ9ELogic () If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ16ELogic () If Initializations . AJ16Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ17ELogic () If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ18ELogic () If Initializations . AJ18Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ21ELogic () If Initializations . AJ21Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub ' WB Signals Public Shared Sub AJ3WLogic () If Initializations . AJ3Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If AJ3WOuterRequest = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = AJ3WDelayValue AJ3WOuter = True AJ3WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = SectionErrorTimerCountdown AJ3WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = 0 And AJ3WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtClear AJ8WOuterRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then AJ3WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = 0 Then AJ3WReset = True ' Reset everything relating to signal If AJ3WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3WOuter = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue AJ3WReset = False End If End If End Sub Public Shared Sub AJ7WLogic () If Initializations . AJ7Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If AJ7WOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = AJ7WDelayValue AJ7WOuter = True AJ7WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = SectionErrorTimerCountdown AJ7WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = 0 And AJ7WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtClear Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then AJ7WReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = 0 Then AJ7WReset = True ' Reset everything relating to signal If AJ7WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7WOuter = False AJ7WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue AJ7WReset = False End If End If End Sub Public Shared Sub AJ8WLogic () If Initializations . AJ8Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If AJ8WOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = AJ8WDelayValue AJ8WOuter = True AJ8WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = SectionErrorTimerCountdown AJ8WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = 0 And AJ8WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtClear End If AJ16WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then AJ8WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = 0 Then AJ8WReset = True ' Reset everything relating to signal If AJ8WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8WOuter = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue AJ8WReset = False End If End If End Sub Public Shared Sub AJ9WLogic () If Initializations . AJ9Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If AJ9WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = AJ9WDelayValue AJ9WInner = True AJ9WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 = SectionIsClear ) Then ' And tracksection ( sectionnames . sectionNO14 ) = clear If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtClear End If ' AJ18W NEED TO SET ROUTE HERE Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Occupied Then AJ9WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = 0 Then AJ9WReset = True ' Reset everything relating to signal If AJ9WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF AJ9WInner = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue AJ9WReset = False End If End If End Sub Public Shared Sub AJ15WLogic () If Initializations . AJ15Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button8 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Then ' TurnTable Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WTurnTable = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue End If End If ' Outer If Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And TunnelSafe = True Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button7 ) = False End If End If If TrainDepartingP1SoundPlayedAJ15W = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayedAJ15W = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button7 ) = True End If ' Extention ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button8 ) = False End If End If If TrainDepartingP1SoundPlayedAJ15W = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayedAJ15W = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button8 ) = True End If ' Turntable ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WTurnTable = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt Buttons . ButtonFlash ( ButtonNames . Button29 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button9 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Occupied Then AJ15WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = 0 Then AJ15WReset = True ' Reset everything relating to signal If AJ15WReset = True Then TrainEnteringSidingSoundPlayedAJ15 = False TrainDepartingP1SoundPlayedAJ15W = False Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WOuter = False AJ15WExtention = False AJ15WTurnTable = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue AJ15WReset = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If End Sub Public Shared Sub AJ16WLogic () If Initializations . AJ16Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If AJ16WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16WDelayValue AJ16WInner = True AJ16WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = SectionErrorTimerCountdown AJ16WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue End If End If ' Route 1 Inner If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtClear End If AJ17WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Then AJ16WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = ( StaticValues . SignalTimeOut \\ 15 ) Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = 0 Then AJ16WReset = True ' Reset everything relating to signal If AJ16WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16WInner = False Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue AJ16WReset = False End If End If End Sub Public Shared Sub AJ17WLogic () If Initializations . AJ17Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If AJ17WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = AJ17WDelayValue AJ17WInner = True AJ17WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = SectionErrorTimerCountdown AJ17WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = 0 And AJ17WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtClear AJ9WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Occupied Then AJ17WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = 0 Then AJ17WReset = True ' Reset everything relating to signal If AJ17WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17WInner = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue AJ17WReset = False End If End If End Sub Public Shared Sub AJ18WLogic () If Initializations . AJ18Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button25 ) = True Then ' platform 1 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 2 AJ18WPlatform1 = True Buttons . ButtonFlash ( ButtonNames . Button26 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True And Buttons . ButtonRequest ( ButtonNames . Button25 ) = True Then ' platform 2 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 2 AJ18WPlatform2 = True Buttons . ButtonFlash ( ButtonNames . Button27 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 auto Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18WDelayValue AJ18WPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Error Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = SectionErrorTimerCountdown AJ18WPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue End If End If ' platform 1 Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18WPlatform1 = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And P1CombinedClear = True Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtClear End If AJ7WOuterRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger End If ' platform 2 Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18WPlatform2 = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And ( TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Or PointReturns ( PointNames . P6b ) = PointInNormal ) And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtClear End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Then AJ18WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = 0 Then AJ18WReset = True ' Reset everything relating to signal If AJ18WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18WPlatform1 = False AJ18WPlatform2 = False Buttons . ButtonRequest ( ButtonNames . Button26 ) = False Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button26 ) = False Buttons . ButtonFlash ( ButtonNames . Button27 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue AJ18WReset = False End If End If End Sub Public Shared Sub AJ22WLogic () If Initializations . AJ22Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button15 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = AJ22WDelayValue AJ22WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button16 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = AJ22WDelayValue AJ22WExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue End If End If ' Outer If Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = 0 And AJ22WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt ) And TunnelSafe = True Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button15 ) = False End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button15 ) = True End If ' Extention ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = 0 And AJ22WExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt ) Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button16 ) = False End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button16 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied Then AJ22WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = 0 Then AJ22WReset = True ' Reset everything relating to signal If AJ22WReset = True Then TrainDepartingP2SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ22WOuter = False AJ22WExtention = False Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue AJ22WReset = False Buttons . ButtonRequest ( ButtonNames . Button15 ) = False Buttons . ButtonRequest ( ButtonNames . Button16 ) = False End If End If End Sub ' Shunt Signals Public Shared Sub S11Logic () If Initializations . S11Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button21 ) = True And AllowDeparting Then ' Outer S11Out = True End If Dim S11ClearInterlock As Boolean = False If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then S11ClearInterlock = True Else S11ClearInterlock = False End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then S11ClearInterlock = True Else S11ClearInterlock = False End If Else S11ClearInterlock = True End If ' HeadShunt If S11Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And S11ClearInterlock = True And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button21 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtShunt End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button21 ) = True SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button21 ) = False SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Then S11Reset = True End If ' Reset everything relating to signal If S11Reset = True Then S11Out = False Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button21 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue TrainApprochingP1SoundPlayed2 = False S11Reset = False End If End If End Sub Public Shared Sub S12Logic () If Initializations . S12Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button20 ) = True And AllowDeparting Then ' Outer S12Out = True End If ' TurnTable If S12Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button20 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtShunt End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button20 ) = True SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button20 ) = False SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Then S12Reset = True End If ' Reset everything relating to signal If S12Reset = True Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger S12Out = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button20 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue TrainApprochingP1SoundPlayed3 = False S12Reset = False End If End If End Sub Public Shared Sub S14Logic () If Initializations . S14Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button22 ) = True And AllowDeparting Then ' Outer S14Out = True End If ' TurnTable If S14Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtShunt End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button22 ) = True SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button22 ) = False SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Occupied Then S14Reset = True End If End If ' Reset everything relating to signal If S14Reset = True Then S14Out = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button22 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue S14Reset = False End If End If End Sub Public Shared Sub S19Logic () If Initializations . S19Initiated = True And AllowDeparting Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button19 ) = True Then ' Outer S19Out = True End If ' Engine shed If S19Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtShunt End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button19 ) = True SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button19 ) = False SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Occupied Then S19Reset = True End If End If ' Reset everything relating to signal If S19Reset = True Then S19Out = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button19 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue S19Reset = False End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundComputer.vb"},{"location":"mainsystem/Files/WestBoundComputer_8vb/#githubsignallingsystemehmr-signalling-systemlogicwestboundcomputervb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundComputer.vb"},{"location":"mainsystem/Files/WestBoundComputer_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Imports EHMR_Signalling_System . LogicStart Public Class WestBoundComputer Shared ReadOnly Occupied As Boolean = False Shared ReadOnly Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP1SoundPlayed3 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainApprochingP2SoundPlayed2 As Boolean Shared TrainDepartingP1SoundPlayedAJ15W As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared TrainEnteringSidingSoundPlayedAJ1 As Boolean Shared TrainEnteringSidingSoundPlayedAJ15 As Boolean Shared TrainEnteringSidingSoundPlayedAJ21 As Boolean Shared P1CombinedClear As Boolean = False ' Sounds Public Shared Sub Sounds () ' Approaching P1 from Inner If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approaching P1 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approaching P2 from Inner ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False ' Approaching P2 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed2 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed2 = True Then TrainApprochingP2SoundPlayed2 = False End If End Sub ' Computer logic Public Shared Sub Computer () If RuntimeConfig . config . P1Combine = True Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then P1CombinedClear = True Else P1CombinedClear = False End If Else P1CombinedClear = True End If AJ1ELogic () AJ2ELogic () AJ3ELogic () AJ4ELogic () AJ7ELogic () AJ8ELogic () AJ9ELogic () AJ16ELogic () AJ17ELogic () AJ18ELogic () AJ21ELogic () AJ3WLogic () AJ7WLogic () AJ8WLogic () AJ9WLogic () AJ15WLogic () AJ16WLogic () AJ17WLogic () AJ18WLogic () AJ22WLogic () S11Logic () S12Logic () S14Logic () S19Logic () End Sub ' Main Signals Public Shared Sub AJ1ELogic () If Initializations . AJ1Initiated = True Then ' Timer start for station If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button3 ) = True Then ' HeadShunt Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = AJ1EDelayValue AJ1EHeadShunt = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue End If End If ' Head Shunt Route 3 If Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = 0 And AJ1EHeadShunt = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button3 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtShunt End If End If If TrainEnteringSidingSoundPlayedAJ1 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ1 = True If RuntimeConfig . config . ArrivingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button3 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = Occupied Then AJ1EReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ1E ) = 0 Then AJ1EReset = True ' Reset everything relating to signal If AJ1EReset = True Then SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger TrainEnteringSidingSoundPlayedAJ1 = False Signals . SignalTimer ( Definitions . SignalNames . AJ1E ) = TimerDisabled SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ1E ) = TimerDisabled AJ1EInner = False AJ1EOuter = False AJ1EHeadShunt = False AJ1EExtention = False AJ1EEngineShed = False AJ1EFoxHole = False Buttons . ButtonRequest ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button1 ) = False Buttons . ButtonFlash ( ButtonNames . Button2 ) = False Buttons . ButtonFlash ( ButtonNames . Button3 ) = False Buttons . ButtonFlash ( ButtonNames . Button4 ) = False Buttons . ButtonFlash ( ButtonNames . Button5 ) = False Buttons . ButtonFlash ( ButtonNames . Button6 ) = False Buttons . ButtonFlash ( ButtonNames . Button17 ) = False Buttons . ButtonFlash ( ButtonNames . Button23 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ1E ) = SafeToClearValue AJ1EReset = False End If End If End Sub Public Shared Sub AJ2ELogic () If Initializations . AJ2Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ2E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ3ELogic () If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ4ELogic () If Initializations . AJ4Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ7ELogic () If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ8ELogic () If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ9ELogic () If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ16ELogic () If Initializations . AJ16Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ17ELogic () If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ18ELogic () If Initializations . AJ18Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub Public Shared Sub AJ21ELogic () If Initializations . AJ21Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ21E ) = SignalAtDanger ' Keep WB signal at signal at danger End If End Sub ' WB Signals Public Shared Sub AJ3WLogic () If Initializations . AJ3Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If AJ3WOuterRequest = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = AJ3WDelayValue AJ3WOuter = True AJ3WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = SectionErrorTimerCountdown AJ3WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = 0 And AJ3WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtClear AJ8WOuterRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ3W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then AJ3WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ3E ) = 0 Then AJ3WReset = True ' Reset everything relating to signal If AJ3WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ3E ) = TimerDisabled AJ3WOuter = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ3W ) = SafeToClearValue AJ3WReset = False End If End If End Sub Public Shared Sub AJ7WLogic () If Initializations . AJ7Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If AJ7WOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = AJ7WDelayValue AJ7WOuter = True AJ7WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = SectionErrorTimerCountdown AJ7WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = 0 And AJ7WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtClear Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ7W ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then AJ7WReset = True End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ7E ) = 0 Then AJ7WReset = True ' Reset everything relating to signal If AJ7WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ7E ) = TimerDisabled AJ7WOuter = False AJ7WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ7W ) = SafeToClearValue AJ7WReset = False End If End If End Sub Public Shared Sub AJ8WLogic () If Initializations . AJ8Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If AJ8WOuterRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = AJ8WDelayValue AJ8WOuter = True AJ8WOuterRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = SectionErrorTimerCountdown AJ8WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = 0 And AJ8WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And SignalOutputState ( Definitions . SignalNames . S19 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P19 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtClear End If AJ16WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then AJ8WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ8E ) = 0 Then AJ8WReset = True ' Reset everything relating to signal If AJ8WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ8E ) = TimerDisabled AJ8WOuter = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ8W ) = SafeToClearValue AJ8WReset = False End If End If End Sub Public Shared Sub AJ9WLogic () If Initializations . AJ9Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If AJ9WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = AJ9WDelayValue AJ9WInner = True AJ9WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = SectionErrorTimerCountdown AJ9WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue End If End If ' Outer Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = 0 And AJ9WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . S14 ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 = SectionIsClear ) Then ' And tracksection ( sectionnames . sectionNO14 ) = clear If Points . PointReturns ( PointNames . P14 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtClear End If ' AJ18W NEED TO SET ROUTE HERE Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Occupied Then AJ9WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ9E ) = 0 Then AJ9WReset = True ' Reset everything relating to signal If AJ9WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ9E ) = TimerDisabled Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF AJ9WInner = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ9W ) = SafeToClearValue AJ9WReset = False End If End If End Sub Public Shared Sub AJ15WLogic () If Initializations . AJ15Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button8 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Then ' TurnTable Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = AJ15WDelayValue AJ15WTurnTable = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue End If End If ' Outer If Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger And TunnelSafe = True Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button7 ) = False End If End If If TrainDepartingP1SoundPlayedAJ15W = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayedAJ15W = True If RuntimeConfig . config . DepartingP1SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button7 ) = True End If ' Extention ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInNormal And Points . PointReturns ( PointNames . P13 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button8 ) = False End If End If If TrainDepartingP1SoundPlayedAJ15W = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayedAJ15W = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P13 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button8 ) = True End If ' Turntable ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = 0 And AJ15WTurnTable = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . S12 ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt Buttons . ButtonFlash ( ButtonNames . Button29 ) = False End If End If If TrainEnteringSidingSoundPlayedAJ15 = False Then Sound . TrainEnteringSiding () TrainEnteringSidingSoundPlayedAJ15 = True SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ15W ) = AnnouncementDelay End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button9 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Or TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Occupied Or PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = Occupied Then AJ15WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ15W ) = 0 Then AJ15WReset = True ' Reset everything relating to signal If AJ15WReset = True Then TrainEnteringSidingSoundPlayedAJ15 = False TrainDepartingP1SoundPlayedAJ15W = False Signals . SignalTimer ( Definitions . SignalNames . AJ15W ) = TimerDisabled AJ15WOuter = False AJ15WExtention = False AJ15WTurnTable = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ15W ) = SafeToClearValue AJ15WReset = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False End If End If End Sub Public Shared Sub AJ16WLogic () If Initializations . AJ16Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If AJ16WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = SectionIsOccupied Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = AJ16WDelayValue AJ16WInner = True AJ16WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then ' OuterError Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = SectionErrorTimerCountdown AJ16WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue End If End If ' Route 1 Inner If Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = 0 And AJ16WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P6a ) = PointInReverse And PointReturns ( PointNames . P6b ) = PointInReverse And Points . PointReturns ( PointNames . P10 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtClear End If AJ17WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P6b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P10 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied Then AJ16WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = ( StaticValues . SignalTimeOut \\ 15 ) Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ16E ) = 0 Then AJ16WReset = True ' Reset everything relating to signal If AJ16WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ16E ) = TimerDisabled AJ16WInner = False Points . PointRequestedOutputs ( PointNames . P6b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ16W ) = SafeToClearValue AJ16WReset = False End If End If End Sub Public Shared Sub AJ17WLogic () If Initializations . AJ17Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If AJ17WInnerRequest = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = SectionIsOccupied Then ' Inner Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = AJ17WDelayValue AJ17WInner = True AJ17WInnerRequest = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then ' InnerError Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = SectionErrorTimerCountdown AJ17WInner = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue End If End If ' Inner Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = 0 And AJ17WInner = True And TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtClear AJ9WInnerRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ17W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Occupied Then AJ17WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ17E ) = 0 Then AJ17WReset = True ' Reset everything relating to signal If AJ17WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ17E ) = TimerDisabled AJ17WInner = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ17W ) = SafeToClearValue AJ17WReset = False End If End If End Sub Public Shared Sub AJ18WLogic () If Initializations . AJ18Initiated = True Then ' Timer start If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled And SignalOutputState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button26 ) = True And Buttons . ButtonRequest ( ButtonNames . Button25 ) = True Then ' platform 1 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 2 AJ18WPlatform1 = True Buttons . ButtonFlash ( ButtonNames . Button26 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button27 ) = True And Buttons . ButtonRequest ( ButtonNames . Button25 ) = True Then ' platform 2 Manual Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 2 AJ18WPlatform2 = True Buttons . ButtonFlash ( ButtonNames . Button27 ) = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = False And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 auto Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = AJ18WDelayValue AJ18WPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = False And Buttons . ButtonRequest ( ButtonNames . Button25 ) = False Then ' platform 1 Error Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = SectionErrorTimerCountdown AJ18WPlatform1 = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue End If End If ' platform 1 Route 1 If Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18WPlatform1 = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger And SignalSystemState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . S11 ) = SignalAtDanger And P1CombinedClear = True Then If Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse And Points . PointReturns ( PointNames . P11 ) = PointInNormal Then Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtClear End If AJ7WOuterRequest = True Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P5a ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P5b ) = PointToReverse Points . PointRequestedOutputs ( PointNames . P11 ) = PointToNormal SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger End If ' platform 2 Route 2 ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = 0 And AJ18WPlatform2 = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP5a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP5b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6a ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP6b ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP10 ) = True And ( TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear Or PointReturns ( PointNames . P6b ) = PointInNormal ) And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P6a ) = PointInNormal And PointReturns ( PointNames . P5b ) = PointInNormal And Points . PointReturns ( PointNames . P10 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtClear End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P6a ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P5b ) = PointToNormal Points . PointRequestedOutputs ( PointNames . P10 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied Then AJ18WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ18E ) = 0 Then AJ18WReset = True ' Reset everything relating to signal If AJ18WReset = True Then Signals . SignalTimer ( Definitions . SignalNames . AJ18E ) = TimerDisabled AJ18WPlatform1 = False AJ18WPlatform2 = False Buttons . ButtonRequest ( ButtonNames . Button26 ) = False Buttons . ButtonRequest ( ButtonNames . Button27 ) = False Points . PointRequestedOutputs ( PointNames . P5a ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P5b ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P10 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Points . PointRequestedOutputs ( PointNames . P6a ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button26 ) = False Buttons . ButtonFlash ( ButtonNames . Button27 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . AJ18W ) = SafeToClearValue AJ18WReset = False End If End If End Sub Public Shared Sub AJ22WLogic () If Initializations . AJ22Initiated = True Then ' Timer start If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied And Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled And AllowDeparting Then If Buttons . ButtonRequest ( ButtonNames . Button15 ) = True Then ' Outer Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = AJ22WDelayValue AJ22WOuter = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue ElseIf Buttons . ButtonRequest ( ButtonNames . Button16 ) = True Then ' Extension Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = AJ22WDelayValue AJ22WExtention = True SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue End If End If ' Outer If Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = 0 And AJ22WOuter = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt ) And TunnelSafe = True Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button15 ) = False End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button15 ) = True End If ' Extention ElseIf Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = 0 And AJ22WExtention = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP13 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionDE ) = Clear And ( SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Or SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtShunt ) Then If Points . PointReturns ( PointNames . P13 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = 0 Then If SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 0 Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtClear AJ3WOuterRequest = True Buttons . ButtonFlash ( ButtonNames . Button16 ) = False End If End If If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True If RuntimeConfig . config . DepartingP2SoundEnabled = True Then SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = AnnouncementDelay Else SignalTimerAnnouncementDelay ( Definitions . SignalNames . AJ22W ) = 1 End If End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P13 ) = PointToReverse SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger Buttons . ButtonFlash ( ButtonNames . Button16 ) = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue SignalSystemState ( Definitions . SignalNames . AJ22W ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Occupied Then AJ22WReset = True End If End If ' Signal Timeout If Not Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Occupied Then Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = StaticValues . SignalTimeOut Else Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = TimerDisabled End If If Signals . SignalTimeOut ( Definitions . SignalNames . AJ22W ) = 0 Then AJ22WReset = True ' Reset everything relating to signal If AJ22WReset = True Then TrainDepartingP2SoundPlayed = False Signals . SignalTimer ( Definitions . SignalNames . AJ22W ) = TimerDisabled AJ22WOuter = False AJ22WExtention = False Points . PointRequestedOutputs ( PointNames . P13 ) = PointToOFF SignalSafeToClearTimer ( Definitions . SignalNames . AJ22W ) = SafeToClearValue AJ22WReset = False Buttons . ButtonRequest ( ButtonNames . Button15 ) = False Buttons . ButtonRequest ( ButtonNames . Button16 ) = False End If End If End Sub ' Shunt Signals Public Shared Sub S11Logic () If Initializations . S11Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button21 ) = True And AllowDeparting Then ' Outer S11Out = True End If Dim S11ClearInterlock As Boolean = False If Points . PointReturns ( PointNames . P5a ) = PointInNormal And PointReturns ( PointNames . P6b ) = PointInNormal Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ16W ) = SignalAtDanger Then S11ClearInterlock = True Else S11ClearInterlock = False End If ElseIf Points . PointReturns ( PointNames . P5a ) = PointInReverse And PointReturns ( PointNames . P5b ) = PointInReverse Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And SignalSystemState ( Definitions . SignalNames . AJ18W ) = SignalAtDanger Then S11ClearInterlock = True Else S11ClearInterlock = False End If Else S11ClearInterlock = True End If ' HeadShunt If S11Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And S11ClearInterlock = True And SignalOutputState ( Definitions . SignalNames . AJ1E ) = SignalAtDanger And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP11 ) = True And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear Then If Points . PointReturns ( PointNames . P11 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button21 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtShunt End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = False And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P11 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button21 ) = True SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button21 ) = False SignalSystemState ( Definitions . SignalNames . S11 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionA11 ) = Occupied Then S11Reset = True End If ' Reset everything relating to signal If S11Reset = True Then S11Out = False Points . PointRequestedOutputs ( PointNames . P11 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button21 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S11 ) = SafeToClearValue TrainApprochingP1SoundPlayed2 = False S11Reset = False End If End If End Sub Public Shared Sub S12Logic () If Initializations . S12Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button20 ) = True And AllowDeparting Then ' Outer S12Out = True End If ' TurnTable If S12Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And SignalOutputState ( Definitions . SignalNames . AJ4E ) = SignalAtDanger And PointSectionUnoccupied ( PointSectionNames . SectionP12 ) = True And SignalOutputState ( Definitions . SignalNames . AJ15W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P12 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonFlash ( ButtonNames . Button20 ) = False If SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtShunt End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P12 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button20 ) = True SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button20 ) = False SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger End If If TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Occupied Then S12Reset = True End If ' Reset everything relating to signal If S12Reset = True Then SignalSystemState ( Definitions . SignalNames . S12 ) = SignalAtDanger S12Out = False Points . PointRequestedOutputs ( PointNames . P12 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button20 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S12 ) = SafeToClearValue TrainApprochingP1SoundPlayed3 = False S12Reset = False End If End If End Sub Public Shared Sub S14Logic () If Initializations . S14Initiated = True Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button22 ) = True And AllowDeparting Then ' Outer S14Out = True End If ' TurnTable If S14Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP14 ) = True And SignalOutputState ( Definitions . SignalNames . AJ18E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ9W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P14 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtShunt End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P14 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button22 ) = True SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button22 ) = False SignalSystemState ( Definitions . SignalNames . S14 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = Occupied Then S14Reset = True End If End If ' Reset everything relating to signal If S14Reset = True Then S14Out = False Points . PointRequestedOutputs ( PointNames . P14 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button22 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S14 ) = SafeToClearValue S14Reset = False End If End If End Sub Public Shared Sub S19Logic () If Initializations . S19Initiated = True And AllowDeparting Then ' Timer start If Buttons . ButtonRequest ( ButtonNames . Button19 ) = True Then ' Outer S19Out = True End If ' Engine shed If S19Out = True And TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And PointSectionUnoccupied ( PointSectionNames . SectionP19 ) = True And SignalOutputState ( Definitions . SignalNames . AJ16E ) = SignalAtDanger And SignalOutputState ( Definitions . SignalNames . AJ8W ) = SignalAtDanger Then If Points . PointReturns ( PointNames . P19 ) = PointInReverse Then Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF If SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = 0 Then SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtShunt End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Points . PointRequestedOutputs ( PointNames . P19 ) = PointToReverse Buttons . ButtonFlash ( ButtonNames . Button19 ) = True SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger End If Else SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue Buttons . ButtonFlash ( ButtonNames . Button19 ) = False SignalSystemState ( Definitions . SignalNames . S19 ) = SignalAtDanger If TrackSectionUnoccupied ( TrackSectionNames . SectionC19 ) = Occupied Then S19Reset = True End If End If ' Reset everything relating to signal If S19Reset = True Then S19Out = False Points . PointRequestedOutputs ( PointNames . P19 ) = PointToOFF Buttons . ButtonRequest ( ButtonNames . Button19 ) = False SignalSafeToClearTimer ( Definitions . SignalNames . S19 ) = SafeToClearValue S19Reset = False End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/WestBoundManual_8vb/","text":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundManual.vb \u00b6 Source code \u00b6 Imports EHMR_Signalling_System . DigitalDeviceAddress Public Class WestBoundManual Const Occupied As Boolean = False Const Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP1SoundPlayed3 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainApprochingP2SoundPlayed2 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared AJ15AllowDispatch As Boolean Public Shared Sub Manual () ' Sounds ' Approching P1 from Inner If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approching P1 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approching P1 from Headshunt ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed3 = True Then TrainApprochingP1SoundPlayed3 = False ' Approching P2 from Inner ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False ' Approching P2 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed2 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed2 = True Then TrainApprochingP2SoundPlayed2 = False End If ' Lever 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ1Initiated = True Then If Lever ( LeverNames . Lever1 ) = \"Normal\" Then LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever1 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever1 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" End If End If ' Lever 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ2Initiated = True Then If Lever ( LeverNames . Lever2 ) = \"Normal\" Then LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever2 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever2 ) = False SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If End If ' Lever 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" If Lever ( LeverNames . Lever3 ) = \"Normal\" And TunnelSafe = True And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever3 ) = False SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" LeverRestroke ( LeverNames . Lever3 ) = True ElseIf Lever ( LeverNames . Lever3 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever3 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever3 ) = False Then If LeverRestroke ( LeverNames . Lever3 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" LeverRestroke ( LeverNames . Lever3 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever3 ) = True SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If End If ' Lever 4 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ4Initiated = True Then If Lever ( LeverNames . Lever4 ) = \"Normal\" Then LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever4 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever4 ) = False SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If End If ' Lever 5 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point5Initiated = True Then If Lever ( LeverNames . Lever5 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" And Lever ( LeverNames . Lever18 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever5 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever5 ) = True Points . PointRequestedOutputs ( PointNames . P5a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"OFF\" End If End If ' Lever 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point6Initiated = True Then If Lever ( LeverNames . Lever6 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" And Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever6 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever6 ) = True Points . PointRequestedOutputs ( PointNames . P6a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"OFF\" End If End If ' Lever 7 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" If Lever ( LeverNames . Lever7 ) = \"Normal\" Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" LeverLock ( LeverNames . Lever7 ) = False LeverRestroke ( LeverNames . Lever7 ) = True ElseIf Lever ( LeverNames . Lever7 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever7 ) = False Then If LeverRestroke ( LeverNames . Lever7 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" LeverRestroke ( LeverNames . Lever7 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If LeverLock ( LeverNames . Lever7 ) = False Else LeverLock ( LeverNames . Lever7 ) = True SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If End If ' Lever 8 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" If Lever ( LeverNames . Lever8 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" Then LeverLock ( LeverNames . Lever8 ) = False Else LeverLock ( LeverNames . Lever8 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" LeverRestroke ( LeverNames . Lever8 ) = True ElseIf Lever ( LeverNames . Lever8 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" Then LeverLock ( LeverNames . Lever8 ) = False If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever8 ) = False Then If LeverRestroke ( LeverNames . Lever8 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" LeverRestroke ( LeverNames . Lever8 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" LeverLock ( LeverNames . Lever8 ) = True End If Else LeverLock ( LeverNames . Lever8 ) = True SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" End If End If ' Lever 9 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" If Lever ( LeverNames . Lever9 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" Then LeverLock ( LeverNames . Lever9 ) = False Else LeverLock ( LeverNames . Lever9 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverRestroke ( LeverNames . Lever9 ) = True ElseIf Lever ( LeverNames . Lever9 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear Then LeverLock ( LeverNames . Lever9 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever9 ) = False Then If LeverRestroke ( LeverNames . Lever9 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" LeverLock ( LeverNames . Lever9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverLock ( LeverNames . Lever9 ) = True End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverLock ( LeverNames . Lever9 ) = True End If End If ' Lever 10 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point10Initiated = True Then If Lever ( LeverNames . Lever10 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False ElseIf Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever10 ) = \"Reverse\" Then If Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False ElseIf Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever10 ) = True Points . PointRequestedOutputs ( PointNames . P10 ) = \"OFF\" End If End If ' Lever 11 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point11Initiated = True Then If Lever ( LeverNames . Lever11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" Then LeverLock ( LeverNames . Lever11 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Lever ( LeverNames . Lever18 ) = \"Normal\" Then Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever11 ) = True Points . PointRequestedOutputs ( PointNames . P11 ) = \"OFF\" End If End If ' Lever 12 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point12Initiated = True Then If Lever ( LeverNames . Lever12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever12 ) = True Points . PointRequestedOutputs ( PointNames . P12 ) = \"OFF\" End If End If ' Lever 13 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point13Initiated = True Then If Lever ( LeverNames . Lever13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever22 ) = \"Normal\" Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever13 ) = True Points . PointRequestedOutputs ( PointNames . P13 ) = \"OFF\" End If End If ' Lever 14 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point14Initiated = True Then If Lever ( LeverNames . Lever14 ) = \"Normal\" Then If Lever ( LeverNames . Lever9 ) = \"Normal\" Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever14 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever14 ) = False Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever14 ) = True Points . PointRequestedOutputs ( PointNames . P14 ) = \"OFF\" End If End If ' Lever 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then If RequireButtonInputToClearSignal = True Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button8 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True _ Or Buttons . ButtonRequest ( ButtonNames . Button20 ) = True Then AJ15AllowDispatch = True Else AJ15AllowDispatch = False End If Else AJ15AllowDispatch = True End If End If If Initializations . AJ15Initiated = True Then If Lever ( LeverNames . Lever15 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And (( Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" ) Or ( Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" )) And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TunnelSafe = True And Lever ( LeverNames . Lever13 ) = \"Normal\" Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If TrainDepartingP1SoundPlayed = False SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" LeverRestroke ( LeverNames . Lever15 ) = True ElseIf Lever ( LeverNames . Lever15 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever15 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And TunnelSafe = True And AJ15AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever15 ) = False Then If LeverRestroke ( LeverNames . Lever15 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" LeverRestroke ( LeverNames . Lever15 ) = False If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True End If End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" TrainDepartingP1SoundPlayed = False If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False End If End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If End If ' Lever 16 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ16Initiated = True Then If Lever ( LeverNames . Lever16 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointReturns ( PointNames . P6b ) = \"Normal\" _ And Lever ( LeverNames . Lever6 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And (( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" ) _ Or ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" )) And Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False Else LeverLock ( LeverNames . Lever16 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" LeverRestroke ( LeverNames . Lever16 ) = True ElseIf Lever ( LeverNames . Lever16 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointReturns ( PointNames . P6b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And (( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" ) Or ( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" )) Then LeverLock ( LeverNames . Lever16 ) = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If End If ' Lever 17 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" If Lever ( LeverNames . Lever17 ) = \"Normal\" And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever17 ) = False SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" LeverRestroke ( LeverNames . Lever17 ) = True ElseIf Lever ( LeverNames . Lever17 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever17 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever17 ) = False Then If LeverRestroke ( LeverNames . Lever17 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" LeverRestroke ( LeverNames . Lever17 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" LeverLock ( LeverNames . Lever17 ) = True End If End If ' Lever 18 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ18Initiated = True Then If Lever ( LeverNames . Lever18 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" _ And (( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" ) Or ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" )) Then LeverLock ( LeverNames . Lever18 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointReturns ( PointNames . P5b ) = \"Reverse\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" Then LeverLock ( LeverNames . Lever18 ) = False Else LeverLock ( LeverNames . Lever18 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" LeverRestroke ( LeverNames . Lever18 ) = True ElseIf Lever ( LeverNames . Lever18 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" Or Points . PointReturns ( PointNames . P10 ) = \"Reverse\" ) Then LeverLock ( LeverNames . Lever18 ) = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointReturns ( PointNames . P5b ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" Then LeverLock ( LeverNames . Lever18 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever18 ) = True SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If End If End If ' Lever 19 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point19Initiated = True Then If Lever ( LeverNames . Lever19 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever19 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever19 ) = False Points . PointRequestedOutputs ( PointNames . P19 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever19 ) = True Points . PointRequestedOutputs ( PointNames . P19 ) = \"OFF\" End If End If ' Lever 20 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever20 ) = True ' Lever 21 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ' Lever 22 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ22Initiated = True Then If Lever ( LeverNames . Lever22 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TunnelSafe = True And Lever ( LeverNames . Lever13 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" LeverRestroke ( LeverNames . Lever22 ) = True ElseIf Lever ( LeverNames . Lever22 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TunnelSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever22 ) = False Then If LeverRestroke ( LeverNames . Lever22 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" LeverRestroke ( LeverNames . Lever22 ) = False If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP2SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever22 ) = True SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" TrainDepartingP2SoundPlayed = False If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then Buttons . ButtonRequest ( ButtonNames . Button15 ) = False Buttons . ButtonRequest ( ButtonNames . Button16 ) = False End If End If Else LeverLock ( LeverNames . Lever22 ) = True SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundManual.vb"},{"location":"mainsystem/Files/WestBoundManual_8vb/#githubsignallingsystemehmr-signalling-systemlogicwestboundmanualvb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic/WestBoundManual.vb"},{"location":"mainsystem/Files/WestBoundManual_8vb/#source-code","text":"Imports EHMR_Signalling_System . DigitalDeviceAddress Public Class WestBoundManual Const Occupied As Boolean = False Const Clear As Boolean = True Shared TrainApprochingP1SoundPlayed1 As Boolean Shared TrainApprochingP1SoundPlayed2 As Boolean Shared TrainApprochingP1SoundPlayed3 As Boolean Shared TrainApprochingP2SoundPlayed1 As Boolean Shared TrainApprochingP2SoundPlayed2 As Boolean Shared TrainDepartingP1SoundPlayed As Boolean Shared TrainDepartingP2SoundPlayed As Boolean Shared AJ15AllowDispatch As Boolean Public Shared Sub Manual () ' Sounds ' Approching P1 from Inner If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And PointReturns ( PointNames . P5b ) = \"Reverse\" And TrainApprochingP1SoundPlayed1 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrainApprochingP1SoundPlayed1 = True Then TrainApprochingP1SoundPlayed1 = False ' Approching P1 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Occupied And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And PointReturns ( PointNames . P6b ) = \"Normal\" And TrainApprochingP1SoundPlayed2 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed2 = True Then TrainApprochingP1SoundPlayed2 = False ' Approching P1 from Headshunt ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Occupied And Points . PointReturns ( PointNames . P11 ) = \"Reverse\" And TrainApprochingP1SoundPlayed3 = False Then Sound . TrainApprochingP1 () TrainApprochingP1SoundPlayed3 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrainApprochingP1SoundPlayed3 = True Then TrainApprochingP1SoundPlayed3 = False ' Approching P2 from Inner ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed1 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed1 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed1 = True Then TrainApprochingP2SoundPlayed1 = False ' Approching P2 from Outer ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Occupied And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Occupied And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And TrainApprochingP2SoundPlayed2 = False Then Sound . TrainApprochingP2 () TrainApprochingP2SoundPlayed2 = True ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrainApprochingP2SoundPlayed2 = True Then TrainApprochingP2SoundPlayed2 = False End If ' Lever 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ1Initiated = True Then If Lever ( LeverNames . Lever1 ) = \"Normal\" Then LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever1 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever1 ) = False SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" Else LeverLock ( LeverNames . Lever1 ) = True SignalSystemState ( Definitions . SignalNames . AJ1E ) = \"Danger\" End If End If ' Lever 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ2Initiated = True Then If Lever ( LeverNames . Lever2 ) = \"Normal\" Then LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever2 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever2 ) = False SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" Else LeverLock ( LeverNames . Lever2 ) = True SignalSystemState ( Definitions . SignalNames . AJ2E ) = \"Danger\" End If End If ' Lever 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ3Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ3E ) = \"Danger\" If Lever ( LeverNames . Lever3 ) = \"Normal\" And TunnelSafe = True And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever3 ) = False SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" LeverRestroke ( LeverNames . Lever3 ) = True ElseIf Lever ( LeverNames . Lever3 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever3 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionD ) = Clear And TunnelSafe = True And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever3 ) = False Then If LeverRestroke ( LeverNames . Lever3 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" LeverRestroke ( LeverNames . Lever3 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever3 ) = True SignalSystemState ( Definitions . SignalNames . AJ3W ) = \"Danger\" End If End If ' Lever 4 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ4Initiated = True Then If Lever ( LeverNames . Lever4 ) = \"Normal\" Then LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" ElseIf Lever ( LeverNames . Lever4 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever4 ) = False SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" Else LeverLock ( LeverNames . Lever4 ) = True SignalSystemState ( Definitions . SignalNames . AJ4E ) = \"Danger\" End If End If ' Lever 5 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point5Initiated = True Then If Lever ( LeverNames . Lever5 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever6 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" And Lever ( LeverNames . Lever18 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever5 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever5 ) = False Else LeverLock ( LeverNames . Lever5 ) = True End If Points . PointRequestedOutputs ( PointNames . P5a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever5 ) = True Points . PointRequestedOutputs ( PointNames . P5a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P5b ) = \"OFF\" End If End If ' Lever 6 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point6Initiated = True Then If Lever ( LeverNames . Lever6 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" And Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Normal\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Normal\" ElseIf Lever ( LeverNames . Lever6 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever5 ) = \"Normal\" _ Then LeverLock ( LeverNames . Lever6 ) = False Else LeverLock ( LeverNames . Lever6 ) = True End If Points . PointRequestedOutputs ( PointNames . P6a ) = \"Reverse\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"Reverse\" Else LeverLock ( LeverNames . Lever6 ) = True Points . PointRequestedOutputs ( PointNames . P6a ) = \"OFF\" Points . PointRequestedOutputs ( PointNames . P6b ) = \"OFF\" End If End If ' Lever 7 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ7Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ7E ) = \"Danger\" If Lever ( LeverNames . Lever7 ) = \"Normal\" Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" LeverLock ( LeverNames . Lever7 ) = False LeverRestroke ( LeverNames . Lever7 ) = True ElseIf Lever ( LeverNames . Lever7 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever7 ) = False Then If LeverRestroke ( LeverNames . Lever7 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" LeverRestroke ( LeverNames . Lever7 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If LeverLock ( LeverNames . Lever7 ) = False Else LeverLock ( LeverNames . Lever7 ) = True SignalSystemState ( Definitions . SignalNames . AJ7W ) = \"Danger\" End If End If ' Lever 8 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ8Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ8E ) = \"Danger\" If Lever ( LeverNames . Lever8 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" Then LeverLock ( LeverNames . Lever8 ) = False Else LeverLock ( LeverNames . Lever8 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" LeverRestroke ( LeverNames . Lever8 ) = True ElseIf Lever ( LeverNames . Lever8 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionC ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionCD ) = Clear And Points . PointReturns ( PointNames . P19 ) = \"Normal\" And Lever ( LeverNames . Lever19 ) = \"Normal\" Then LeverLock ( LeverNames . Lever8 ) = False If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever8 ) = False Then If LeverRestroke ( LeverNames . Lever8 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" LeverRestroke ( LeverNames . Lever8 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" LeverLock ( LeverNames . Lever8 ) = True End If Else LeverLock ( LeverNames . Lever8 ) = True SignalSystemState ( Definitions . SignalNames . AJ8W ) = \"Danger\" End If End If ' Lever 9 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ9Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ9E ) = \"Danger\" If Lever ( LeverNames . Lever9 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" Then LeverLock ( LeverNames . Lever9 ) = False Else LeverLock ( LeverNames . Lever9 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverRestroke ( LeverNames . Lever9 ) = True ElseIf Lever ( LeverNames . Lever9 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionNO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionNO14 ) = SectionIsClear Then LeverLock ( LeverNames . Lever9 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionN ) = Clear And Points . PointReturns ( PointNames . P14 ) = \"Normal\" And Lever ( LeverNames . Lever14 ) = \"Normal\" Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever9 ) = False Then If LeverRestroke ( LeverNames . Lever9 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" LeverLock ( LeverNames . Lever9 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverLock ( LeverNames . Lever9 ) = True End If Else SignalSystemState ( Definitions . SignalNames . AJ9W ) = \"Danger\" LeverLock ( LeverNames . Lever9 ) = True End If End If ' Lever 10 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point10Initiated = True Then If Lever ( LeverNames . Lever10 ) = \"Normal\" Then If Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False ElseIf Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever10 ) = \"Reverse\" Then If Points . PointReturns ( PointNames . P6a ) = \"Normal\" And PointReturns ( PointNames . P5b ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Lever ( LeverNames . Lever18 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False ElseIf Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And PointReturns ( PointNames . P6b ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Lever ( LeverNames . Lever16 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionQ10 ) = Clear _ Then LeverLock ( LeverNames . Lever10 ) = False Else LeverLock ( LeverNames . Lever10 ) = True End If Points . PointRequestedOutputs ( PointNames . P10 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever10 ) = True Points . PointRequestedOutputs ( PointNames . P10 ) = \"OFF\" End If End If ' Lever 11 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point11Initiated = True Then If Lever ( LeverNames . Lever11 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" Then LeverLock ( LeverNames . Lever11 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" And Lever ( LeverNames . Lever18 ) = \"Normal\" Then Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever11 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear Then LeverLock ( LeverNames . Lever11 ) = False Else LeverLock ( LeverNames . Lever11 ) = True End If Points . PointRequestedOutputs ( PointNames . P11 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever11 ) = True Points . PointRequestedOutputs ( PointNames . P11 ) = \"OFF\" End If End If ' Lever 12 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point12Initiated = True Then If Lever ( LeverNames . Lever12 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever12 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever12 ) = False Else LeverLock ( LeverNames . Lever12 ) = True End If Points . PointRequestedOutputs ( PointNames . P12 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever12 ) = True Points . PointRequestedOutputs ( PointNames . P12 ) = \"OFF\" End If End If ' Lever 13 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point13Initiated = True Then If Lever ( LeverNames . Lever13 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever15 ) = \"Normal\" Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever13 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Lever ( LeverNames . Lever22 ) = \"Normal\" Then LeverLock ( LeverNames . Lever13 ) = False Else LeverLock ( LeverNames . Lever13 ) = True End If Points . PointRequestedOutputs ( PointNames . P13 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever13 ) = True Points . PointRequestedOutputs ( PointNames . P13 ) = \"OFF\" End If End If ' Lever 14 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point14Initiated = True Then If Lever ( LeverNames . Lever14 ) = \"Normal\" Then If Lever ( LeverNames . Lever9 ) = \"Normal\" Then LeverLock ( LeverNames . Lever14 ) = False Else LeverLock ( LeverNames . Lever14 ) = True End If Points . PointRequestedOutputs ( PointNames . P14 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever14 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever14 ) = False Points . PointRequestedOutputs ( PointNames . P14 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever14 ) = True Points . PointRequestedOutputs ( PointNames . P14 ) = \"OFF\" End If End If ' Lever 15 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" Then If RequireButtonInputToClearSignal = True Then If Buttons . ButtonRequest ( ButtonNames . Button7 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button8 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button9 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button17 ) = True Or Buttons . ButtonRequest ( ButtonNames . Button23 ) = True _ Or Buttons . ButtonRequest ( ButtonNames . Button20 ) = True Then AJ15AllowDispatch = True Else AJ15AllowDispatch = False End If Else AJ15AllowDispatch = True End If End If If Initializations . AJ15Initiated = True Then If Lever ( LeverNames . Lever15 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And (( Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" ) Or ( Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" )) And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And TunnelSafe = True And Lever ( LeverNames . Lever13 ) = \"Normal\" Then LeverLock ( LeverNames . Lever15 ) = False Else LeverLock ( LeverNames . Lever15 ) = True End If TrainDepartingP1SoundPlayed = False SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" LeverRestroke ( LeverNames . Lever15 ) = True ElseIf Lever ( LeverNames . Lever15 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear Then LeverLock ( LeverNames . Lever15 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Normal\" And Lever ( LeverNames . Lever12 ) = \"Normal\" And Points . PointReturns ( PointNames . P13 ) = \"Normal\" And Lever ( LeverNames . Lever13 ) = \"Normal\" And TunnelSafe = True And AJ15AllowDispatch = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever15 ) = False Then If LeverRestroke ( LeverNames . Lever15 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" LeverRestroke ( LeverNames . Lever15 ) = False If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Clear\" If TrainDepartingP1SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP1SoundPlayed = True End If End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P12 ) = \"Reverse\" And Lever ( LeverNames . Lever12 ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionF12 ) = Clear Then SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Shunt\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Shunt\" Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False Else SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" TrainDepartingP1SoundPlayed = False If TrackSectionUnoccupied ( TrackSectionNames . SectionG ) = Clear Then Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button8 ) = False Buttons . ButtonRequest ( ButtonNames . Button9 ) = False Buttons . ButtonRequest ( ButtonNames . Button23 ) = False Buttons . ButtonRequest ( ButtonNames . Button17 ) = False Buttons . ButtonRequest ( ButtonNames . Button7 ) = False Buttons . ButtonRequest ( ButtonNames . Button20 ) = False End If End If Else LeverLock ( LeverNames . Lever15 ) = True SignalSystemState ( Definitions . SignalNames . AJ15W ) = \"Danger\" SignalSystemState ( Definitions . SignalNames . S12 ) = \"Danger\" End If End If ' Lever 16 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ16Initiated = True Then If Lever ( LeverNames . Lever16 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointReturns ( PointNames . P6b ) = \"Normal\" _ And Lever ( LeverNames . Lever6 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear _ And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And (( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" ) _ Or ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" )) And Lever ( LeverNames . Lever18 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False Else LeverLock ( LeverNames . Lever16 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" LeverRestroke ( LeverNames . Lever16 ) = True ElseIf Lever ( LeverNames . Lever16 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And PointReturns ( PointNames . P6b ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" Then LeverLock ( LeverNames . Lever16 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And PointReturns ( PointNames . P6b ) = \"Reverse\" And Lever ( LeverNames . Lever6 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Reverse\" And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And (( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" ) Or ( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" )) Then LeverLock ( LeverNames . Lever16 ) = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever16 ) = False Then If LeverRestroke ( LeverNames . Lever16 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" LeverRestroke ( LeverNames . Lever16 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever16 ) = True SignalSystemState ( Definitions . SignalNames . AJ16W ) = \"Danger\" End If End If ' Lever 17 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ17Initiated = True Then SignalSystemState ( Definitions . SignalNames . AJ17E ) = \"Danger\" If Lever ( LeverNames . Lever17 ) = \"Normal\" And LineSide . CrossingSafe = True Then LeverLock ( LeverNames . Lever17 ) = False SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" LeverRestroke ( LeverNames . Lever17 ) = True ElseIf Lever ( LeverNames . Lever17 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever17 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionO ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . Sectionop ) = Clear And LineSide . CrossingSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever17 ) = False Then If LeverRestroke ( LeverNames . Lever17 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" LeverRestroke ( LeverNames . Lever17 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" End If Else SignalSystemState ( Definitions . SignalNames . AJ17W ) = \"Danger\" LeverLock ( LeverNames . Lever17 ) = True End If End If ' Lever 18 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ18Initiated = True Then If Lever ( LeverNames . Lever18 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" _ And (( Points . PointReturns ( PointNames . P10 ) = \"Reverse\" And Lever ( LeverNames . Lever10 ) = \"Reverse\" ) Or ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" And Lever ( LeverNames . Lever10 ) = \"Normal\" )) Then LeverLock ( LeverNames . Lever18 ) = False ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointReturns ( PointNames . P5b ) = \"Reverse\" And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" _ And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And Lever ( LeverNames . Lever16 ) = \"Normal\" Then LeverLock ( LeverNames . Lever18 ) = False Else LeverLock ( LeverNames . Lever18 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" LeverRestroke ( LeverNames . Lever18 ) = True ElseIf Lever ( LeverNames . Lever18 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And PointReturns ( PointNames . P5b ) = \"Normal\" And Lever ( LeverNames . Lever5 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionR ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And Points . PointReturns ( PointNames . P6a ) = \"Normal\" And Lever ( LeverNames . Lever6 ) = \"Normal\" And ( Points . PointReturns ( PointNames . P10 ) = \"Normal\" Or Points . PointReturns ( PointNames . P10 ) = \"Reverse\" ) Then LeverLock ( LeverNames . Lever18 ) = False If Points . PointReturns ( PointNames . P10 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If Else If TrackSectionUnoccupied ( TrackSectionNames . SectionQ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionP ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If End If ElseIf TrackSectionUnoccupied ( TrackSectionNames . SectionM ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionB ) = Clear And PointReturns ( PointNames . P5b ) = \"Reverse\" And Lever ( LeverNames . Lever5 ) = \"Reverse\" And Points . PointReturns ( PointNames . P11 ) = \"Normal\" And Lever ( LeverNames . Lever11 ) = \"Normal\" And TrackSectionUnoccupied ( TrackSectionNames . SectionK ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionJ ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionL ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionA ) = Clear And Points . PointReturns ( PointNames . P5a ) = \"Reverse\" Then LeverLock ( LeverNames . Lever18 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionH ) = Clear Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever18 ) = False Then If LeverRestroke ( LeverNames . Lever18 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" LeverRestroke ( LeverNames . Lever18 ) = False End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Clear\" End If Else SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever18 ) = True SignalSystemState ( Definitions . SignalNames . AJ18W ) = \"Danger\" End If End If End If ' Lever 19 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . Point19Initiated = True Then If Lever ( LeverNames . Lever19 ) = \"Normal\" Then If Lever ( LeverNames . Lever8 ) = \"Normal\" Then LeverLock ( LeverNames . Lever19 ) = False Else LeverLock ( LeverNames . Lever19 ) = True End If Points . PointRequestedOutputs ( PointNames . P19 ) = \"Normal\" ElseIf Lever ( LeverNames . Lever19 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever19 ) = False Points . PointRequestedOutputs ( PointNames . P19 ) = \"Reverse\" Else LeverLock ( LeverNames . Lever19 ) = True Points . PointRequestedOutputs ( PointNames . P19 ) = \"OFF\" End If End If ' Lever 20 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever20 ) = True ' Lever 21 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LeverLock ( LeverNames . Lever21 ) = True SignalSystemState ( Definitions . SignalNames . AJ21E ) = \"Danger\" ' Lever 22 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ If Initializations . AJ22Initiated = True Then If Lever ( LeverNames . Lever22 ) = \"Normal\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And TunnelSafe = True And Lever ( LeverNames . Lever13 ) = \"Reverse\" Then LeverLock ( LeverNames . Lever22 ) = False Else LeverLock ( LeverNames . Lever22 ) = True End If SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" LeverRestroke ( LeverNames . Lever22 ) = True ElseIf Lever ( LeverNames . Lever22 ) = \"Reverse\" Then If TrackSectionUnoccupied ( TrackSectionNames . SectionF ) = Clear And TrackSectionUnoccupied ( TrackSectionNames . SectionF13 ) = Clear Then LeverLock ( LeverNames . Lever22 ) = False If TrackSectionUnoccupied ( TrackSectionNames . SectionE ) = Clear And Points . PointReturns ( PointNames . P13 ) = \"Reverse\" And Lever ( LeverNames . Lever13 ) = \"Reverse\" And TunnelSafe = True Then If RuntimeConfig . config . LeverRestroke ( LeverNames . Lever22 ) = False Then If LeverRestroke ( LeverNames . Lever22 ) = True Then SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" LeverRestroke ( LeverNames . Lever22 ) = False If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP2 () TrainDepartingP2SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Clear\" If TrainDepartingP2SoundPlayed = False Then Sound . TrainDepartingP1 () TrainDepartingP2SoundPlayed = True End If End If Else SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If Else LeverLock ( LeverNames . Lever22 ) = True SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" TrainDepartingP2SoundPlayed = False If TrackSectionUnoccupied ( TrackSectionNames . SectionI ) = Clear Then Buttons . ButtonRequest ( ButtonNames . Button15 ) = False Buttons . ButtonRequest ( ButtonNames . Button16 ) = False End If End If Else LeverLock ( LeverNames . Lever22 ) = True SignalSystemState ( Definitions . SignalNames . AJ22W ) = \"Danger\" End If End If End Sub Protected Overrides Sub Finalize () MyBase . Finalize () End Sub End Class Updated on 2022-11-28 at 15:55:22 +0000","title":"Source code"},{"location":"mainsystem/Files/dir_100752e4646f021f9c75e359aed72fba/","text":"/github/SignallingSystem/EHMR Signalling System/Misc \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Misc/AlarmsAndNotifications.vb /github/SignallingSystem/EHMR Signalling System/Misc/IOMonitor.vb /github/SignallingSystem/EHMR Signalling System/Misc/Main.vb /github/SignallingSystem/EHMR Signalling System/Misc/SendMail.vb /github/SignallingSystem/EHMR Signalling System/Misc/Updater.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Misc"},{"location":"mainsystem/Files/dir_100752e4646f021f9c75e359aed72fba/#githubsignallingsystemehmr-signalling-systemmisc","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Misc"},{"location":"mainsystem/Files/dir_100752e4646f021f9c75e359aed72fba/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Misc/AlarmsAndNotifications.vb /github/SignallingSystem/EHMR Signalling System/Misc/IOMonitor.vb /github/SignallingSystem/EHMR Signalling System/Misc/Main.vb /github/SignallingSystem/EHMR Signalling System/Misc/SendMail.vb /github/SignallingSystem/EHMR Signalling System/Misc/Updater.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_1411712a680355ea84ee88b7ce929b43/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigCrossing.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigLevers.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPoints.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPower.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSections.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSignals.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode"},{"location":"mainsystem/Files/dir_1411712a680355ea84ee88b7ce929b43/#githubsignallingsystemehmr-signalling-systemconfigsconfigboxconfigboxsupportcode","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode"},{"location":"mainsystem/Files/dir_1411712a680355ea84ee88b7ce929b43/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigCrossing.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigLevers.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPoints.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigPower.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSections.vb /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode/ConfigSignals.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_18c6c6d0c544fef64a2875af7ea8e466/","text":"/github/SignallingSystem/EHMR Signalling System \u00b6 Directories \u00b6 Name /github/SignallingSystem/EHMR Signalling System/AI /github/SignallingSystem/EHMR Signalling System/Configs /github/SignallingSystem/EHMR Signalling System/Devices /github/SignallingSystem/EHMR Signalling System/Logic /github/SignallingSystem/EHMR Signalling System/Misc /github/SignallingSystem/EHMR Signalling System/Serial /github/SignallingSystem/EHMR Signalling System/Users /github/SignallingSystem/EHMR Signalling System/Web /github/SignallingSystem/EHMR Signalling System/WebConfig Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/ApplicationEvents.vb /github/SignallingSystem/EHMR Signalling System/Settings.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System"},{"location":"mainsystem/Files/dir_18c6c6d0c544fef64a2875af7ea8e466/#githubsignallingsystemehmr-signalling-system","text":"","title":"/github/SignallingSystem/EHMR Signalling System"},{"location":"mainsystem/Files/dir_18c6c6d0c544fef64a2875af7ea8e466/#directories","text":"Name /github/SignallingSystem/EHMR Signalling System/AI /github/SignallingSystem/EHMR Signalling System/Configs /github/SignallingSystem/EHMR Signalling System/Devices /github/SignallingSystem/EHMR Signalling System/Logic /github/SignallingSystem/EHMR Signalling System/Misc /github/SignallingSystem/EHMR Signalling System/Serial /github/SignallingSystem/EHMR Signalling System/Users /github/SignallingSystem/EHMR Signalling System/Web /github/SignallingSystem/EHMR Signalling System/WebConfig","title":"Directories"},{"location":"mainsystem/Files/dir_18c6c6d0c544fef64a2875af7ea8e466/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/ApplicationEvents.vb /github/SignallingSystem/EHMR Signalling System/Settings.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_24eb6ebeb63d5b56f42df688effeb974/","text":"/github/SignallingSystem \u00b6 Directories \u00b6 Name /github/SignallingSystem/EHMR Signalling System Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem"},{"location":"mainsystem/Files/dir_24eb6ebeb63d5b56f42df688effeb974/#githubsignallingsystem","text":"","title":"/github/SignallingSystem"},{"location":"mainsystem/Files/dir_24eb6ebeb63d5b56f42df688effeb974/#directories","text":"Name /github/SignallingSystem/EHMR Signalling System Updated on 2022-11-28 at 15:55:22 +0000","title":"Directories"},{"location":"mainsystem/Files/dir_3c18a1ce60c13d83f5be1a7fa3e9879a/","text":"/github/SignallingSystem/EHMR Signalling System/Devices \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Devices/AnalogIOManager.vb /github/SignallingSystem/EHMR Signalling System/Devices/Buttons.vb /github/SignallingSystem/EHMR Signalling System/Devices/DigitalDeviceAddress.vb /github/SignallingSystem/EHMR Signalling System/Devices/FrameIndicatorLights.vb /github/SignallingSystem/EHMR Signalling System/Devices/Fuses.vb /github/SignallingSystem/EHMR Signalling System/Devices/Levers.vb /github/SignallingSystem/EHMR Signalling System/Devices/LineSide.vb /github/SignallingSystem/EHMR Signalling System/Devices/MimicDiagram.vb /github/SignallingSystem/EHMR Signalling System/Devices/Points.vb /github/SignallingSystem/EHMR Signalling System/Devices/PointSections.vb /github/SignallingSystem/EHMR Signalling System/Devices/Signals.vb /github/SignallingSystem/EHMR Signalling System/Devices/Sound.vb /github/SignallingSystem/EHMR Signalling System/Devices/TrackSections.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Devices"},{"location":"mainsystem/Files/dir_3c18a1ce60c13d83f5be1a7fa3e9879a/#githubsignallingsystemehmr-signalling-systemdevices","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Devices"},{"location":"mainsystem/Files/dir_3c18a1ce60c13d83f5be1a7fa3e9879a/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Devices/AnalogIOManager.vb /github/SignallingSystem/EHMR Signalling System/Devices/Buttons.vb /github/SignallingSystem/EHMR Signalling System/Devices/DigitalDeviceAddress.vb /github/SignallingSystem/EHMR Signalling System/Devices/FrameIndicatorLights.vb /github/SignallingSystem/EHMR Signalling System/Devices/Fuses.vb /github/SignallingSystem/EHMR Signalling System/Devices/Levers.vb /github/SignallingSystem/EHMR Signalling System/Devices/LineSide.vb /github/SignallingSystem/EHMR Signalling System/Devices/MimicDiagram.vb /github/SignallingSystem/EHMR Signalling System/Devices/Points.vb /github/SignallingSystem/EHMR Signalling System/Devices/PointSections.vb /github/SignallingSystem/EHMR Signalling System/Devices/Signals.vb /github/SignallingSystem/EHMR Signalling System/Devices/Sound.vb /github/SignallingSystem/EHMR Signalling System/Devices/TrackSections.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_4fdad2bb8468acc8b4ea69541081aa68/","text":"/github/SignallingSystem/EHMR Signalling System/Logic \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Logic/BlockSections.vb /github/SignallingSystem/EHMR Signalling System/Logic/EastBoundComputer.vb /github/SignallingSystem/EHMR Signalling System/Logic/EastBoundManual.vb /github/SignallingSystem/EHMR Signalling System/Logic/Errors.vb /github/SignallingSystem/EHMR Signalling System/Logic/Initializations.vb /github/SignallingSystem/EHMR Signalling System/Logic/LogicStart.vb /github/SignallingSystem/EHMR Signalling System/Logic/Messages.vb /github/SignallingSystem/EHMR Signalling System/Logic/Power.vb /github/SignallingSystem/EHMR Signalling System/Logic/Safety.vb /github/SignallingSystem/EHMR Signalling System/Logic/SignalBackLocks.vb /github/SignallingSystem/EHMR Signalling System/Logic/SPADDetection.vb /github/SignallingSystem/EHMR Signalling System/Logic/WestBoundComputer.vb /github/SignallingSystem/EHMR Signalling System/Logic/WestBoundManual.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Logic"},{"location":"mainsystem/Files/dir_4fdad2bb8468acc8b4ea69541081aa68/#githubsignallingsystemehmr-signalling-systemlogic","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Logic"},{"location":"mainsystem/Files/dir_4fdad2bb8468acc8b4ea69541081aa68/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Logic/BlockSections.vb /github/SignallingSystem/EHMR Signalling System/Logic/EastBoundComputer.vb /github/SignallingSystem/EHMR Signalling System/Logic/EastBoundManual.vb /github/SignallingSystem/EHMR Signalling System/Logic/Errors.vb /github/SignallingSystem/EHMR Signalling System/Logic/Initializations.vb /github/SignallingSystem/EHMR Signalling System/Logic/LogicStart.vb /github/SignallingSystem/EHMR Signalling System/Logic/Messages.vb /github/SignallingSystem/EHMR Signalling System/Logic/Power.vb /github/SignallingSystem/EHMR Signalling System/Logic/Safety.vb /github/SignallingSystem/EHMR Signalling System/Logic/SignalBackLocks.vb /github/SignallingSystem/EHMR Signalling System/Logic/SPADDetection.vb /github/SignallingSystem/EHMR Signalling System/Logic/WestBoundComputer.vb /github/SignallingSystem/EHMR Signalling System/Logic/WestBoundManual.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_57e3cf831b42a779df2d86b1676a8b65/","text":"/github/SignallingSystem/EHMR Signalling System/Users \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Users/LoginForm.vb /github/SignallingSystem/EHMR Signalling System/Users/UserManagment.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Users"},{"location":"mainsystem/Files/dir_57e3cf831b42a779df2d86b1676a8b65/#githubsignallingsystemehmr-signalling-systemusers","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Users"},{"location":"mainsystem/Files/dir_57e3cf831b42a779df2d86b1676a8b65/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Users/LoginForm.vb /github/SignallingSystem/EHMR Signalling System/Users/UserManagment.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_595c56e507eac15fe72ef685bde9a1f3/","text":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox \u00b6 Directories \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/Configs.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox"},{"location":"mainsystem/Files/dir_595c56e507eac15fe72ef685bde9a1f3/#githubsignallingsystemehmr-signalling-systemconfigsconfigbox","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox"},{"location":"mainsystem/Files/dir_595c56e507eac15fe72ef685bde9a1f3/#directories","text":"Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode","title":"Directories"},{"location":"mainsystem/Files/dir_595c56e507eac15fe72ef685bde9a1f3/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/Configs.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_7c037ea65c693aa8689d3e9a7b5b23f4/","text":"/github/SignallingSystem/EHMR Signalling System/Serial \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Serial/Serial.vb /github/SignallingSystem/EHMR Signalling System/Serial/SerialPixelLeds.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Serial"},{"location":"mainsystem/Files/dir_7c037ea65c693aa8689d3e9a7b5b23f4/#githubsignallingsystemehmr-signalling-systemserial","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Serial"},{"location":"mainsystem/Files/dir_7c037ea65c693aa8689d3e9a7b5b23f4/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Serial/Serial.vb /github/SignallingSystem/EHMR Signalling System/Serial/SerialPixelLeds.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_ab5363af54f8ef3bb62d5dbdee7542a2/","text":"/github/SignallingSystem/EHMR Signalling System/Configs \u00b6 Directories \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Configs/Definitions.vb /github/SignallingSystem/EHMR Signalling System/Configs/GlobalConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/PopUpConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/RuntimeConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/StaticValues.vb /github/SignallingSystem/EHMR Signalling System/Configs/UpdateSettings.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Configs"},{"location":"mainsystem/Files/dir_ab5363af54f8ef3bb62d5dbdee7542a2/#githubsignallingsystemehmr-signalling-systemconfigs","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Configs"},{"location":"mainsystem/Files/dir_ab5363af54f8ef3bb62d5dbdee7542a2/#directories","text":"Name /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox","title":"Directories"},{"location":"mainsystem/Files/dir_ab5363af54f8ef3bb62d5dbdee7542a2/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Configs/Definitions.vb /github/SignallingSystem/EHMR Signalling System/Configs/GlobalConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/PopUpConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/RuntimeConfig.vb /github/SignallingSystem/EHMR Signalling System/Configs/StaticValues.vb /github/SignallingSystem/EHMR Signalling System/Configs/UpdateSettings.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_c94eee4a6c024bf817b0914ed261a446/","text":"/github/SignallingSystem/EHMR Signalling System/AI \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/AI/AIEastBound.vb /github/SignallingSystem/EHMR Signalling System/AI/AIStart.vb /github/SignallingSystem/EHMR Signalling System/AI/AIWestBound.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/AI"},{"location":"mainsystem/Files/dir_c94eee4a6c024bf817b0914ed261a446/#githubsignallingsystemehmr-signalling-systemai","text":"","title":"/github/SignallingSystem/EHMR Signalling System/AI"},{"location":"mainsystem/Files/dir_c94eee4a6c024bf817b0914ed261a446/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/AI/AIEastBound.vb /github/SignallingSystem/EHMR Signalling System/AI/AIStart.vb /github/SignallingSystem/EHMR Signalling System/AI/AIWestBound.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_d579e910cc9dd5dd6abd8dc707e65965/","text":"/github/SignallingSystem/EHMR Signalling System/WebConfig \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/WebConfig/IISHandler1.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/WebConfig"},{"location":"mainsystem/Files/dir_d579e910cc9dd5dd6abd8dc707e65965/#githubsignallingsystemehmr-signalling-systemwebconfig","text":"","title":"/github/SignallingSystem/EHMR Signalling System/WebConfig"},{"location":"mainsystem/Files/dir_d579e910cc9dd5dd6abd8dc707e65965/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/WebConfig/IISHandler1.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/dir_ff5570b1fa57d842a2d5aa9cca222a16/","text":"/github/SignallingSystem/EHMR Signalling System/Web \u00b6 Files \u00b6 Name /github/SignallingSystem/EHMR Signalling System/Web/AppServer.vb /github/SignallingSystem/EHMR Signalling System/Web/Json Values.vb /github/SignallingSystem/EHMR Signalling System/Web/JsonDisplay.vb /github/SignallingSystem/EHMR Signalling System/Web/Telegram.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"/github/SignallingSystem/EHMR Signalling System/Web"},{"location":"mainsystem/Files/dir_ff5570b1fa57d842a2d5aa9cca222a16/#githubsignallingsystemehmr-signalling-systemweb","text":"","title":"/github/SignallingSystem/EHMR Signalling System/Web"},{"location":"mainsystem/Files/dir_ff5570b1fa57d842a2d5aa9cca222a16/#files","text":"Name /github/SignallingSystem/EHMR Signalling System/Web/AppServer.vb /github/SignallingSystem/EHMR Signalling System/Web/Json Values.vb /github/SignallingSystem/EHMR Signalling System/Web/JsonDisplay.vb /github/SignallingSystem/EHMR Signalling System/Web/Telegram.vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/index_files/","text":"Files \u00b6 dir /github/SignallingSystem dir /github/SignallingSystem/EHMR Signalling System dir /github/SignallingSystem/EHMR Signalling System/AI file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Configs dir /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox dir /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Devices file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Logic file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Misc file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Serial file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Users file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Web file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/WebConfig file vb file vb file vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Files/index_files/#files","text":"dir /github/SignallingSystem dir /github/SignallingSystem/EHMR Signalling System dir /github/SignallingSystem/EHMR Signalling System/AI file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Configs dir /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox dir /github/SignallingSystem/EHMR Signalling System/Configs/ConfigBox/ConfigBoxSupportCode file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Devices file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Logic file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Misc file vb file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Serial file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Users file vb file vb dir /github/SignallingSystem/EHMR Signalling System/Web file vb file vb file vb file vb dir /github/SignallingSystem/EHMR Signalling System/WebConfig file vb file vb file vb Updated on 2022-11-28 at 15:55:22 +0000","title":"Files"},{"location":"mainsystem/Modules/index_groups/","text":"Modules \u00b6 Updated on 2022-11-28 at 15:55:22 +0000","title":"Modules"},{"location":"mainsystem/Modules/index_groups/#modules","text":"Updated on 2022-11-28 at 15:55:22 +0000","title":"Modules"},{"location":"mainsystem/Namespaces/","text":"Namespaces \u00b6 Updated on 2022-11-28 at 15:55:22 +0000","title":"Namespaces"},{"location":"mainsystem/Namespaces/#namespaces","text":"Updated on 2022-11-28 at 15:55:22 +0000","title":"Namespaces"},{"location":"mainsystem/Pages/","text":"Pages \u00b6 Updated on 2022-11-28 at 15:55:22 +0000","title":"Pages"},{"location":"mainsystem/Pages/#pages","text":"Updated on 2022-11-28 at 15:55:22 +0000","title":"Pages"},{"location":"mqtt/","text":"MQTT \u00b6 The disparate parts of the signalling system use MQTT to exchange messages and work together. MQTT is a well established messaging platform that is in use across the internet by many companies including the likes of Facebook for their messenger platform. Published Subscriber model \u00b6 MQTT works on a publisher subscriber model. When a client first connects it subscribes to one or more topics. Any number of clients can subscribe to the same topic. Any message that is then sent to that topic are sent down to the subscribers. Wildcards \u00b6 Topics are hierarchical, allowing clients to subscribe to a topic and any sub topics using wildcards. There are two wildcards: # and + . # can only appear at the end of a topic string, and matches anything. + only matches one level, and can be anywhere in the topic string For example, take the following subscribers signalling/points/# signalling/points/+/request signalling/+/request A message that is sent to /signalling/points/5a/request will match the first two, but not the third. A message that is sent to signalling/points/5a/output will match the first, but not the other two. A message that is sent to signalling/platform/request will match the third, but not the other two. Authorisation \u00b6 Clients will be limited in what they are able to access, both for read and write. This not only helps to provide extra security, but also cuts down on unnecessary messages hitting clients. Retained messages \u00b6 Messages that are sent can be sent with the retain flag. If the retain flag is set, then the message will be sent to any client that subscribes to the topic, even if it subscribes after the message has been sent. Only one retained message is permitted per topic Messages that are sent from the main logic and from the 485 headend are all sent with the retain flag set. Messages to and from the audio system and client apps are not sent with the retain flag. Message structure \u00b6 Topics \u00b6 See the topics page for more information about the topics that are in use, and the payloads expected by each topic Message payloads \u00b6 MQTT itself does not impose any message structure on messages. For the Signalling system, however, the following message structure is in use: { \"username\" : \"system\" , \"source\" : \"mainlogic\" , \"payload\" : { \"danger\" : true , \"caution\" : false , \"clear\" : false , \"route_1\" : false , \"route_2\" : false , \"shunt\" : false } } The username specifies who is responsible for sending the message. Where it is a system process, this will always be system. Where it is a client request, it will be in the form of their email address. The source is the source application of the request, be it the main logic, audioplayer, 485headend, client application, etc. The payload of the message varies depending on the type of message. Above is the signal output for a signal. More information about payloads can be found on the topics page.","title":"MQTT"},{"location":"mqtt/#mqtt","text":"The disparate parts of the signalling system use MQTT to exchange messages and work together. MQTT is a well established messaging platform that is in use across the internet by many companies including the likes of Facebook for their messenger platform.","title":"MQTT"},{"location":"mqtt/#published-subscriber-model","text":"MQTT works on a publisher subscriber model. When a client first connects it subscribes to one or more topics. Any number of clients can subscribe to the same topic. Any message that is then sent to that topic are sent down to the subscribers.","title":"Published Subscriber model"},{"location":"mqtt/#wildcards","text":"Topics are hierarchical, allowing clients to subscribe to a topic and any sub topics using wildcards. There are two wildcards: # and + . # can only appear at the end of a topic string, and matches anything. + only matches one level, and can be anywhere in the topic string For example, take the following subscribers signalling/points/# signalling/points/+/request signalling/+/request A message that is sent to /signalling/points/5a/request will match the first two, but not the third. A message that is sent to signalling/points/5a/output will match the first, but not the other two. A message that is sent to signalling/platform/request will match the third, but not the other two.","title":"Wildcards"},{"location":"mqtt/#authorisation","text":"Clients will be limited in what they are able to access, both for read and write. This not only helps to provide extra security, but also cuts down on unnecessary messages hitting clients.","title":"Authorisation"},{"location":"mqtt/#retained-messages","text":"Messages that are sent can be sent with the retain flag. If the retain flag is set, then the message will be sent to any client that subscribes to the topic, even if it subscribes after the message has been sent. Only one retained message is permitted per topic Messages that are sent from the main logic and from the 485 headend are all sent with the retain flag set. Messages to and from the audio system and client apps are not sent with the retain flag.","title":"Retained messages"},{"location":"mqtt/#message-structure","text":"","title":"Message structure"},{"location":"mqtt/#topics","text":"See the topics page for more information about the topics that are in use, and the payloads expected by each topic","title":"Topics"},{"location":"mqtt/#message-payloads","text":"MQTT itself does not impose any message structure on messages. For the Signalling system, however, the following message structure is in use: { \"username\" : \"system\" , \"source\" : \"mainlogic\" , \"payload\" : { \"danger\" : true , \"caution\" : false , \"clear\" : false , \"route_1\" : false , \"route_2\" : false , \"shunt\" : false } } The username specifies who is responsible for sending the message. Where it is a system process, this will always be system. Where it is a client request, it will be in the form of their email address. The source is the source application of the request, be it the main logic, audioplayer, 485headend, client application, etc. The payload of the message varies depending on the type of message. Above is the signal output for a signal. More information about payloads can be found on the topics page.","title":"Message payloads"},{"location":"mqtt/topics/","text":"Topics \u00b6 All topics to do with signalling are prefixed with signalling/ . The topics below show the payload part of the message. The actual message will, of course, be packaged within an envelope. Voltage values \u00b6 All read values in from the field are voltage values. These are an integer between 0 and 1024. This equates to 0 to 50 volts. audio \u00b6 Messages to do with the playing and control of audio Platform can be 0 for both, 1 for platform 1, or 2 for platform 2 play \u00b6 Play an audio clip. { \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 } playing \u00b6 Notification that a specific file / audio clip is playing. { \"file\" : \"/path/to/audio/file.wav\" , \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 } played \u00b6 Notification that a specific file / audio clip has completed playing. { \"file\" : \"/path/to/audio/file.wav\" , \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 } buttons/<id> \u00b6 Message to do with request buttons. Output sets the halo lights input \u00b6 { \"value\" : 450 } output \u00b6 { \"value\" : true } system \u00b6 { \"value\" : true , \"enabled\" : true } override \u00b6 { \"value\" : true } request \u00b6 { \"outputOverride\" : \"true|false|system\" , \"enabled\" : \"true|false\" } direction \u00b6 Direction information output \u00b6 { \"direction\" : \"eastbound|westbound\" } system \u00b6 { \"direction\" : \"eastbound|westbound\" } override \u00b6 { \"direction\" : \"eastbound|westbound|system\" } request \u00b6 Request both direction override, and configure month-based direction { \"directionOverride\" : \"eastbound|westbound|system\" , \"januaryDirection\" : \"eastbound|westbound\" , \"februaryDirection\" : \"eastbound|westbound\" , \"marchDirection\" : \"eastbound|westbound\" , \"aprilDirection\" : \"eastbound|westbound\" , \"mayDirection\" : \"eastbound|westbound\" , \"juneDirection\" : \"eastbound|westbound\" , \"julyDirection\" : \"eastbound|westbound\" , \"augustDirection\" : \"eastbound|westbound\" , \"septemberDirection\" : \"eastbound|westbound\" , \"octoberDirection\" : \"eastbound|westbound\" , \"novemberDirection\" : \"eastbound|westbound\" , \"decemberDirection\" : \"eastbound|westbound\" } levers/<id> \u00b6 input \u00b6 { \"normal\" : 450 , \"reverse\" : 0 } output \u00b6 { \"locked\" : true } system \u00b6 { \"input\" : \"normal|reverse|noreturn\" , \"locked\" : true , \"autoRestroke\" : false } override \u00b6 { \"input\" : \"normal|reverse|noreturn|system\" , \"locked\" : \"true|false|system\" } request \u00b6 { \"outputOverride\" : \"true|false|system\" , \"inputOverride\" : \"true|false|system\" , \"autoRestroke\" : \"true|false\" } messages/add \u00b6 { \"type\" : \"error|trts|info\" , \"message\" : \"message text\" } messages/remove \u00b6 { \"type\" : \"error|trts|info\" , \"message\" : \"message text\" } points/<name> \u00b6 Point names are their number. input \u00b6 { \"normal\" : 0 , \"reverse\" : 450 } output \u00b6 { \"normal\" : false , \"reverse\" : false } system \u00b6 { \"input\" : \"normal|reverse|noreturn\" , \"output\" : \"normal|reverse|off\" } override \u00b6 { \"input\" : \"normal|reverse|noreturn|system\" , \"output\" : \"normal|reverse|isolated|system\" } request \u00b6 { \"inputOverride\" : \"normal|reverse|noreturn|system\" , \"outputOverride\" : \"normal|reverse|isolated|system\" } relays/<name> \u00b6 This covers all output and input relays input \u00b6 { \"value\" : 450 } output \u00b6 { \"value\" : true } sections/<name> \u00b6 Section names are their letter, or for point sections P followed by their number (eg P5a ) input \u00b6 { \"value\" : 450 } system \u00b6 { \"state\" : \"occupied|unoccupied|route|engineer\" , \"setPoint\" : \"10\" , \"errorPoint\" : \"1\" , \"delay\" : \"5\" } override \u00b6 { \"state\" : \"occupied|unoccupied|engineer|system\" } request \u00b6 { \"inputOverride\" : \"occupied|unoccupied|engineer|system\" , \"setPoint\" : \"10\" , \"errorPoint\" : \"1\" , \"delay\" : \"5\" } sensors/<name> \u00b6 input \u00b6 { \"no\" : 450 , \"nc\" : 0 } system \u00b6 { \"state\" : \"open|closed|noreturn\" } override \u00b6 { \"state\" : \"open|closed|noreturn|system\" } request \u00b6 { \"overrideState\" : \"open|closed|noreturn|system\" } signals/<name> \u00b6 name is in the format AJ, followed by the number, followed by E or W for mainline signals, S followed by the number for shunt only signals input \u00b6 not currently used, but will be implemented with the new cards output \u00b6 { \"danger\" : true , \"caution\" : false , \"clear\" : false , \"route_1\" : false , \"route_2\" : false , \"shunt\" : false } system \u00b6 { \"output\" : \"danger|caution|clear|shunt|noaspect\" , \"route_1\" : true , \"route_2\" : true , \"delay\" : 5 } override \u00b6 { \"output\" : \"danger|caution|clear|shunt|noaspect|system\" } request \u00b6 { \"outputOverride\" : \"danger|caution|clear|shunt|noaspect|system\" , \"delay\" : 5 } station \u00b6 request \u00b6 { \"combineP1\" : \"true|false\" , \"requireRequestForSS\" : \"true|false\" , \"allowDeparting\" : \"true|false\" }","title":"Topics"},{"location":"mqtt/topics/#topics","text":"All topics to do with signalling are prefixed with signalling/ . The topics below show the payload part of the message. The actual message will, of course, be packaged within an envelope.","title":"Topics"},{"location":"mqtt/topics/#voltage-values","text":"All read values in from the field are voltage values. These are an integer between 0 and 1024. This equates to 0 to 50 volts.","title":"Voltage values"},{"location":"mqtt/topics/#audio","text":"Messages to do with the playing and control of audio Platform can be 0 for both, 1 for platform 1, or 2 for platform 2","title":"audio"},{"location":"mqtt/topics/#play","text":"Play an audio clip. { \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 }","title":"play"},{"location":"mqtt/topics/#playing","text":"Notification that a specific file / audio clip is playing. { \"file\" : \"/path/to/audio/file.wav\" , \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 }","title":"playing"},{"location":"mqtt/topics/#played","text":"Notification that a specific file / audio clip has completed playing. { \"file\" : \"/path/to/audio/file.wav\" , \"audio\" : \"approaching|aux1|aux2|aux3|departing|remembranceat|remembrancepost|remembrancepre|siding\" , \"platform\" : 0 }","title":"played"},{"location":"mqtt/topics/#buttonsid","text":"Message to do with request buttons. Output sets the halo lights","title":"buttons/&lt;id&gt;"},{"location":"mqtt/topics/#input","text":"{ \"value\" : 450 }","title":"input"},{"location":"mqtt/topics/#output","text":"{ \"value\" : true }","title":"output"},{"location":"mqtt/topics/#system","text":"{ \"value\" : true , \"enabled\" : true }","title":"system"},{"location":"mqtt/topics/#override","text":"{ \"value\" : true }","title":"override"},{"location":"mqtt/topics/#request","text":"{ \"outputOverride\" : \"true|false|system\" , \"enabled\" : \"true|false\" }","title":"request"},{"location":"mqtt/topics/#direction","text":"Direction information","title":"direction"},{"location":"mqtt/topics/#output_1","text":"{ \"direction\" : \"eastbound|westbound\" }","title":"output"},{"location":"mqtt/topics/#system_1","text":"{ \"direction\" : \"eastbound|westbound\" }","title":"system"},{"location":"mqtt/topics/#override_1","text":"{ \"direction\" : \"eastbound|westbound|system\" }","title":"override"},{"location":"mqtt/topics/#request_1","text":"Request both direction override, and configure month-based direction { \"directionOverride\" : \"eastbound|westbound|system\" , \"januaryDirection\" : \"eastbound|westbound\" , \"februaryDirection\" : \"eastbound|westbound\" , \"marchDirection\" : \"eastbound|westbound\" , \"aprilDirection\" : \"eastbound|westbound\" , \"mayDirection\" : \"eastbound|westbound\" , \"juneDirection\" : \"eastbound|westbound\" , \"julyDirection\" : \"eastbound|westbound\" , \"augustDirection\" : \"eastbound|westbound\" , \"septemberDirection\" : \"eastbound|westbound\" , \"octoberDirection\" : \"eastbound|westbound\" , \"novemberDirection\" : \"eastbound|westbound\" , \"decemberDirection\" : \"eastbound|westbound\" }","title":"request"},{"location":"mqtt/topics/#leversid","text":"","title":"levers/&lt;id&gt;"},{"location":"mqtt/topics/#input_1","text":"{ \"normal\" : 450 , \"reverse\" : 0 }","title":"input"},{"location":"mqtt/topics/#output_2","text":"{ \"locked\" : true }","title":"output"},{"location":"mqtt/topics/#system_2","text":"{ \"input\" : \"normal|reverse|noreturn\" , \"locked\" : true , \"autoRestroke\" : false }","title":"system"},{"location":"mqtt/topics/#override_2","text":"{ \"input\" : \"normal|reverse|noreturn|system\" , \"locked\" : \"true|false|system\" }","title":"override"},{"location":"mqtt/topics/#request_2","text":"{ \"outputOverride\" : \"true|false|system\" , \"inputOverride\" : \"true|false|system\" , \"autoRestroke\" : \"true|false\" }","title":"request"},{"location":"mqtt/topics/#messagesadd","text":"{ \"type\" : \"error|trts|info\" , \"message\" : \"message text\" }","title":"messages/add"},{"location":"mqtt/topics/#messagesremove","text":"{ \"type\" : \"error|trts|info\" , \"message\" : \"message text\" }","title":"messages/remove"},{"location":"mqtt/topics/#pointsname","text":"Point names are their number.","title":"points/&lt;name&gt;"},{"location":"mqtt/topics/#input_2","text":"{ \"normal\" : 0 , \"reverse\" : 450 }","title":"input"},{"location":"mqtt/topics/#output_3","text":"{ \"normal\" : false , \"reverse\" : false }","title":"output"},{"location":"mqtt/topics/#system_3","text":"{ \"input\" : \"normal|reverse|noreturn\" , \"output\" : \"normal|reverse|off\" }","title":"system"},{"location":"mqtt/topics/#override_3","text":"{ \"input\" : \"normal|reverse|noreturn|system\" , \"output\" : \"normal|reverse|isolated|system\" }","title":"override"},{"location":"mqtt/topics/#request_3","text":"{ \"inputOverride\" : \"normal|reverse|noreturn|system\" , \"outputOverride\" : \"normal|reverse|isolated|system\" }","title":"request"},{"location":"mqtt/topics/#relaysname","text":"This covers all output and input relays","title":"relays/&lt;name&gt;"},{"location":"mqtt/topics/#input_3","text":"{ \"value\" : 450 }","title":"input"},{"location":"mqtt/topics/#output_4","text":"{ \"value\" : true }","title":"output"},{"location":"mqtt/topics/#sectionsname","text":"Section names are their letter, or for point sections P followed by their number (eg P5a )","title":"sections/&lt;name&gt;"},{"location":"mqtt/topics/#input_4","text":"{ \"value\" : 450 }","title":"input"},{"location":"mqtt/topics/#system_4","text":"{ \"state\" : \"occupied|unoccupied|route|engineer\" , \"setPoint\" : \"10\" , \"errorPoint\" : \"1\" , \"delay\" : \"5\" }","title":"system"},{"location":"mqtt/topics/#override_4","text":"{ \"state\" : \"occupied|unoccupied|engineer|system\" }","title":"override"},{"location":"mqtt/topics/#request_4","text":"{ \"inputOverride\" : \"occupied|unoccupied|engineer|system\" , \"setPoint\" : \"10\" , \"errorPoint\" : \"1\" , \"delay\" : \"5\" }","title":"request"},{"location":"mqtt/topics/#sensorsname","text":"","title":"sensors/&lt;name&gt;"},{"location":"mqtt/topics/#input_5","text":"{ \"no\" : 450 , \"nc\" : 0 }","title":"input"},{"location":"mqtt/topics/#system_5","text":"{ \"state\" : \"open|closed|noreturn\" }","title":"system"},{"location":"mqtt/topics/#override_5","text":"{ \"state\" : \"open|closed|noreturn|system\" }","title":"override"},{"location":"mqtt/topics/#request_5","text":"{ \"overrideState\" : \"open|closed|noreturn|system\" }","title":"request"},{"location":"mqtt/topics/#signalsname","text":"name is in the format AJ, followed by the number, followed by E or W for mainline signals, S followed by the number for shunt only signals","title":"signals/&lt;name&gt;"},{"location":"mqtt/topics/#input_6","text":"not currently used, but will be implemented with the new cards","title":"input"},{"location":"mqtt/topics/#output_5","text":"{ \"danger\" : true , \"caution\" : false , \"clear\" : false , \"route_1\" : false , \"route_2\" : false , \"shunt\" : false }","title":"output"},{"location":"mqtt/topics/#system_6","text":"{ \"output\" : \"danger|caution|clear|shunt|noaspect\" , \"route_1\" : true , \"route_2\" : true , \"delay\" : 5 }","title":"system"},{"location":"mqtt/topics/#override_6","text":"{ \"output\" : \"danger|caution|clear|shunt|noaspect|system\" }","title":"override"},{"location":"mqtt/topics/#request_6","text":"{ \"outputOverride\" : \"danger|caution|clear|shunt|noaspect|system\" , \"delay\" : 5 }","title":"request"},{"location":"mqtt/topics/#station","text":"","title":"station"},{"location":"mqtt/topics/#request_7","text":"{ \"combineP1\" : \"true|false\" , \"requireRequestForSS\" : \"true|false\" , \"allowDeparting\" : \"true|false\" }","title":"request"}]}